//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: vpn.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Nym_Vpn_NymVpndClient`, then call methods of this protocol to make API calls.
internal protocol Nym_Vpn_NymVpndClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? { get }

  func info(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>

  func setNetwork(
    _ request: Nym_Vpn_SetNetworkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_SetNetworkRequest, Nym_Vpn_SetNetworkResponse>

  func getSystemMessages(
    _ request: Nym_Vpn_GetSystemMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetSystemMessagesRequest, Nym_Vpn_GetSystemMessagesResponse>

  func getFeatureFlags(
    _ request: Nym_Vpn_GetFeatureFlagsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetFeatureFlagsRequest, Nym_Vpn_GetFeatureFlagsResponse>

  func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>

  func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>

  func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>

  func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Nym_Vpn_ConnectionStateChange) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>

  func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Nym_Vpn_ConnectionStatusUpdate) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>

  func listGateways(
    _ request: Nym_Vpn_ListGatewaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListGatewaysRequest, Nym_Vpn_ListGatewaysResponse>

  func listCountries(
    _ request: Nym_Vpn_ListCountriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListCountriesRequest, Nym_Vpn_ListCountriesResponse>

  func storeAccount(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>

  func isAccountStored(
    _ request: Nym_Vpn_IsAccountStoredRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_IsAccountStoredRequest, Nym_Vpn_IsAccountStoredResponse>

  func removeAccount(
    _ request: Nym_Vpn_RemoveAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_RemoveAccountRequest, Nym_Vpn_RemoveAccountResponse>

  func getAccountIdentity(
    _ request: Nym_Vpn_GetAccountIdentityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetAccountIdentityRequest, Nym_Vpn_GetAccountIdentityResponse>

  func getAccountLinks(
    _ request: Nym_Vpn_GetAccountLinksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetAccountLinksRequest, Nym_Vpn_GetAccountLinksResponse>

  func getAccountState(
    _ request: Nym_Vpn_GetAccountStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetAccountStateRequest, Nym_Vpn_GetAccountStateResponse>

  func refreshAccountState(
    _ request: Nym_Vpn_RefreshAccountStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_RefreshAccountStateRequest, Nym_Vpn_RefreshAccountStateResponse>

  func isReadyToConnect(
    _ request: Nym_Vpn_IsReadyToConnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_IsReadyToConnectRequest, Nym_Vpn_IsReadyToConnectResponse>

  func resetDeviceIdentity(
    _ request: Nym_Vpn_ResetDeviceIdentityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ResetDeviceIdentityRequest, Nym_Vpn_ResetDeviceIdentityResponse>

  func getDeviceIdentity(
    _ request: Nym_Vpn_GetDeviceIdentityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetDeviceIdentityRequest, Nym_Vpn_GetDeviceIdentityResponse>

  func registerDevice(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>

  func requestZkNym(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>

  func getDeviceZkNyms(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>

  func fetchRawAccountSummary(
    _ request: Nym_Vpn_FetchRawAccountSummaryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_FetchRawAccountSummaryRequest, Nym_Vpn_FetchRawAccountSummaryResponse>

  func fetchRawDevices(
    _ request: Nym_Vpn_FetchRawDevicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_FetchRawDevicesRequest, Nym_Vpn_FetchRawDevicesResponse>
}

extension Nym_Vpn_NymVpndClientProtocol {
  internal var serviceName: String {
    return "nym.vpn.NymVpnd"
  }

  /// Get info regarding the nym-vpnd in general, like version etc.
  ///
  /// - Parameters:
  ///   - request: Request to send to Info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func info(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  /// Set the network. This requires a restart to take effect
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNetwork.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setNetwork(
    _ request: Nym_Vpn_SetNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_SetNetworkRequest, Nym_Vpn_SetNetworkResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.setNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNetworkInterceptors() ?? []
    )
  }

  /// List messages fetched from nym-vpn-api
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSystemMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSystemMessages(
    _ request: Nym_Vpn_GetSystemMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetSystemMessagesRequest, Nym_Vpn_GetSystemMessagesResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getSystemMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSystemMessagesInterceptors() ?? []
    )
  }

  /// Unary call to GetFeatureFlags
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFeatureFlags.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFeatureFlags(
    _ request: Nym_Vpn_GetFeatureFlagsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetFeatureFlagsRequest, Nym_Vpn_GetFeatureFlagsResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getFeatureFlags.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeatureFlagsInterceptors() ?? []
    )
  }

  /// Start the tunnel and connect
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnConnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  /// Disconnect and stop the tunnel
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnDisconnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  /// Get the current tunnel and connection status
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  /// Listen for events that indicate that the connection state changes, such as
  /// from Connecting -> Connected
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToConnectionStateChanges.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Nym_Vpn_ConnectionStateChange) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange> {
    return self.makeServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Listen for general status evens emitted by nym-vpnd, which in turn might
  /// originate from elsewhere such as remote gateways.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToConnectionStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Nym_Vpn_ConnectionStatusUpdate) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate> {
    return self.makeServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
      handler: handler
    )
  }

  /// List the available gateways for the selected mode
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGateways.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listGateways(
    _ request: Nym_Vpn_ListGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListGatewaysRequest, Nym_Vpn_ListGatewaysResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGatewaysInterceptors() ?? []
    )
  }

  /// List the avaiable countries for the selected mode
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCountries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listCountries(
    _ request: Nym_Vpn_ListCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListCountriesRequest, Nym_Vpn_ListCountriesResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCountriesInterceptors() ?? []
    )
  }

  /// Handle the stored recovery phrase, which is also the account identity and authentication
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storeAccount(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? []
    )
  }

  /// Unary call to IsAccountStored
  ///
  /// - Parameters:
  ///   - request: Request to send to IsAccountStored.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isAccountStored(
    _ request: Nym_Vpn_IsAccountStoredRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_IsAccountStoredRequest, Nym_Vpn_IsAccountStoredResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.isAccountStored.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsAccountStoredInterceptors() ?? []
    )
  }

  /// Unary call to RemoveAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeAccount(
    _ request: Nym_Vpn_RemoveAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_RemoveAccountRequest, Nym_Vpn_RemoveAccountResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.removeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountIdentity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountIdentity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountIdentity(
    _ request: Nym_Vpn_GetAccountIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetAccountIdentityRequest, Nym_Vpn_GetAccountIdentityResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountIdentityInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountLinks
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountLinks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountLinks(
    _ request: Nym_Vpn_GetAccountLinksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetAccountLinksRequest, Nym_Vpn_GetAccountLinksResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountLinks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountLinksInterceptors() ?? []
    )
  }

  /// Query the account state, which refers to the server side account, as it is
  /// known and interpreted by nym-vpnd
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountState(
    _ request: Nym_Vpn_GetAccountStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetAccountStateRequest, Nym_Vpn_GetAccountStateResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountStateInterceptors() ?? []
    )
  }

  /// Unary call to RefreshAccountState
  ///
  /// - Parameters:
  ///   - request: Request to send to RefreshAccountState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func refreshAccountState(
    _ request: Nym_Vpn_RefreshAccountStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_RefreshAccountStateRequest, Nym_Vpn_RefreshAccountStateResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.refreshAccountState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshAccountStateInterceptors() ?? []
    )
  }

  /// Unary call to IsReadyToConnect
  ///
  /// - Parameters:
  ///   - request: Request to send to IsReadyToConnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isReadyToConnect(
    _ request: Nym_Vpn_IsReadyToConnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_IsReadyToConnectRequest, Nym_Vpn_IsReadyToConnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.isReadyToConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsReadyToConnectInterceptors() ?? []
    )
  }

  /// Reset the device identity
  ///
  /// - Parameters:
  ///   - request: Request to send to ResetDeviceIdentity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resetDeviceIdentity(
    _ request: Nym_Vpn_ResetDeviceIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ResetDeviceIdentityRequest, Nym_Vpn_ResetDeviceIdentityResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.resetDeviceIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetDeviceIdentityInterceptors() ?? []
    )
  }

  /// Unary call to GetDeviceIdentity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeviceIdentity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDeviceIdentity(
    _ request: Nym_Vpn_GetDeviceIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetDeviceIdentityRequest, Nym_Vpn_GetDeviceIdentityResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceIdentityInterceptors() ?? []
    )
  }

  /// Try to register the local device with the nym-vpn-api
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerDevice(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  /// Request new zk-nyms (ticketbooks) from the nym-vpn-api
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestZkNym.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestZkNym(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? []
    )
  }

  /// List the zk-nyms associated with this device from the nym-vpn-api
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeviceZkNyms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDeviceZkNyms(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? []
    )
  }

  /// Get the server side account summary directly from the nym-vpn-api
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchRawAccountSummary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fetchRawAccountSummary(
    _ request: Nym_Vpn_FetchRawAccountSummaryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_FetchRawAccountSummaryRequest, Nym_Vpn_FetchRawAccountSummaryResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawAccountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchRawAccountSummaryInterceptors() ?? []
    )
  }

  /// Get the list of devices directly from the nym-vpn-api
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchRawDevices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fetchRawDevices(
    _ request: Nym_Vpn_FetchRawDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_FetchRawDevicesRequest, Nym_Vpn_FetchRawDevicesResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchRawDevicesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Nym_Vpn_NymVpndClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Nym_Vpn_NymVpndNIOClient")
internal final class Nym_Vpn_NymVpndClient: Nym_Vpn_NymVpndClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the nym.vpn.NymVpnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Nym_Vpn_NymVpndNIOClient: Nym_Vpn_NymVpndClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?

  /// Creates a client for the nym.vpn.NymVpnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nym_Vpn_NymVpndAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? { get }

  func makeInfoCall(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>

  func makeSetNetworkCall(
    _ request: Nym_Vpn_SetNetworkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_SetNetworkRequest, Nym_Vpn_SetNetworkResponse>

  func makeGetSystemMessagesCall(
    _ request: Nym_Vpn_GetSystemMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetSystemMessagesRequest, Nym_Vpn_GetSystemMessagesResponse>

  func makeGetFeatureFlagsCall(
    _ request: Nym_Vpn_GetFeatureFlagsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetFeatureFlagsRequest, Nym_Vpn_GetFeatureFlagsResponse>

  func makeVpnConnectCall(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>

  func makeVpnDisconnectCall(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>

  func makeVpnStatusCall(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>

  func makeListenToConnectionStateChangesCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>

  func makeListenToConnectionStatusCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>

  func makeListGatewaysCall(
    _ request: Nym_Vpn_ListGatewaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListGatewaysRequest, Nym_Vpn_ListGatewaysResponse>

  func makeListCountriesCall(
    _ request: Nym_Vpn_ListCountriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListCountriesRequest, Nym_Vpn_ListCountriesResponse>

  func makeStoreAccountCall(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>

  func makeIsAccountStoredCall(
    _ request: Nym_Vpn_IsAccountStoredRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_IsAccountStoredRequest, Nym_Vpn_IsAccountStoredResponse>

  func makeRemoveAccountCall(
    _ request: Nym_Vpn_RemoveAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RemoveAccountRequest, Nym_Vpn_RemoveAccountResponse>

  func makeGetAccountIdentityCall(
    _ request: Nym_Vpn_GetAccountIdentityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountIdentityRequest, Nym_Vpn_GetAccountIdentityResponse>

  func makeGetAccountLinksCall(
    _ request: Nym_Vpn_GetAccountLinksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountLinksRequest, Nym_Vpn_GetAccountLinksResponse>

  func makeGetAccountStateCall(
    _ request: Nym_Vpn_GetAccountStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountStateRequest, Nym_Vpn_GetAccountStateResponse>

  func makeRefreshAccountStateCall(
    _ request: Nym_Vpn_RefreshAccountStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RefreshAccountStateRequest, Nym_Vpn_RefreshAccountStateResponse>

  func makeIsReadyToConnectCall(
    _ request: Nym_Vpn_IsReadyToConnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_IsReadyToConnectRequest, Nym_Vpn_IsReadyToConnectResponse>

  func makeResetDeviceIdentityCall(
    _ request: Nym_Vpn_ResetDeviceIdentityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ResetDeviceIdentityRequest, Nym_Vpn_ResetDeviceIdentityResponse>

  func makeGetDeviceIdentityCall(
    _ request: Nym_Vpn_GetDeviceIdentityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetDeviceIdentityRequest, Nym_Vpn_GetDeviceIdentityResponse>

  func makeRegisterDeviceCall(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>

  func makeRequestZkNymCall(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>

  func makeGetDeviceZkNymsCall(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>

  func makeFetchRawAccountSummaryCall(
    _ request: Nym_Vpn_FetchRawAccountSummaryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_FetchRawAccountSummaryRequest, Nym_Vpn_FetchRawAccountSummaryResponse>

  func makeFetchRawDevicesCall(
    _ request: Nym_Vpn_FetchRawDevicesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_FetchRawDevicesRequest, Nym_Vpn_FetchRawDevicesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nym_Vpn_NymVpndClientMetadata.serviceDescriptor
  }

  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeInfoCall(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  internal func makeSetNetworkCall(
    _ request: Nym_Vpn_SetNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_SetNetworkRequest, Nym_Vpn_SetNetworkResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.setNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNetworkInterceptors() ?? []
    )
  }

  internal func makeGetSystemMessagesCall(
    _ request: Nym_Vpn_GetSystemMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetSystemMessagesRequest, Nym_Vpn_GetSystemMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getSystemMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSystemMessagesInterceptors() ?? []
    )
  }

  internal func makeGetFeatureFlagsCall(
    _ request: Nym_Vpn_GetFeatureFlagsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetFeatureFlagsRequest, Nym_Vpn_GetFeatureFlagsResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getFeatureFlags.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeatureFlagsInterceptors() ?? []
    )
  }

  internal func makeVpnConnectCall(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  internal func makeVpnDisconnectCall(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  internal func makeVpnStatusCall(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  internal func makeListenToConnectionStateChangesCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange> {
    return self.makeAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? []
    )
  }

  internal func makeListenToConnectionStatusCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate> {
    return self.makeAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? []
    )
  }

  internal func makeListGatewaysCall(
    _ request: Nym_Vpn_ListGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListGatewaysRequest, Nym_Vpn_ListGatewaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGatewaysInterceptors() ?? []
    )
  }

  internal func makeListCountriesCall(
    _ request: Nym_Vpn_ListCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListCountriesRequest, Nym_Vpn_ListCountriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCountriesInterceptors() ?? []
    )
  }

  internal func makeStoreAccountCall(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? []
    )
  }

  internal func makeIsAccountStoredCall(
    _ request: Nym_Vpn_IsAccountStoredRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_IsAccountStoredRequest, Nym_Vpn_IsAccountStoredResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.isAccountStored.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsAccountStoredInterceptors() ?? []
    )
  }

  internal func makeRemoveAccountCall(
    _ request: Nym_Vpn_RemoveAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RemoveAccountRequest, Nym_Vpn_RemoveAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.removeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveAccountInterceptors() ?? []
    )
  }

  internal func makeGetAccountIdentityCall(
    _ request: Nym_Vpn_GetAccountIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountIdentityRequest, Nym_Vpn_GetAccountIdentityResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountIdentityInterceptors() ?? []
    )
  }

  internal func makeGetAccountLinksCall(
    _ request: Nym_Vpn_GetAccountLinksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountLinksRequest, Nym_Vpn_GetAccountLinksResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountLinks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountLinksInterceptors() ?? []
    )
  }

  internal func makeGetAccountStateCall(
    _ request: Nym_Vpn_GetAccountStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountStateRequest, Nym_Vpn_GetAccountStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountStateInterceptors() ?? []
    )
  }

  internal func makeRefreshAccountStateCall(
    _ request: Nym_Vpn_RefreshAccountStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RefreshAccountStateRequest, Nym_Vpn_RefreshAccountStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.refreshAccountState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshAccountStateInterceptors() ?? []
    )
  }

  internal func makeIsReadyToConnectCall(
    _ request: Nym_Vpn_IsReadyToConnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_IsReadyToConnectRequest, Nym_Vpn_IsReadyToConnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.isReadyToConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsReadyToConnectInterceptors() ?? []
    )
  }

  internal func makeResetDeviceIdentityCall(
    _ request: Nym_Vpn_ResetDeviceIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ResetDeviceIdentityRequest, Nym_Vpn_ResetDeviceIdentityResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.resetDeviceIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetDeviceIdentityInterceptors() ?? []
    )
  }

  internal func makeGetDeviceIdentityCall(
    _ request: Nym_Vpn_GetDeviceIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetDeviceIdentityRequest, Nym_Vpn_GetDeviceIdentityResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceIdentityInterceptors() ?? []
    )
  }

  internal func makeRegisterDeviceCall(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  internal func makeRequestZkNymCall(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? []
    )
  }

  internal func makeGetDeviceZkNymsCall(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? []
    )
  }

  internal func makeFetchRawAccountSummaryCall(
    _ request: Nym_Vpn_FetchRawAccountSummaryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_FetchRawAccountSummaryRequest, Nym_Vpn_FetchRawAccountSummaryResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawAccountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchRawAccountSummaryInterceptors() ?? []
    )
  }

  internal func makeFetchRawDevicesCall(
    _ request: Nym_Vpn_FetchRawDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_FetchRawDevicesRequest, Nym_Vpn_FetchRawDevicesResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchRawDevicesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncClientProtocol {
  internal func info(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_InfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  internal func setNetwork(
    _ request: Nym_Vpn_SetNetworkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_SetNetworkResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.setNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNetworkInterceptors() ?? []
    )
  }

  internal func getSystemMessages(
    _ request: Nym_Vpn_GetSystemMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetSystemMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getSystemMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSystemMessagesInterceptors() ?? []
    )
  }

  internal func getFeatureFlags(
    _ request: Nym_Vpn_GetFeatureFlagsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetFeatureFlagsResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getFeatureFlags.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeatureFlagsInterceptors() ?? []
    )
  }

  internal func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ConnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  internal func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_DisconnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  internal func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  internal func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Nym_Vpn_ConnectionStateChange> {
    return self.performAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? []
    )
  }

  internal func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Nym_Vpn_ConnectionStatusUpdate> {
    return self.performAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? []
    )
  }

  internal func listGateways(
    _ request: Nym_Vpn_ListGatewaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListGatewaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGatewaysInterceptors() ?? []
    )
  }

  internal func listCountries(
    _ request: Nym_Vpn_ListCountriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListCountriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCountriesInterceptors() ?? []
    )
  }

  internal func storeAccount(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_StoreAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? []
    )
  }

  internal func isAccountStored(
    _ request: Nym_Vpn_IsAccountStoredRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_IsAccountStoredResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.isAccountStored.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsAccountStoredInterceptors() ?? []
    )
  }

  internal func removeAccount(
    _ request: Nym_Vpn_RemoveAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_RemoveAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.removeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveAccountInterceptors() ?? []
    )
  }

  internal func getAccountIdentity(
    _ request: Nym_Vpn_GetAccountIdentityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetAccountIdentityResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountIdentityInterceptors() ?? []
    )
  }

  internal func getAccountLinks(
    _ request: Nym_Vpn_GetAccountLinksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetAccountLinksResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountLinks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountLinksInterceptors() ?? []
    )
  }

  internal func getAccountState(
    _ request: Nym_Vpn_GetAccountStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetAccountStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountStateInterceptors() ?? []
    )
  }

  internal func refreshAccountState(
    _ request: Nym_Vpn_RefreshAccountStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_RefreshAccountStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.refreshAccountState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshAccountStateInterceptors() ?? []
    )
  }

  internal func isReadyToConnect(
    _ request: Nym_Vpn_IsReadyToConnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_IsReadyToConnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.isReadyToConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsReadyToConnectInterceptors() ?? []
    )
  }

  internal func resetDeviceIdentity(
    _ request: Nym_Vpn_ResetDeviceIdentityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ResetDeviceIdentityResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.resetDeviceIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetDeviceIdentityInterceptors() ?? []
    )
  }

  internal func getDeviceIdentity(
    _ request: Nym_Vpn_GetDeviceIdentityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetDeviceIdentityResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceIdentityInterceptors() ?? []
    )
  }

  internal func registerDevice(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_RegisterDeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  internal func requestZkNym(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_RequestZkNymResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? []
    )
  }

  internal func getDeviceZkNyms(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetDeviceZkNymsResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? []
    )
  }

  internal func fetchRawAccountSummary(
    _ request: Nym_Vpn_FetchRawAccountSummaryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_FetchRawAccountSummaryResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawAccountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchRawAccountSummaryInterceptors() ?? []
    )
  }

  internal func fetchRawDevices(
    _ request: Nym_Vpn_FetchRawDevicesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_FetchRawDevicesResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchRawDevicesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Nym_Vpn_NymVpndAsyncClient: Nym_Vpn_NymVpndAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Nym_Vpn_NymVpndClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'info'.
  func makeInfoInterceptors() -> [ClientInterceptor<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>]

  /// - Returns: Interceptors to use when invoking 'setNetwork'.
  func makeSetNetworkInterceptors() -> [ClientInterceptor<Nym_Vpn_SetNetworkRequest, Nym_Vpn_SetNetworkResponse>]

  /// - Returns: Interceptors to use when invoking 'getSystemMessages'.
  func makeGetSystemMessagesInterceptors() -> [ClientInterceptor<Nym_Vpn_GetSystemMessagesRequest, Nym_Vpn_GetSystemMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getFeatureFlags'.
  func makeGetFeatureFlagsInterceptors() -> [ClientInterceptor<Nym_Vpn_GetFeatureFlagsRequest, Nym_Vpn_GetFeatureFlagsResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnConnect'.
  func makeVpnConnectInterceptors() -> [ClientInterceptor<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnDisconnect'.
  func makeVpnDisconnectInterceptors() -> [ClientInterceptor<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnStatus'.
  func makeVpnStatusInterceptors() -> [ClientInterceptor<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'listenToConnectionStateChanges'.
  func makeListenToConnectionStateChangesInterceptors() -> [ClientInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>]

  /// - Returns: Interceptors to use when invoking 'listenToConnectionStatus'.
  func makeListenToConnectionStatusInterceptors() -> [ClientInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>]

  /// - Returns: Interceptors to use when invoking 'listGateways'.
  func makeListGatewaysInterceptors() -> [ClientInterceptor<Nym_Vpn_ListGatewaysRequest, Nym_Vpn_ListGatewaysResponse>]

  /// - Returns: Interceptors to use when invoking 'listCountries'.
  func makeListCountriesInterceptors() -> [ClientInterceptor<Nym_Vpn_ListCountriesRequest, Nym_Vpn_ListCountriesResponse>]

  /// - Returns: Interceptors to use when invoking 'storeAccount'.
  func makeStoreAccountInterceptors() -> [ClientInterceptor<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'isAccountStored'.
  func makeIsAccountStoredInterceptors() -> [ClientInterceptor<Nym_Vpn_IsAccountStoredRequest, Nym_Vpn_IsAccountStoredResponse>]

  /// - Returns: Interceptors to use when invoking 'removeAccount'.
  func makeRemoveAccountInterceptors() -> [ClientInterceptor<Nym_Vpn_RemoveAccountRequest, Nym_Vpn_RemoveAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getAccountIdentity'.
  func makeGetAccountIdentityInterceptors() -> [ClientInterceptor<Nym_Vpn_GetAccountIdentityRequest, Nym_Vpn_GetAccountIdentityResponse>]

  /// - Returns: Interceptors to use when invoking 'getAccountLinks'.
  func makeGetAccountLinksInterceptors() -> [ClientInterceptor<Nym_Vpn_GetAccountLinksRequest, Nym_Vpn_GetAccountLinksResponse>]

  /// - Returns: Interceptors to use when invoking 'getAccountState'.
  func makeGetAccountStateInterceptors() -> [ClientInterceptor<Nym_Vpn_GetAccountStateRequest, Nym_Vpn_GetAccountStateResponse>]

  /// - Returns: Interceptors to use when invoking 'refreshAccountState'.
  func makeRefreshAccountStateInterceptors() -> [ClientInterceptor<Nym_Vpn_RefreshAccountStateRequest, Nym_Vpn_RefreshAccountStateResponse>]

  /// - Returns: Interceptors to use when invoking 'isReadyToConnect'.
  func makeIsReadyToConnectInterceptors() -> [ClientInterceptor<Nym_Vpn_IsReadyToConnectRequest, Nym_Vpn_IsReadyToConnectResponse>]

  /// - Returns: Interceptors to use when invoking 'resetDeviceIdentity'.
  func makeResetDeviceIdentityInterceptors() -> [ClientInterceptor<Nym_Vpn_ResetDeviceIdentityRequest, Nym_Vpn_ResetDeviceIdentityResponse>]

  /// - Returns: Interceptors to use when invoking 'getDeviceIdentity'.
  func makeGetDeviceIdentityInterceptors() -> [ClientInterceptor<Nym_Vpn_GetDeviceIdentityRequest, Nym_Vpn_GetDeviceIdentityResponse>]

  /// - Returns: Interceptors to use when invoking 'registerDevice'.
  func makeRegisterDeviceInterceptors() -> [ClientInterceptor<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'requestZkNym'.
  func makeRequestZkNymInterceptors() -> [ClientInterceptor<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>]

  /// - Returns: Interceptors to use when invoking 'getDeviceZkNyms'.
  func makeGetDeviceZkNymsInterceptors() -> [ClientInterceptor<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchRawAccountSummary'.
  func makeFetchRawAccountSummaryInterceptors() -> [ClientInterceptor<Nym_Vpn_FetchRawAccountSummaryRequest, Nym_Vpn_FetchRawAccountSummaryResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchRawDevices'.
  func makeFetchRawDevicesInterceptors() -> [ClientInterceptor<Nym_Vpn_FetchRawDevicesRequest, Nym_Vpn_FetchRawDevicesResponse>]
}

internal enum Nym_Vpn_NymVpndClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NymVpnd",
    fullName: "nym.vpn.NymVpnd",
    methods: [
      Nym_Vpn_NymVpndClientMetadata.Methods.info,
      Nym_Vpn_NymVpndClientMetadata.Methods.setNetwork,
      Nym_Vpn_NymVpndClientMetadata.Methods.getSystemMessages,
      Nym_Vpn_NymVpndClientMetadata.Methods.getFeatureFlags,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus,
      Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges,
      Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus,
      Nym_Vpn_NymVpndClientMetadata.Methods.listGateways,
      Nym_Vpn_NymVpndClientMetadata.Methods.listCountries,
      Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount,
      Nym_Vpn_NymVpndClientMetadata.Methods.isAccountStored,
      Nym_Vpn_NymVpndClientMetadata.Methods.removeAccount,
      Nym_Vpn_NymVpndClientMetadata.Methods.getAccountIdentity,
      Nym_Vpn_NymVpndClientMetadata.Methods.getAccountLinks,
      Nym_Vpn_NymVpndClientMetadata.Methods.getAccountState,
      Nym_Vpn_NymVpndClientMetadata.Methods.refreshAccountState,
      Nym_Vpn_NymVpndClientMetadata.Methods.isReadyToConnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.resetDeviceIdentity,
      Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceIdentity,
      Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice,
      Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym,
      Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms,
      Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawAccountSummary,
      Nym_Vpn_NymVpndClientMetadata.Methods.fetchRawDevices,
    ]
  )

  internal enum Methods {
    internal static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/nym.vpn.NymVpnd/Info",
      type: GRPCCallType.unary
    )

    internal static let setNetwork = GRPCMethodDescriptor(
      name: "SetNetwork",
      path: "/nym.vpn.NymVpnd/SetNetwork",
      type: GRPCCallType.unary
    )

    internal static let getSystemMessages = GRPCMethodDescriptor(
      name: "GetSystemMessages",
      path: "/nym.vpn.NymVpnd/GetSystemMessages",
      type: GRPCCallType.unary
    )

    internal static let getFeatureFlags = GRPCMethodDescriptor(
      name: "GetFeatureFlags",
      path: "/nym.vpn.NymVpnd/GetFeatureFlags",
      type: GRPCCallType.unary
    )

    internal static let vpnConnect = GRPCMethodDescriptor(
      name: "VpnConnect",
      path: "/nym.vpn.NymVpnd/VpnConnect",
      type: GRPCCallType.unary
    )

    internal static let vpnDisconnect = GRPCMethodDescriptor(
      name: "VpnDisconnect",
      path: "/nym.vpn.NymVpnd/VpnDisconnect",
      type: GRPCCallType.unary
    )

    internal static let vpnStatus = GRPCMethodDescriptor(
      name: "VpnStatus",
      path: "/nym.vpn.NymVpnd/VpnStatus",
      type: GRPCCallType.unary
    )

    internal static let listenToConnectionStateChanges = GRPCMethodDescriptor(
      name: "ListenToConnectionStateChanges",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStateChanges",
      type: GRPCCallType.serverStreaming
    )

    internal static let listenToConnectionStatus = GRPCMethodDescriptor(
      name: "ListenToConnectionStatus",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStatus",
      type: GRPCCallType.serverStreaming
    )

    internal static let listGateways = GRPCMethodDescriptor(
      name: "ListGateways",
      path: "/nym.vpn.NymVpnd/ListGateways",
      type: GRPCCallType.unary
    )

    internal static let listCountries = GRPCMethodDescriptor(
      name: "ListCountries",
      path: "/nym.vpn.NymVpnd/ListCountries",
      type: GRPCCallType.unary
    )

    internal static let storeAccount = GRPCMethodDescriptor(
      name: "StoreAccount",
      path: "/nym.vpn.NymVpnd/StoreAccount",
      type: GRPCCallType.unary
    )

    internal static let isAccountStored = GRPCMethodDescriptor(
      name: "IsAccountStored",
      path: "/nym.vpn.NymVpnd/IsAccountStored",
      type: GRPCCallType.unary
    )

    internal static let removeAccount = GRPCMethodDescriptor(
      name: "RemoveAccount",
      path: "/nym.vpn.NymVpnd/RemoveAccount",
      type: GRPCCallType.unary
    )

    internal static let getAccountIdentity = GRPCMethodDescriptor(
      name: "GetAccountIdentity",
      path: "/nym.vpn.NymVpnd/GetAccountIdentity",
      type: GRPCCallType.unary
    )

    internal static let getAccountLinks = GRPCMethodDescriptor(
      name: "GetAccountLinks",
      path: "/nym.vpn.NymVpnd/GetAccountLinks",
      type: GRPCCallType.unary
    )

    internal static let getAccountState = GRPCMethodDescriptor(
      name: "GetAccountState",
      path: "/nym.vpn.NymVpnd/GetAccountState",
      type: GRPCCallType.unary
    )

    internal static let refreshAccountState = GRPCMethodDescriptor(
      name: "RefreshAccountState",
      path: "/nym.vpn.NymVpnd/RefreshAccountState",
      type: GRPCCallType.unary
    )

    internal static let isReadyToConnect = GRPCMethodDescriptor(
      name: "IsReadyToConnect",
      path: "/nym.vpn.NymVpnd/IsReadyToConnect",
      type: GRPCCallType.unary
    )

    internal static let resetDeviceIdentity = GRPCMethodDescriptor(
      name: "ResetDeviceIdentity",
      path: "/nym.vpn.NymVpnd/ResetDeviceIdentity",
      type: GRPCCallType.unary
    )

    internal static let getDeviceIdentity = GRPCMethodDescriptor(
      name: "GetDeviceIdentity",
      path: "/nym.vpn.NymVpnd/GetDeviceIdentity",
      type: GRPCCallType.unary
    )

    internal static let registerDevice = GRPCMethodDescriptor(
      name: "RegisterDevice",
      path: "/nym.vpn.NymVpnd/RegisterDevice",
      type: GRPCCallType.unary
    )

    internal static let requestZkNym = GRPCMethodDescriptor(
      name: "RequestZkNym",
      path: "/nym.vpn.NymVpnd/RequestZkNym",
      type: GRPCCallType.unary
    )

    internal static let getDeviceZkNyms = GRPCMethodDescriptor(
      name: "GetDeviceZkNyms",
      path: "/nym.vpn.NymVpnd/GetDeviceZkNyms",
      type: GRPCCallType.unary
    )

    internal static let fetchRawAccountSummary = GRPCMethodDescriptor(
      name: "FetchRawAccountSummary",
      path: "/nym.vpn.NymVpnd/FetchRawAccountSummary",
      type: GRPCCallType.unary
    )

    internal static let fetchRawDevices = GRPCMethodDescriptor(
      name: "FetchRawDevices",
      path: "/nym.vpn.NymVpnd/FetchRawDevices",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nym_Vpn_NymVpndProvider: CallHandlerProvider {
  var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? { get }

  /// Get info regarding the nym-vpnd in general, like version etc.
  func info(request: Nym_Vpn_InfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_InfoResponse>

  /// Set the network. This requires a restart to take effect
  func setNetwork(request: Nym_Vpn_SetNetworkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_SetNetworkResponse>

  /// List messages fetched from nym-vpn-api
  func getSystemMessages(request: Nym_Vpn_GetSystemMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetSystemMessagesResponse>

  func getFeatureFlags(request: Nym_Vpn_GetFeatureFlagsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetFeatureFlagsResponse>

  /// Start the tunnel and connect
  func vpnConnect(request: Nym_Vpn_ConnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ConnectResponse>

  /// Disconnect and stop the tunnel
  func vpnDisconnect(request: Nym_Vpn_DisconnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_DisconnectResponse>

  /// Get the current tunnel and connection status
  func vpnStatus(request: Nym_Vpn_StatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_StatusResponse>

  /// Listen for events that indicate that the connection state changes, such as
  /// from Connecting -> Connected
  func listenToConnectionStateChanges(request: Nym_Vpn_Empty, context: StreamingResponseCallContext<Nym_Vpn_ConnectionStateChange>) -> EventLoopFuture<GRPCStatus>

  /// Listen for general status evens emitted by nym-vpnd, which in turn might
  /// originate from elsewhere such as remote gateways.
  func listenToConnectionStatus(request: Nym_Vpn_Empty, context: StreamingResponseCallContext<Nym_Vpn_ConnectionStatusUpdate>) -> EventLoopFuture<GRPCStatus>

  /// List the available gateways for the selected mode
  func listGateways(request: Nym_Vpn_ListGatewaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListGatewaysResponse>

  /// List the avaiable countries for the selected mode
  func listCountries(request: Nym_Vpn_ListCountriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListCountriesResponse>

  /// Handle the stored recovery phrase, which is also the account identity and authentication
  func storeAccount(request: Nym_Vpn_StoreAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_StoreAccountResponse>

  func isAccountStored(request: Nym_Vpn_IsAccountStoredRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_IsAccountStoredResponse>

  func removeAccount(request: Nym_Vpn_RemoveAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_RemoveAccountResponse>

  func getAccountIdentity(request: Nym_Vpn_GetAccountIdentityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetAccountIdentityResponse>

  func getAccountLinks(request: Nym_Vpn_GetAccountLinksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetAccountLinksResponse>

  /// Query the account state, which refers to the server side account, as it is
  /// known and interpreted by nym-vpnd
  func getAccountState(request: Nym_Vpn_GetAccountStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetAccountStateResponse>

  func refreshAccountState(request: Nym_Vpn_RefreshAccountStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_RefreshAccountStateResponse>

  func isReadyToConnect(request: Nym_Vpn_IsReadyToConnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_IsReadyToConnectResponse>

  /// Reset the device identity
  func resetDeviceIdentity(request: Nym_Vpn_ResetDeviceIdentityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ResetDeviceIdentityResponse>

  func getDeviceIdentity(request: Nym_Vpn_GetDeviceIdentityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetDeviceIdentityResponse>

  /// Try to register the local device with the nym-vpn-api
  func registerDevice(request: Nym_Vpn_RegisterDeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_RegisterDeviceResponse>

  /// Request new zk-nyms (ticketbooks) from the nym-vpn-api
  func requestZkNym(request: Nym_Vpn_RequestZkNymRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_RequestZkNymResponse>

  /// List the zk-nyms associated with this device from the nym-vpn-api
  func getDeviceZkNyms(request: Nym_Vpn_GetDeviceZkNymsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetDeviceZkNymsResponse>

  /// Get the server side account summary directly from the nym-vpn-api
  func fetchRawAccountSummary(request: Nym_Vpn_FetchRawAccountSummaryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_FetchRawAccountSummaryResponse>

  /// Get the list of devices directly from the nym-vpn-api
  func fetchRawDevices(request: Nym_Vpn_FetchRawDevicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_FetchRawDevicesResponse>
}

extension Nym_Vpn_NymVpndProvider {
  internal var serviceName: Substring {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Info":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_InfoRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_InfoResponse>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        userFunction: self.info(request:context:)
      )

    case "SetNetwork":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_SetNetworkRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_SetNetworkResponse>(),
        interceptors: self.interceptors?.makeSetNetworkInterceptors() ?? [],
        userFunction: self.setNetwork(request:context:)
      )

    case "GetSystemMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetSystemMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetSystemMessagesResponse>(),
        interceptors: self.interceptors?.makeGetSystemMessagesInterceptors() ?? [],
        userFunction: self.getSystemMessages(request:context:)
      )

    case "GetFeatureFlags":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetFeatureFlagsRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetFeatureFlagsResponse>(),
        interceptors: self.interceptors?.makeGetFeatureFlagsInterceptors() ?? [],
        userFunction: self.getFeatureFlags(request:context:)
      )

    case "VpnConnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectResponse>(),
        interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? [],
        userFunction: self.vpnConnect(request:context:)
      )

    case "VpnDisconnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_DisconnectResponse>(),
        interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? [],
        userFunction: self.vpnDisconnect(request:context:)
      )

    case "VpnStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StatusResponse>(),
        interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? [],
        userFunction: self.vpnStatus(request:context:)
      )

    case "ListenToConnectionStateChanges":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStateChange>(),
        interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
        userFunction: self.listenToConnectionStateChanges(request:context:)
      )

    case "ListenToConnectionStatus":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStatusUpdate>(),
        interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
        userFunction: self.listenToConnectionStatus(request:context:)
      )

    case "ListGateways":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListGatewaysResponse>(),
        interceptors: self.interceptors?.makeListGatewaysInterceptors() ?? [],
        userFunction: self.listGateways(request:context:)
      )

    case "ListCountries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListCountriesResponse>(),
        interceptors: self.interceptors?.makeListCountriesInterceptors() ?? [],
        userFunction: self.listCountries(request:context:)
      )

    case "StoreAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StoreAccountRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StoreAccountResponse>(),
        interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? [],
        userFunction: self.storeAccount(request:context:)
      )

    case "IsAccountStored":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_IsAccountStoredRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_IsAccountStoredResponse>(),
        interceptors: self.interceptors?.makeIsAccountStoredInterceptors() ?? [],
        userFunction: self.isAccountStored(request:context:)
      )

    case "RemoveAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RemoveAccountRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RemoveAccountResponse>(),
        interceptors: self.interceptors?.makeRemoveAccountInterceptors() ?? [],
        userFunction: self.removeAccount(request:context:)
      )

    case "GetAccountIdentity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountIdentityRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountIdentityResponse>(),
        interceptors: self.interceptors?.makeGetAccountIdentityInterceptors() ?? [],
        userFunction: self.getAccountIdentity(request:context:)
      )

    case "GetAccountLinks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountLinksRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountLinksResponse>(),
        interceptors: self.interceptors?.makeGetAccountLinksInterceptors() ?? [],
        userFunction: self.getAccountLinks(request:context:)
      )

    case "GetAccountState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountStateRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountStateResponse>(),
        interceptors: self.interceptors?.makeGetAccountStateInterceptors() ?? [],
        userFunction: self.getAccountState(request:context:)
      )

    case "RefreshAccountState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RefreshAccountStateRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RefreshAccountStateResponse>(),
        interceptors: self.interceptors?.makeRefreshAccountStateInterceptors() ?? [],
        userFunction: self.refreshAccountState(request:context:)
      )

    case "IsReadyToConnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_IsReadyToConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_IsReadyToConnectResponse>(),
        interceptors: self.interceptors?.makeIsReadyToConnectInterceptors() ?? [],
        userFunction: self.isReadyToConnect(request:context:)
      )

    case "ResetDeviceIdentity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ResetDeviceIdentityRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ResetDeviceIdentityResponse>(),
        interceptors: self.interceptors?.makeResetDeviceIdentityInterceptors() ?? [],
        userFunction: self.resetDeviceIdentity(request:context:)
      )

    case "GetDeviceIdentity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetDeviceIdentityRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetDeviceIdentityResponse>(),
        interceptors: self.interceptors?.makeGetDeviceIdentityInterceptors() ?? [],
        userFunction: self.getDeviceIdentity(request:context:)
      )

    case "RegisterDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RegisterDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RegisterDeviceResponse>(),
        interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? [],
        userFunction: self.registerDevice(request:context:)
      )

    case "RequestZkNym":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RequestZkNymRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RequestZkNymResponse>(),
        interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? [],
        userFunction: self.requestZkNym(request:context:)
      )

    case "GetDeviceZkNyms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetDeviceZkNymsRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetDeviceZkNymsResponse>(),
        interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? [],
        userFunction: self.getDeviceZkNyms(request:context:)
      )

    case "FetchRawAccountSummary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_FetchRawAccountSummaryRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_FetchRawAccountSummaryResponse>(),
        interceptors: self.interceptors?.makeFetchRawAccountSummaryInterceptors() ?? [],
        userFunction: self.fetchRawAccountSummary(request:context:)
      )

    case "FetchRawDevices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_FetchRawDevicesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_FetchRawDevicesResponse>(),
        interceptors: self.interceptors?.makeFetchRawDevicesInterceptors() ?? [],
        userFunction: self.fetchRawDevices(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nym_Vpn_NymVpndAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? { get }

  /// Get info regarding the nym-vpnd in general, like version etc.
  func info(
    request: Nym_Vpn_InfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_InfoResponse

  /// Set the network. This requires a restart to take effect
  func setNetwork(
    request: Nym_Vpn_SetNetworkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_SetNetworkResponse

  /// List messages fetched from nym-vpn-api
  func getSystemMessages(
    request: Nym_Vpn_GetSystemMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetSystemMessagesResponse

  func getFeatureFlags(
    request: Nym_Vpn_GetFeatureFlagsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetFeatureFlagsResponse

  /// Start the tunnel and connect
  func vpnConnect(
    request: Nym_Vpn_ConnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ConnectResponse

  /// Disconnect and stop the tunnel
  func vpnDisconnect(
    request: Nym_Vpn_DisconnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_DisconnectResponse

  /// Get the current tunnel and connection status
  func vpnStatus(
    request: Nym_Vpn_StatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_StatusResponse

  /// Listen for events that indicate that the connection state changes, such as
  /// from Connecting -> Connected
  func listenToConnectionStateChanges(
    request: Nym_Vpn_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Nym_Vpn_ConnectionStateChange>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Listen for general status evens emitted by nym-vpnd, which in turn might
  /// originate from elsewhere such as remote gateways.
  func listenToConnectionStatus(
    request: Nym_Vpn_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Nym_Vpn_ConnectionStatusUpdate>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// List the available gateways for the selected mode
  func listGateways(
    request: Nym_Vpn_ListGatewaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListGatewaysResponse

  /// List the avaiable countries for the selected mode
  func listCountries(
    request: Nym_Vpn_ListCountriesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListCountriesResponse

  /// Handle the stored recovery phrase, which is also the account identity and authentication
  func storeAccount(
    request: Nym_Vpn_StoreAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_StoreAccountResponse

  func isAccountStored(
    request: Nym_Vpn_IsAccountStoredRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_IsAccountStoredResponse

  func removeAccount(
    request: Nym_Vpn_RemoveAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_RemoveAccountResponse

  func getAccountIdentity(
    request: Nym_Vpn_GetAccountIdentityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetAccountIdentityResponse

  func getAccountLinks(
    request: Nym_Vpn_GetAccountLinksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetAccountLinksResponse

  /// Query the account state, which refers to the server side account, as it is
  /// known and interpreted by nym-vpnd
  func getAccountState(
    request: Nym_Vpn_GetAccountStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetAccountStateResponse

  func refreshAccountState(
    request: Nym_Vpn_RefreshAccountStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_RefreshAccountStateResponse

  func isReadyToConnect(
    request: Nym_Vpn_IsReadyToConnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_IsReadyToConnectResponse

  /// Reset the device identity
  func resetDeviceIdentity(
    request: Nym_Vpn_ResetDeviceIdentityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ResetDeviceIdentityResponse

  func getDeviceIdentity(
    request: Nym_Vpn_GetDeviceIdentityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetDeviceIdentityResponse

  /// Try to register the local device with the nym-vpn-api
  func registerDevice(
    request: Nym_Vpn_RegisterDeviceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_RegisterDeviceResponse

  /// Request new zk-nyms (ticketbooks) from the nym-vpn-api
  func requestZkNym(
    request: Nym_Vpn_RequestZkNymRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_RequestZkNymResponse

  /// List the zk-nyms associated with this device from the nym-vpn-api
  func getDeviceZkNyms(
    request: Nym_Vpn_GetDeviceZkNymsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetDeviceZkNymsResponse

  /// Get the server side account summary directly from the nym-vpn-api
  func fetchRawAccountSummary(
    request: Nym_Vpn_FetchRawAccountSummaryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_FetchRawAccountSummaryResponse

  /// Get the list of devices directly from the nym-vpn-api
  func fetchRawDevices(
    request: Nym_Vpn_FetchRawDevicesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_FetchRawDevicesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Info":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_InfoRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_InfoResponse>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        wrapping: { try await self.info(request: $0, context: $1) }
      )

    case "SetNetwork":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_SetNetworkRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_SetNetworkResponse>(),
        interceptors: self.interceptors?.makeSetNetworkInterceptors() ?? [],
        wrapping: { try await self.setNetwork(request: $0, context: $1) }
      )

    case "GetSystemMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetSystemMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetSystemMessagesResponse>(),
        interceptors: self.interceptors?.makeGetSystemMessagesInterceptors() ?? [],
        wrapping: { try await self.getSystemMessages(request: $0, context: $1) }
      )

    case "GetFeatureFlags":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetFeatureFlagsRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetFeatureFlagsResponse>(),
        interceptors: self.interceptors?.makeGetFeatureFlagsInterceptors() ?? [],
        wrapping: { try await self.getFeatureFlags(request: $0, context: $1) }
      )

    case "VpnConnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectResponse>(),
        interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? [],
        wrapping: { try await self.vpnConnect(request: $0, context: $1) }
      )

    case "VpnDisconnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_DisconnectResponse>(),
        interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? [],
        wrapping: { try await self.vpnDisconnect(request: $0, context: $1) }
      )

    case "VpnStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StatusResponse>(),
        interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? [],
        wrapping: { try await self.vpnStatus(request: $0, context: $1) }
      )

    case "ListenToConnectionStateChanges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStateChange>(),
        interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
        wrapping: { try await self.listenToConnectionStateChanges(request: $0, responseStream: $1, context: $2) }
      )

    case "ListenToConnectionStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStatusUpdate>(),
        interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
        wrapping: { try await self.listenToConnectionStatus(request: $0, responseStream: $1, context: $2) }
      )

    case "ListGateways":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListGatewaysResponse>(),
        interceptors: self.interceptors?.makeListGatewaysInterceptors() ?? [],
        wrapping: { try await self.listGateways(request: $0, context: $1) }
      )

    case "ListCountries":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListCountriesResponse>(),
        interceptors: self.interceptors?.makeListCountriesInterceptors() ?? [],
        wrapping: { try await self.listCountries(request: $0, context: $1) }
      )

    case "StoreAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StoreAccountRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StoreAccountResponse>(),
        interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? [],
        wrapping: { try await self.storeAccount(request: $0, context: $1) }
      )

    case "IsAccountStored":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_IsAccountStoredRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_IsAccountStoredResponse>(),
        interceptors: self.interceptors?.makeIsAccountStoredInterceptors() ?? [],
        wrapping: { try await self.isAccountStored(request: $0, context: $1) }
      )

    case "RemoveAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RemoveAccountRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RemoveAccountResponse>(),
        interceptors: self.interceptors?.makeRemoveAccountInterceptors() ?? [],
        wrapping: { try await self.removeAccount(request: $0, context: $1) }
      )

    case "GetAccountIdentity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountIdentityRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountIdentityResponse>(),
        interceptors: self.interceptors?.makeGetAccountIdentityInterceptors() ?? [],
        wrapping: { try await self.getAccountIdentity(request: $0, context: $1) }
      )

    case "GetAccountLinks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountLinksRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountLinksResponse>(),
        interceptors: self.interceptors?.makeGetAccountLinksInterceptors() ?? [],
        wrapping: { try await self.getAccountLinks(request: $0, context: $1) }
      )

    case "GetAccountState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountStateRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountStateResponse>(),
        interceptors: self.interceptors?.makeGetAccountStateInterceptors() ?? [],
        wrapping: { try await self.getAccountState(request: $0, context: $1) }
      )

    case "RefreshAccountState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RefreshAccountStateRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RefreshAccountStateResponse>(),
        interceptors: self.interceptors?.makeRefreshAccountStateInterceptors() ?? [],
        wrapping: { try await self.refreshAccountState(request: $0, context: $1) }
      )

    case "IsReadyToConnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_IsReadyToConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_IsReadyToConnectResponse>(),
        interceptors: self.interceptors?.makeIsReadyToConnectInterceptors() ?? [],
        wrapping: { try await self.isReadyToConnect(request: $0, context: $1) }
      )

    case "ResetDeviceIdentity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ResetDeviceIdentityRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ResetDeviceIdentityResponse>(),
        interceptors: self.interceptors?.makeResetDeviceIdentityInterceptors() ?? [],
        wrapping: { try await self.resetDeviceIdentity(request: $0, context: $1) }
      )

    case "GetDeviceIdentity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetDeviceIdentityRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetDeviceIdentityResponse>(),
        interceptors: self.interceptors?.makeGetDeviceIdentityInterceptors() ?? [],
        wrapping: { try await self.getDeviceIdentity(request: $0, context: $1) }
      )

    case "RegisterDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RegisterDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RegisterDeviceResponse>(),
        interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? [],
        wrapping: { try await self.registerDevice(request: $0, context: $1) }
      )

    case "RequestZkNym":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RequestZkNymRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RequestZkNymResponse>(),
        interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? [],
        wrapping: { try await self.requestZkNym(request: $0, context: $1) }
      )

    case "GetDeviceZkNyms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetDeviceZkNymsRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetDeviceZkNymsResponse>(),
        interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? [],
        wrapping: { try await self.getDeviceZkNyms(request: $0, context: $1) }
      )

    case "FetchRawAccountSummary":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_FetchRawAccountSummaryRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_FetchRawAccountSummaryResponse>(),
        interceptors: self.interceptors?.makeFetchRawAccountSummaryInterceptors() ?? [],
        wrapping: { try await self.fetchRawAccountSummary(request: $0, context: $1) }
      )

    case "FetchRawDevices":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_FetchRawDevicesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_FetchRawDevicesResponse>(),
        interceptors: self.interceptors?.makeFetchRawDevicesInterceptors() ?? [],
        wrapping: { try await self.fetchRawDevices(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Nym_Vpn_NymVpndServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'info'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInfoInterceptors() -> [ServerInterceptor<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>]

  /// - Returns: Interceptors to use when handling 'setNetwork'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetNetworkInterceptors() -> [ServerInterceptor<Nym_Vpn_SetNetworkRequest, Nym_Vpn_SetNetworkResponse>]

  /// - Returns: Interceptors to use when handling 'getSystemMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSystemMessagesInterceptors() -> [ServerInterceptor<Nym_Vpn_GetSystemMessagesRequest, Nym_Vpn_GetSystemMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'getFeatureFlags'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFeatureFlagsInterceptors() -> [ServerInterceptor<Nym_Vpn_GetFeatureFlagsRequest, Nym_Vpn_GetFeatureFlagsResponse>]

  /// - Returns: Interceptors to use when handling 'vpnConnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnConnectInterceptors() -> [ServerInterceptor<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>]

  /// - Returns: Interceptors to use when handling 'vpnDisconnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnDisconnectInterceptors() -> [ServerInterceptor<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>]

  /// - Returns: Interceptors to use when handling 'vpnStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnStatusInterceptors() -> [ServerInterceptor<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'listenToConnectionStateChanges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToConnectionStateChangesInterceptors() -> [ServerInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>]

  /// - Returns: Interceptors to use when handling 'listenToConnectionStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToConnectionStatusInterceptors() -> [ServerInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>]

  /// - Returns: Interceptors to use when handling 'listGateways'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListGatewaysInterceptors() -> [ServerInterceptor<Nym_Vpn_ListGatewaysRequest, Nym_Vpn_ListGatewaysResponse>]

  /// - Returns: Interceptors to use when handling 'listCountries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListCountriesInterceptors() -> [ServerInterceptor<Nym_Vpn_ListCountriesRequest, Nym_Vpn_ListCountriesResponse>]

  /// - Returns: Interceptors to use when handling 'storeAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreAccountInterceptors() -> [ServerInterceptor<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>]

  /// - Returns: Interceptors to use when handling 'isAccountStored'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsAccountStoredInterceptors() -> [ServerInterceptor<Nym_Vpn_IsAccountStoredRequest, Nym_Vpn_IsAccountStoredResponse>]

  /// - Returns: Interceptors to use when handling 'removeAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveAccountInterceptors() -> [ServerInterceptor<Nym_Vpn_RemoveAccountRequest, Nym_Vpn_RemoveAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getAccountIdentity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountIdentityInterceptors() -> [ServerInterceptor<Nym_Vpn_GetAccountIdentityRequest, Nym_Vpn_GetAccountIdentityResponse>]

  /// - Returns: Interceptors to use when handling 'getAccountLinks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountLinksInterceptors() -> [ServerInterceptor<Nym_Vpn_GetAccountLinksRequest, Nym_Vpn_GetAccountLinksResponse>]

  /// - Returns: Interceptors to use when handling 'getAccountState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountStateInterceptors() -> [ServerInterceptor<Nym_Vpn_GetAccountStateRequest, Nym_Vpn_GetAccountStateResponse>]

  /// - Returns: Interceptors to use when handling 'refreshAccountState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRefreshAccountStateInterceptors() -> [ServerInterceptor<Nym_Vpn_RefreshAccountStateRequest, Nym_Vpn_RefreshAccountStateResponse>]

  /// - Returns: Interceptors to use when handling 'isReadyToConnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsReadyToConnectInterceptors() -> [ServerInterceptor<Nym_Vpn_IsReadyToConnectRequest, Nym_Vpn_IsReadyToConnectResponse>]

  /// - Returns: Interceptors to use when handling 'resetDeviceIdentity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResetDeviceIdentityInterceptors() -> [ServerInterceptor<Nym_Vpn_ResetDeviceIdentityRequest, Nym_Vpn_ResetDeviceIdentityResponse>]

  /// - Returns: Interceptors to use when handling 'getDeviceIdentity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDeviceIdentityInterceptors() -> [ServerInterceptor<Nym_Vpn_GetDeviceIdentityRequest, Nym_Vpn_GetDeviceIdentityResponse>]

  /// - Returns: Interceptors to use when handling 'registerDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterDeviceInterceptors() -> [ServerInterceptor<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>]

  /// - Returns: Interceptors to use when handling 'requestZkNym'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestZkNymInterceptors() -> [ServerInterceptor<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>]

  /// - Returns: Interceptors to use when handling 'getDeviceZkNyms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDeviceZkNymsInterceptors() -> [ServerInterceptor<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>]

  /// - Returns: Interceptors to use when handling 'fetchRawAccountSummary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFetchRawAccountSummaryInterceptors() -> [ServerInterceptor<Nym_Vpn_FetchRawAccountSummaryRequest, Nym_Vpn_FetchRawAccountSummaryResponse>]

  /// - Returns: Interceptors to use when handling 'fetchRawDevices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFetchRawDevicesInterceptors() -> [ServerInterceptor<Nym_Vpn_FetchRawDevicesRequest, Nym_Vpn_FetchRawDevicesResponse>]
}

internal enum Nym_Vpn_NymVpndServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NymVpnd",
    fullName: "nym.vpn.NymVpnd",
    methods: [
      Nym_Vpn_NymVpndServerMetadata.Methods.info,
      Nym_Vpn_NymVpndServerMetadata.Methods.setNetwork,
      Nym_Vpn_NymVpndServerMetadata.Methods.getSystemMessages,
      Nym_Vpn_NymVpndServerMetadata.Methods.getFeatureFlags,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnConnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnDisconnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnStatus,
      Nym_Vpn_NymVpndServerMetadata.Methods.listenToConnectionStateChanges,
      Nym_Vpn_NymVpndServerMetadata.Methods.listenToConnectionStatus,
      Nym_Vpn_NymVpndServerMetadata.Methods.listGateways,
      Nym_Vpn_NymVpndServerMetadata.Methods.listCountries,
      Nym_Vpn_NymVpndServerMetadata.Methods.storeAccount,
      Nym_Vpn_NymVpndServerMetadata.Methods.isAccountStored,
      Nym_Vpn_NymVpndServerMetadata.Methods.removeAccount,
      Nym_Vpn_NymVpndServerMetadata.Methods.getAccountIdentity,
      Nym_Vpn_NymVpndServerMetadata.Methods.getAccountLinks,
      Nym_Vpn_NymVpndServerMetadata.Methods.getAccountState,
      Nym_Vpn_NymVpndServerMetadata.Methods.refreshAccountState,
      Nym_Vpn_NymVpndServerMetadata.Methods.isReadyToConnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.resetDeviceIdentity,
      Nym_Vpn_NymVpndServerMetadata.Methods.getDeviceIdentity,
      Nym_Vpn_NymVpndServerMetadata.Methods.registerDevice,
      Nym_Vpn_NymVpndServerMetadata.Methods.requestZkNym,
      Nym_Vpn_NymVpndServerMetadata.Methods.getDeviceZkNyms,
      Nym_Vpn_NymVpndServerMetadata.Methods.fetchRawAccountSummary,
      Nym_Vpn_NymVpndServerMetadata.Methods.fetchRawDevices,
    ]
  )

  internal enum Methods {
    internal static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/nym.vpn.NymVpnd/Info",
      type: GRPCCallType.unary
    )

    internal static let setNetwork = GRPCMethodDescriptor(
      name: "SetNetwork",
      path: "/nym.vpn.NymVpnd/SetNetwork",
      type: GRPCCallType.unary
    )

    internal static let getSystemMessages = GRPCMethodDescriptor(
      name: "GetSystemMessages",
      path: "/nym.vpn.NymVpnd/GetSystemMessages",
      type: GRPCCallType.unary
    )

    internal static let getFeatureFlags = GRPCMethodDescriptor(
      name: "GetFeatureFlags",
      path: "/nym.vpn.NymVpnd/GetFeatureFlags",
      type: GRPCCallType.unary
    )

    internal static let vpnConnect = GRPCMethodDescriptor(
      name: "VpnConnect",
      path: "/nym.vpn.NymVpnd/VpnConnect",
      type: GRPCCallType.unary
    )

    internal static let vpnDisconnect = GRPCMethodDescriptor(
      name: "VpnDisconnect",
      path: "/nym.vpn.NymVpnd/VpnDisconnect",
      type: GRPCCallType.unary
    )

    internal static let vpnStatus = GRPCMethodDescriptor(
      name: "VpnStatus",
      path: "/nym.vpn.NymVpnd/VpnStatus",
      type: GRPCCallType.unary
    )

    internal static let listenToConnectionStateChanges = GRPCMethodDescriptor(
      name: "ListenToConnectionStateChanges",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStateChanges",
      type: GRPCCallType.serverStreaming
    )

    internal static let listenToConnectionStatus = GRPCMethodDescriptor(
      name: "ListenToConnectionStatus",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStatus",
      type: GRPCCallType.serverStreaming
    )

    internal static let listGateways = GRPCMethodDescriptor(
      name: "ListGateways",
      path: "/nym.vpn.NymVpnd/ListGateways",
      type: GRPCCallType.unary
    )

    internal static let listCountries = GRPCMethodDescriptor(
      name: "ListCountries",
      path: "/nym.vpn.NymVpnd/ListCountries",
      type: GRPCCallType.unary
    )

    internal static let storeAccount = GRPCMethodDescriptor(
      name: "StoreAccount",
      path: "/nym.vpn.NymVpnd/StoreAccount",
      type: GRPCCallType.unary
    )

    internal static let isAccountStored = GRPCMethodDescriptor(
      name: "IsAccountStored",
      path: "/nym.vpn.NymVpnd/IsAccountStored",
      type: GRPCCallType.unary
    )

    internal static let removeAccount = GRPCMethodDescriptor(
      name: "RemoveAccount",
      path: "/nym.vpn.NymVpnd/RemoveAccount",
      type: GRPCCallType.unary
    )

    internal static let getAccountIdentity = GRPCMethodDescriptor(
      name: "GetAccountIdentity",
      path: "/nym.vpn.NymVpnd/GetAccountIdentity",
      type: GRPCCallType.unary
    )

    internal static let getAccountLinks = GRPCMethodDescriptor(
      name: "GetAccountLinks",
      path: "/nym.vpn.NymVpnd/GetAccountLinks",
      type: GRPCCallType.unary
    )

    internal static let getAccountState = GRPCMethodDescriptor(
      name: "GetAccountState",
      path: "/nym.vpn.NymVpnd/GetAccountState",
      type: GRPCCallType.unary
    )

    internal static let refreshAccountState = GRPCMethodDescriptor(
      name: "RefreshAccountState",
      path: "/nym.vpn.NymVpnd/RefreshAccountState",
      type: GRPCCallType.unary
    )

    internal static let isReadyToConnect = GRPCMethodDescriptor(
      name: "IsReadyToConnect",
      path: "/nym.vpn.NymVpnd/IsReadyToConnect",
      type: GRPCCallType.unary
    )

    internal static let resetDeviceIdentity = GRPCMethodDescriptor(
      name: "ResetDeviceIdentity",
      path: "/nym.vpn.NymVpnd/ResetDeviceIdentity",
      type: GRPCCallType.unary
    )

    internal static let getDeviceIdentity = GRPCMethodDescriptor(
      name: "GetDeviceIdentity",
      path: "/nym.vpn.NymVpnd/GetDeviceIdentity",
      type: GRPCCallType.unary
    )

    internal static let registerDevice = GRPCMethodDescriptor(
      name: "RegisterDevice",
      path: "/nym.vpn.NymVpnd/RegisterDevice",
      type: GRPCCallType.unary
    )

    internal static let requestZkNym = GRPCMethodDescriptor(
      name: "RequestZkNym",
      path: "/nym.vpn.NymVpnd/RequestZkNym",
      type: GRPCCallType.unary
    )

    internal static let getDeviceZkNyms = GRPCMethodDescriptor(
      name: "GetDeviceZkNyms",
      path: "/nym.vpn.NymVpnd/GetDeviceZkNyms",
      type: GRPCCallType.unary
    )

    internal static let fetchRawAccountSummary = GRPCMethodDescriptor(
      name: "FetchRawAccountSummary",
      path: "/nym.vpn.NymVpnd/FetchRawAccountSummary",
      type: GRPCCallType.unary
    )

    internal static let fetchRawDevices = GRPCMethodDescriptor(
      name: "FetchRawDevices",
      path: "/nym.vpn.NymVpnd/FetchRawDevices",
      type: GRPCCallType.unary
    )
  }
}
