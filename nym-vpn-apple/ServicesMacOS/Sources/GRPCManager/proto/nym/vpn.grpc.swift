//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: vpn.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Nym_Vpn_NymVpndClient`, then call methods of this protocol to make API calls.
internal protocol Nym_Vpn_NymVpndClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? { get }

  func info(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>

  func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>

  func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>

  func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>

  func importUserCredential(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>

  func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Nym_Vpn_ConnectionStateChange) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>

  func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Nym_Vpn_ConnectionStatusUpdate) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>

  func listEntryGateways(
    _ request: Nym_Vpn_ListEntryGatewaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListEntryGatewaysRequest, Nym_Vpn_ListEntryGatewaysResponse>

  func listExitGateways(
    _ request: Nym_Vpn_ListExitGatewaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListExitGatewaysRequest, Nym_Vpn_ListExitGatewaysResponse>

  func listVpnGateways(
    _ request: Nym_Vpn_ListVpnGatewaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListVpnGatewaysRequest, Nym_Vpn_ListVpnGatewaysResponse>

  func listEntryCountries(
    _ request: Nym_Vpn_ListEntryCountriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListEntryCountriesRequest, Nym_Vpn_ListEntryCountriesResponse>

  func listExitCountries(
    _ request: Nym_Vpn_ListExitCountriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListExitCountriesRequest, Nym_Vpn_ListExitCountriesResponse>

  func listVpnCountries(
    _ request: Nym_Vpn_ListVpnCountriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ListVpnCountriesRequest, Nym_Vpn_ListVpnCountriesResponse>

  func storeAccount(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>

  func getAccountSummary(
    _ request: Nym_Vpn_GetAccountSummaryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetAccountSummaryRequest, Nym_Vpn_GetAccountSummaryResponse>

  func registerDevice(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>

  func requestZkNym(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>

  func getDeviceZkNyms(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>
}

extension Nym_Vpn_NymVpndClientProtocol {
  internal var serviceName: String {
    return "nym.vpn.NymVpnd"
  }

  /// Unary call to Info
  ///
  /// - Parameters:
  ///   - request: Request to send to Info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func info(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  /// Unary call to VpnConnect
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnConnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  /// Unary call to VpnDisconnect
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnDisconnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  /// Unary call to VpnStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  /// Unary call to ImportUserCredential
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportUserCredential.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importUserCredential(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? []
    )
  }

  /// Server streaming call to ListenToConnectionStateChanges
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToConnectionStateChanges.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Nym_Vpn_ConnectionStateChange) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange> {
    return self.makeServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to ListenToConnectionStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToConnectionStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Nym_Vpn_ConnectionStatusUpdate) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate> {
    return self.makeServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to ListEntryGateways
  ///
  /// - Parameters:
  ///   - request: Request to send to ListEntryGateways.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listEntryGateways(
    _ request: Nym_Vpn_ListEntryGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListEntryGatewaysRequest, Nym_Vpn_ListEntryGatewaysResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listEntryGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntryGatewaysInterceptors() ?? []
    )
  }

  /// Unary call to ListExitGateways
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExitGateways.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExitGateways(
    _ request: Nym_Vpn_ListExitGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListExitGatewaysRequest, Nym_Vpn_ListExitGatewaysResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listExitGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExitGatewaysInterceptors() ?? []
    )
  }

  /// Unary call to ListVpnGateways
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVpnGateways.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listVpnGateways(
    _ request: Nym_Vpn_ListVpnGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListVpnGatewaysRequest, Nym_Vpn_ListVpnGatewaysResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listVpnGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVpnGatewaysInterceptors() ?? []
    )
  }

  /// Unary call to ListEntryCountries
  ///
  /// - Parameters:
  ///   - request: Request to send to ListEntryCountries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listEntryCountries(
    _ request: Nym_Vpn_ListEntryCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListEntryCountriesRequest, Nym_Vpn_ListEntryCountriesResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listEntryCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntryCountriesInterceptors() ?? []
    )
  }

  /// Unary call to ListExitCountries
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExitCountries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExitCountries(
    _ request: Nym_Vpn_ListExitCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListExitCountriesRequest, Nym_Vpn_ListExitCountriesResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listExitCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExitCountriesInterceptors() ?? []
    )
  }

  /// Unary call to ListVpnCountries
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVpnCountries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listVpnCountries(
    _ request: Nym_Vpn_ListVpnCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ListVpnCountriesRequest, Nym_Vpn_ListVpnCountriesResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listVpnCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVpnCountriesInterceptors() ?? []
    )
  }

  /// Unstable
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storeAccount(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountSummary
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountSummary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountSummary(
    _ request: Nym_Vpn_GetAccountSummaryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetAccountSummaryRequest, Nym_Vpn_GetAccountSummaryResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountSummaryInterceptors() ?? []
    )
  }

  /// Unary call to RegisterDevice
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerDevice(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  /// Unary call to RequestZkNym
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestZkNym.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestZkNym(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? []
    )
  }

  /// Unary call to GetDeviceZkNyms
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeviceZkNyms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDeviceZkNyms(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Nym_Vpn_NymVpndClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Nym_Vpn_NymVpndNIOClient")
internal final class Nym_Vpn_NymVpndClient: Nym_Vpn_NymVpndClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the nym.vpn.NymVpnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Nym_Vpn_NymVpndNIOClient: Nym_Vpn_NymVpndClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?

  /// Creates a client for the nym.vpn.NymVpnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nym_Vpn_NymVpndAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? { get }

  func makeInfoCall(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>

  func makeVpnConnectCall(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>

  func makeVpnDisconnectCall(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>

  func makeVpnStatusCall(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>

  func makeImportUserCredentialCall(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>

  func makeListenToConnectionStateChangesCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>

  func makeListenToConnectionStatusCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>

  func makeListEntryGatewaysCall(
    _ request: Nym_Vpn_ListEntryGatewaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListEntryGatewaysRequest, Nym_Vpn_ListEntryGatewaysResponse>

  func makeListExitGatewaysCall(
    _ request: Nym_Vpn_ListExitGatewaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListExitGatewaysRequest, Nym_Vpn_ListExitGatewaysResponse>

  func makeListVpnGatewaysCall(
    _ request: Nym_Vpn_ListVpnGatewaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListVpnGatewaysRequest, Nym_Vpn_ListVpnGatewaysResponse>

  func makeListEntryCountriesCall(
    _ request: Nym_Vpn_ListEntryCountriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListEntryCountriesRequest, Nym_Vpn_ListEntryCountriesResponse>

  func makeListExitCountriesCall(
    _ request: Nym_Vpn_ListExitCountriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListExitCountriesRequest, Nym_Vpn_ListExitCountriesResponse>

  func makeListVpnCountriesCall(
    _ request: Nym_Vpn_ListVpnCountriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListVpnCountriesRequest, Nym_Vpn_ListVpnCountriesResponse>

  func makeStoreAccountCall(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>

  func makeGetAccountSummaryCall(
    _ request: Nym_Vpn_GetAccountSummaryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountSummaryRequest, Nym_Vpn_GetAccountSummaryResponse>

  func makeRegisterDeviceCall(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>

  func makeRequestZkNymCall(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>

  func makeGetDeviceZkNymsCall(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nym_Vpn_NymVpndClientMetadata.serviceDescriptor
  }

  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeInfoCall(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  internal func makeVpnConnectCall(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  internal func makeVpnDisconnectCall(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  internal func makeVpnStatusCall(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  internal func makeImportUserCredentialCall(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? []
    )
  }

  internal func makeListenToConnectionStateChangesCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange> {
    return self.makeAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? []
    )
  }

  internal func makeListenToConnectionStatusCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate> {
    return self.makeAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? []
    )
  }

  internal func makeListEntryGatewaysCall(
    _ request: Nym_Vpn_ListEntryGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListEntryGatewaysRequest, Nym_Vpn_ListEntryGatewaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listEntryGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntryGatewaysInterceptors() ?? []
    )
  }

  internal func makeListExitGatewaysCall(
    _ request: Nym_Vpn_ListExitGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListExitGatewaysRequest, Nym_Vpn_ListExitGatewaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listExitGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExitGatewaysInterceptors() ?? []
    )
  }

  internal func makeListVpnGatewaysCall(
    _ request: Nym_Vpn_ListVpnGatewaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListVpnGatewaysRequest, Nym_Vpn_ListVpnGatewaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listVpnGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVpnGatewaysInterceptors() ?? []
    )
  }

  internal func makeListEntryCountriesCall(
    _ request: Nym_Vpn_ListEntryCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListEntryCountriesRequest, Nym_Vpn_ListEntryCountriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listEntryCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntryCountriesInterceptors() ?? []
    )
  }

  internal func makeListExitCountriesCall(
    _ request: Nym_Vpn_ListExitCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListExitCountriesRequest, Nym_Vpn_ListExitCountriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listExitCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExitCountriesInterceptors() ?? []
    )
  }

  internal func makeListVpnCountriesCall(
    _ request: Nym_Vpn_ListVpnCountriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ListVpnCountriesRequest, Nym_Vpn_ListVpnCountriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listVpnCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVpnCountriesInterceptors() ?? []
    )
  }

  internal func makeStoreAccountCall(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? []
    )
  }

  internal func makeGetAccountSummaryCall(
    _ request: Nym_Vpn_GetAccountSummaryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetAccountSummaryRequest, Nym_Vpn_GetAccountSummaryResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountSummaryInterceptors() ?? []
    )
  }

  internal func makeRegisterDeviceCall(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  internal func makeRequestZkNymCall(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? []
    )
  }

  internal func makeGetDeviceZkNymsCall(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncClientProtocol {
  internal func info(
    _ request: Nym_Vpn_InfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_InfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  internal func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ConnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  internal func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_DisconnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  internal func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  internal func importUserCredential(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ImportUserCredentialResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? []
    )
  }

  internal func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Nym_Vpn_ConnectionStateChange> {
    return self.performAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? []
    )
  }

  internal func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Nym_Vpn_ConnectionStatusUpdate> {
    return self.performAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? []
    )
  }

  internal func listEntryGateways(
    _ request: Nym_Vpn_ListEntryGatewaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListEntryGatewaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listEntryGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntryGatewaysInterceptors() ?? []
    )
  }

  internal func listExitGateways(
    _ request: Nym_Vpn_ListExitGatewaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListExitGatewaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listExitGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExitGatewaysInterceptors() ?? []
    )
  }

  internal func listVpnGateways(
    _ request: Nym_Vpn_ListVpnGatewaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListVpnGatewaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listVpnGateways.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVpnGatewaysInterceptors() ?? []
    )
  }

  internal func listEntryCountries(
    _ request: Nym_Vpn_ListEntryCountriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListEntryCountriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listEntryCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntryCountriesInterceptors() ?? []
    )
  }

  internal func listExitCountries(
    _ request: Nym_Vpn_ListExitCountriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListExitCountriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listExitCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExitCountriesInterceptors() ?? []
    )
  }

  internal func listVpnCountries(
    _ request: Nym_Vpn_ListVpnCountriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ListVpnCountriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listVpnCountries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVpnCountriesInterceptors() ?? []
    )
  }

  internal func storeAccount(
    _ request: Nym_Vpn_StoreAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_StoreAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? []
    )
  }

  internal func getAccountSummary(
    _ request: Nym_Vpn_GetAccountSummaryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetAccountSummaryResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getAccountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountSummaryInterceptors() ?? []
    )
  }

  internal func registerDevice(
    _ request: Nym_Vpn_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_RegisterDeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  internal func requestZkNym(
    _ request: Nym_Vpn_RequestZkNymRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_RequestZkNymResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? []
    )
  }

  internal func getDeviceZkNyms(
    _ request: Nym_Vpn_GetDeviceZkNymsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_GetDeviceZkNymsResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Nym_Vpn_NymVpndAsyncClient: Nym_Vpn_NymVpndAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Nym_Vpn_NymVpndClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'info'.
  func makeInfoInterceptors() -> [ClientInterceptor<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnConnect'.
  func makeVpnConnectInterceptors() -> [ClientInterceptor<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnDisconnect'.
  func makeVpnDisconnectInterceptors() -> [ClientInterceptor<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnStatus'.
  func makeVpnStatusInterceptors() -> [ClientInterceptor<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'importUserCredential'.
  func makeImportUserCredentialInterceptors() -> [ClientInterceptor<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>]

  /// - Returns: Interceptors to use when invoking 'listenToConnectionStateChanges'.
  func makeListenToConnectionStateChangesInterceptors() -> [ClientInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>]

  /// - Returns: Interceptors to use when invoking 'listenToConnectionStatus'.
  func makeListenToConnectionStatusInterceptors() -> [ClientInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>]

  /// - Returns: Interceptors to use when invoking 'listEntryGateways'.
  func makeListEntryGatewaysInterceptors() -> [ClientInterceptor<Nym_Vpn_ListEntryGatewaysRequest, Nym_Vpn_ListEntryGatewaysResponse>]

  /// - Returns: Interceptors to use when invoking 'listExitGateways'.
  func makeListExitGatewaysInterceptors() -> [ClientInterceptor<Nym_Vpn_ListExitGatewaysRequest, Nym_Vpn_ListExitGatewaysResponse>]

  /// - Returns: Interceptors to use when invoking 'listVpnGateways'.
  func makeListVpnGatewaysInterceptors() -> [ClientInterceptor<Nym_Vpn_ListVpnGatewaysRequest, Nym_Vpn_ListVpnGatewaysResponse>]

  /// - Returns: Interceptors to use when invoking 'listEntryCountries'.
  func makeListEntryCountriesInterceptors() -> [ClientInterceptor<Nym_Vpn_ListEntryCountriesRequest, Nym_Vpn_ListEntryCountriesResponse>]

  /// - Returns: Interceptors to use when invoking 'listExitCountries'.
  func makeListExitCountriesInterceptors() -> [ClientInterceptor<Nym_Vpn_ListExitCountriesRequest, Nym_Vpn_ListExitCountriesResponse>]

  /// - Returns: Interceptors to use when invoking 'listVpnCountries'.
  func makeListVpnCountriesInterceptors() -> [ClientInterceptor<Nym_Vpn_ListVpnCountriesRequest, Nym_Vpn_ListVpnCountriesResponse>]

  /// - Returns: Interceptors to use when invoking 'storeAccount'.
  func makeStoreAccountInterceptors() -> [ClientInterceptor<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getAccountSummary'.
  func makeGetAccountSummaryInterceptors() -> [ClientInterceptor<Nym_Vpn_GetAccountSummaryRequest, Nym_Vpn_GetAccountSummaryResponse>]

  /// - Returns: Interceptors to use when invoking 'registerDevice'.
  func makeRegisterDeviceInterceptors() -> [ClientInterceptor<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'requestZkNym'.
  func makeRequestZkNymInterceptors() -> [ClientInterceptor<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>]

  /// - Returns: Interceptors to use when invoking 'getDeviceZkNyms'.
  func makeGetDeviceZkNymsInterceptors() -> [ClientInterceptor<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>]
}

internal enum Nym_Vpn_NymVpndClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NymVpnd",
    fullName: "nym.vpn.NymVpnd",
    methods: [
      Nym_Vpn_NymVpndClientMetadata.Methods.info,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus,
      Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential,
      Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges,
      Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus,
      Nym_Vpn_NymVpndClientMetadata.Methods.listEntryGateways,
      Nym_Vpn_NymVpndClientMetadata.Methods.listExitGateways,
      Nym_Vpn_NymVpndClientMetadata.Methods.listVpnGateways,
      Nym_Vpn_NymVpndClientMetadata.Methods.listEntryCountries,
      Nym_Vpn_NymVpndClientMetadata.Methods.listExitCountries,
      Nym_Vpn_NymVpndClientMetadata.Methods.listVpnCountries,
      Nym_Vpn_NymVpndClientMetadata.Methods.storeAccount,
      Nym_Vpn_NymVpndClientMetadata.Methods.getAccountSummary,
      Nym_Vpn_NymVpndClientMetadata.Methods.registerDevice,
      Nym_Vpn_NymVpndClientMetadata.Methods.requestZkNym,
      Nym_Vpn_NymVpndClientMetadata.Methods.getDeviceZkNyms,
    ]
  )

  internal enum Methods {
    internal static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/nym.vpn.NymVpnd/Info",
      type: GRPCCallType.unary
    )

    internal static let vpnConnect = GRPCMethodDescriptor(
      name: "VpnConnect",
      path: "/nym.vpn.NymVpnd/VpnConnect",
      type: GRPCCallType.unary
    )

    internal static let vpnDisconnect = GRPCMethodDescriptor(
      name: "VpnDisconnect",
      path: "/nym.vpn.NymVpnd/VpnDisconnect",
      type: GRPCCallType.unary
    )

    internal static let vpnStatus = GRPCMethodDescriptor(
      name: "VpnStatus",
      path: "/nym.vpn.NymVpnd/VpnStatus",
      type: GRPCCallType.unary
    )

    internal static let importUserCredential = GRPCMethodDescriptor(
      name: "ImportUserCredential",
      path: "/nym.vpn.NymVpnd/ImportUserCredential",
      type: GRPCCallType.unary
    )

    internal static let listenToConnectionStateChanges = GRPCMethodDescriptor(
      name: "ListenToConnectionStateChanges",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStateChanges",
      type: GRPCCallType.serverStreaming
    )

    internal static let listenToConnectionStatus = GRPCMethodDescriptor(
      name: "ListenToConnectionStatus",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStatus",
      type: GRPCCallType.serverStreaming
    )

    internal static let listEntryGateways = GRPCMethodDescriptor(
      name: "ListEntryGateways",
      path: "/nym.vpn.NymVpnd/ListEntryGateways",
      type: GRPCCallType.unary
    )

    internal static let listExitGateways = GRPCMethodDescriptor(
      name: "ListExitGateways",
      path: "/nym.vpn.NymVpnd/ListExitGateways",
      type: GRPCCallType.unary
    )

    internal static let listVpnGateways = GRPCMethodDescriptor(
      name: "ListVpnGateways",
      path: "/nym.vpn.NymVpnd/ListVpnGateways",
      type: GRPCCallType.unary
    )

    internal static let listEntryCountries = GRPCMethodDescriptor(
      name: "ListEntryCountries",
      path: "/nym.vpn.NymVpnd/ListEntryCountries",
      type: GRPCCallType.unary
    )

    internal static let listExitCountries = GRPCMethodDescriptor(
      name: "ListExitCountries",
      path: "/nym.vpn.NymVpnd/ListExitCountries",
      type: GRPCCallType.unary
    )

    internal static let listVpnCountries = GRPCMethodDescriptor(
      name: "ListVpnCountries",
      path: "/nym.vpn.NymVpnd/ListVpnCountries",
      type: GRPCCallType.unary
    )

    internal static let storeAccount = GRPCMethodDescriptor(
      name: "StoreAccount",
      path: "/nym.vpn.NymVpnd/StoreAccount",
      type: GRPCCallType.unary
    )

    internal static let getAccountSummary = GRPCMethodDescriptor(
      name: "GetAccountSummary",
      path: "/nym.vpn.NymVpnd/GetAccountSummary",
      type: GRPCCallType.unary
    )

    internal static let registerDevice = GRPCMethodDescriptor(
      name: "RegisterDevice",
      path: "/nym.vpn.NymVpnd/RegisterDevice",
      type: GRPCCallType.unary
    )

    internal static let requestZkNym = GRPCMethodDescriptor(
      name: "RequestZkNym",
      path: "/nym.vpn.NymVpnd/RequestZkNym",
      type: GRPCCallType.unary
    )

    internal static let getDeviceZkNyms = GRPCMethodDescriptor(
      name: "GetDeviceZkNyms",
      path: "/nym.vpn.NymVpnd/GetDeviceZkNyms",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nym_Vpn_NymVpndProvider: CallHandlerProvider {
  var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? { get }

  func info(request: Nym_Vpn_InfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_InfoResponse>

  func vpnConnect(request: Nym_Vpn_ConnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ConnectResponse>

  func vpnDisconnect(request: Nym_Vpn_DisconnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_DisconnectResponse>

  func vpnStatus(request: Nym_Vpn_StatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_StatusResponse>

  func importUserCredential(request: Nym_Vpn_ImportUserCredentialRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ImportUserCredentialResponse>

  func listenToConnectionStateChanges(request: Nym_Vpn_Empty, context: StreamingResponseCallContext<Nym_Vpn_ConnectionStateChange>) -> EventLoopFuture<GRPCStatus>

  func listenToConnectionStatus(request: Nym_Vpn_Empty, context: StreamingResponseCallContext<Nym_Vpn_ConnectionStatusUpdate>) -> EventLoopFuture<GRPCStatus>

  func listEntryGateways(request: Nym_Vpn_ListEntryGatewaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListEntryGatewaysResponse>

  func listExitGateways(request: Nym_Vpn_ListExitGatewaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListExitGatewaysResponse>

  func listVpnGateways(request: Nym_Vpn_ListVpnGatewaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListVpnGatewaysResponse>

  func listEntryCountries(request: Nym_Vpn_ListEntryCountriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListEntryCountriesResponse>

  func listExitCountries(request: Nym_Vpn_ListExitCountriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListExitCountriesResponse>

  func listVpnCountries(request: Nym_Vpn_ListVpnCountriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ListVpnCountriesResponse>

  /// Unstable
  func storeAccount(request: Nym_Vpn_StoreAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_StoreAccountResponse>

  func getAccountSummary(request: Nym_Vpn_GetAccountSummaryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetAccountSummaryResponse>

  func registerDevice(request: Nym_Vpn_RegisterDeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_RegisterDeviceResponse>

  func requestZkNym(request: Nym_Vpn_RequestZkNymRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_RequestZkNymResponse>

  func getDeviceZkNyms(request: Nym_Vpn_GetDeviceZkNymsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_GetDeviceZkNymsResponse>
}

extension Nym_Vpn_NymVpndProvider {
  internal var serviceName: Substring {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Info":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_InfoRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_InfoResponse>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        userFunction: self.info(request:context:)
      )

    case "VpnConnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectResponse>(),
        interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? [],
        userFunction: self.vpnConnect(request:context:)
      )

    case "VpnDisconnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_DisconnectResponse>(),
        interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? [],
        userFunction: self.vpnDisconnect(request:context:)
      )

    case "VpnStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StatusResponse>(),
        interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? [],
        userFunction: self.vpnStatus(request:context:)
      )

    case "ImportUserCredential":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ImportUserCredentialRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ImportUserCredentialResponse>(),
        interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? [],
        userFunction: self.importUserCredential(request:context:)
      )

    case "ListenToConnectionStateChanges":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStateChange>(),
        interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
        userFunction: self.listenToConnectionStateChanges(request:context:)
      )

    case "ListenToConnectionStatus":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStatusUpdate>(),
        interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
        userFunction: self.listenToConnectionStatus(request:context:)
      )

    case "ListEntryGateways":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListEntryGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListEntryGatewaysResponse>(),
        interceptors: self.interceptors?.makeListEntryGatewaysInterceptors() ?? [],
        userFunction: self.listEntryGateways(request:context:)
      )

    case "ListExitGateways":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListExitGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListExitGatewaysResponse>(),
        interceptors: self.interceptors?.makeListExitGatewaysInterceptors() ?? [],
        userFunction: self.listExitGateways(request:context:)
      )

    case "ListVpnGateways":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListVpnGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListVpnGatewaysResponse>(),
        interceptors: self.interceptors?.makeListVpnGatewaysInterceptors() ?? [],
        userFunction: self.listVpnGateways(request:context:)
      )

    case "ListEntryCountries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListEntryCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListEntryCountriesResponse>(),
        interceptors: self.interceptors?.makeListEntryCountriesInterceptors() ?? [],
        userFunction: self.listEntryCountries(request:context:)
      )

    case "ListExitCountries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListExitCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListExitCountriesResponse>(),
        interceptors: self.interceptors?.makeListExitCountriesInterceptors() ?? [],
        userFunction: self.listExitCountries(request:context:)
      )

    case "ListVpnCountries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListVpnCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListVpnCountriesResponse>(),
        interceptors: self.interceptors?.makeListVpnCountriesInterceptors() ?? [],
        userFunction: self.listVpnCountries(request:context:)
      )

    case "StoreAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StoreAccountRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StoreAccountResponse>(),
        interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? [],
        userFunction: self.storeAccount(request:context:)
      )

    case "GetAccountSummary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountSummaryRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountSummaryResponse>(),
        interceptors: self.interceptors?.makeGetAccountSummaryInterceptors() ?? [],
        userFunction: self.getAccountSummary(request:context:)
      )

    case "RegisterDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RegisterDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RegisterDeviceResponse>(),
        interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? [],
        userFunction: self.registerDevice(request:context:)
      )

    case "RequestZkNym":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RequestZkNymRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RequestZkNymResponse>(),
        interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? [],
        userFunction: self.requestZkNym(request:context:)
      )

    case "GetDeviceZkNyms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetDeviceZkNymsRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetDeviceZkNymsResponse>(),
        interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? [],
        userFunction: self.getDeviceZkNyms(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nym_Vpn_NymVpndAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? { get }

  func info(
    request: Nym_Vpn_InfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_InfoResponse

  func vpnConnect(
    request: Nym_Vpn_ConnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ConnectResponse

  func vpnDisconnect(
    request: Nym_Vpn_DisconnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_DisconnectResponse

  func vpnStatus(
    request: Nym_Vpn_StatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_StatusResponse

  func importUserCredential(
    request: Nym_Vpn_ImportUserCredentialRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ImportUserCredentialResponse

  func listenToConnectionStateChanges(
    request: Nym_Vpn_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Nym_Vpn_ConnectionStateChange>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func listenToConnectionStatus(
    request: Nym_Vpn_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Nym_Vpn_ConnectionStatusUpdate>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func listEntryGateways(
    request: Nym_Vpn_ListEntryGatewaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListEntryGatewaysResponse

  func listExitGateways(
    request: Nym_Vpn_ListExitGatewaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListExitGatewaysResponse

  func listVpnGateways(
    request: Nym_Vpn_ListVpnGatewaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListVpnGatewaysResponse

  func listEntryCountries(
    request: Nym_Vpn_ListEntryCountriesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListEntryCountriesResponse

  func listExitCountries(
    request: Nym_Vpn_ListExitCountriesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListExitCountriesResponse

  func listVpnCountries(
    request: Nym_Vpn_ListVpnCountriesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ListVpnCountriesResponse

  /// Unstable
  func storeAccount(
    request: Nym_Vpn_StoreAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_StoreAccountResponse

  func getAccountSummary(
    request: Nym_Vpn_GetAccountSummaryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetAccountSummaryResponse

  func registerDevice(
    request: Nym_Vpn_RegisterDeviceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_RegisterDeviceResponse

  func requestZkNym(
    request: Nym_Vpn_RequestZkNymRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_RequestZkNymResponse

  func getDeviceZkNyms(
    request: Nym_Vpn_GetDeviceZkNymsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_GetDeviceZkNymsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Info":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_InfoRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_InfoResponse>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        wrapping: { try await self.info(request: $0, context: $1) }
      )

    case "VpnConnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectResponse>(),
        interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? [],
        wrapping: { try await self.vpnConnect(request: $0, context: $1) }
      )

    case "VpnDisconnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_DisconnectResponse>(),
        interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? [],
        wrapping: { try await self.vpnDisconnect(request: $0, context: $1) }
      )

    case "VpnStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StatusResponse>(),
        interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? [],
        wrapping: { try await self.vpnStatus(request: $0, context: $1) }
      )

    case "ImportUserCredential":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ImportUserCredentialRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ImportUserCredentialResponse>(),
        interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? [],
        wrapping: { try await self.importUserCredential(request: $0, context: $1) }
      )

    case "ListenToConnectionStateChanges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStateChange>(),
        interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
        wrapping: { try await self.listenToConnectionStateChanges(request: $0, responseStream: $1, context: $2) }
      )

    case "ListenToConnectionStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStatusUpdate>(),
        interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
        wrapping: { try await self.listenToConnectionStatus(request: $0, responseStream: $1, context: $2) }
      )

    case "ListEntryGateways":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListEntryGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListEntryGatewaysResponse>(),
        interceptors: self.interceptors?.makeListEntryGatewaysInterceptors() ?? [],
        wrapping: { try await self.listEntryGateways(request: $0, context: $1) }
      )

    case "ListExitGateways":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListExitGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListExitGatewaysResponse>(),
        interceptors: self.interceptors?.makeListExitGatewaysInterceptors() ?? [],
        wrapping: { try await self.listExitGateways(request: $0, context: $1) }
      )

    case "ListVpnGateways":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListVpnGatewaysRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListVpnGatewaysResponse>(),
        interceptors: self.interceptors?.makeListVpnGatewaysInterceptors() ?? [],
        wrapping: { try await self.listVpnGateways(request: $0, context: $1) }
      )

    case "ListEntryCountries":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListEntryCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListEntryCountriesResponse>(),
        interceptors: self.interceptors?.makeListEntryCountriesInterceptors() ?? [],
        wrapping: { try await self.listEntryCountries(request: $0, context: $1) }
      )

    case "ListExitCountries":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListExitCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListExitCountriesResponse>(),
        interceptors: self.interceptors?.makeListExitCountriesInterceptors() ?? [],
        wrapping: { try await self.listExitCountries(request: $0, context: $1) }
      )

    case "ListVpnCountries":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ListVpnCountriesRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ListVpnCountriesResponse>(),
        interceptors: self.interceptors?.makeListVpnCountriesInterceptors() ?? [],
        wrapping: { try await self.listVpnCountries(request: $0, context: $1) }
      )

    case "StoreAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StoreAccountRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StoreAccountResponse>(),
        interceptors: self.interceptors?.makeStoreAccountInterceptors() ?? [],
        wrapping: { try await self.storeAccount(request: $0, context: $1) }
      )

    case "GetAccountSummary":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetAccountSummaryRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetAccountSummaryResponse>(),
        interceptors: self.interceptors?.makeGetAccountSummaryInterceptors() ?? [],
        wrapping: { try await self.getAccountSummary(request: $0, context: $1) }
      )

    case "RegisterDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RegisterDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RegisterDeviceResponse>(),
        interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? [],
        wrapping: { try await self.registerDevice(request: $0, context: $1) }
      )

    case "RequestZkNym":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_RequestZkNymRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_RequestZkNymResponse>(),
        interceptors: self.interceptors?.makeRequestZkNymInterceptors() ?? [],
        wrapping: { try await self.requestZkNym(request: $0, context: $1) }
      )

    case "GetDeviceZkNyms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_GetDeviceZkNymsRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_GetDeviceZkNymsResponse>(),
        interceptors: self.interceptors?.makeGetDeviceZkNymsInterceptors() ?? [],
        wrapping: { try await self.getDeviceZkNyms(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Nym_Vpn_NymVpndServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'info'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInfoInterceptors() -> [ServerInterceptor<Nym_Vpn_InfoRequest, Nym_Vpn_InfoResponse>]

  /// - Returns: Interceptors to use when handling 'vpnConnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnConnectInterceptors() -> [ServerInterceptor<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>]

  /// - Returns: Interceptors to use when handling 'vpnDisconnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnDisconnectInterceptors() -> [ServerInterceptor<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>]

  /// - Returns: Interceptors to use when handling 'vpnStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnStatusInterceptors() -> [ServerInterceptor<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'importUserCredential'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportUserCredentialInterceptors() -> [ServerInterceptor<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>]

  /// - Returns: Interceptors to use when handling 'listenToConnectionStateChanges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToConnectionStateChangesInterceptors() -> [ServerInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>]

  /// - Returns: Interceptors to use when handling 'listenToConnectionStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToConnectionStatusInterceptors() -> [ServerInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>]

  /// - Returns: Interceptors to use when handling 'listEntryGateways'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListEntryGatewaysInterceptors() -> [ServerInterceptor<Nym_Vpn_ListEntryGatewaysRequest, Nym_Vpn_ListEntryGatewaysResponse>]

  /// - Returns: Interceptors to use when handling 'listExitGateways'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListExitGatewaysInterceptors() -> [ServerInterceptor<Nym_Vpn_ListExitGatewaysRequest, Nym_Vpn_ListExitGatewaysResponse>]

  /// - Returns: Interceptors to use when handling 'listVpnGateways'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListVpnGatewaysInterceptors() -> [ServerInterceptor<Nym_Vpn_ListVpnGatewaysRequest, Nym_Vpn_ListVpnGatewaysResponse>]

  /// - Returns: Interceptors to use when handling 'listEntryCountries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListEntryCountriesInterceptors() -> [ServerInterceptor<Nym_Vpn_ListEntryCountriesRequest, Nym_Vpn_ListEntryCountriesResponse>]

  /// - Returns: Interceptors to use when handling 'listExitCountries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListExitCountriesInterceptors() -> [ServerInterceptor<Nym_Vpn_ListExitCountriesRequest, Nym_Vpn_ListExitCountriesResponse>]

  /// - Returns: Interceptors to use when handling 'listVpnCountries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListVpnCountriesInterceptors() -> [ServerInterceptor<Nym_Vpn_ListVpnCountriesRequest, Nym_Vpn_ListVpnCountriesResponse>]

  /// - Returns: Interceptors to use when handling 'storeAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreAccountInterceptors() -> [ServerInterceptor<Nym_Vpn_StoreAccountRequest, Nym_Vpn_StoreAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getAccountSummary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountSummaryInterceptors() -> [ServerInterceptor<Nym_Vpn_GetAccountSummaryRequest, Nym_Vpn_GetAccountSummaryResponse>]

  /// - Returns: Interceptors to use when handling 'registerDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterDeviceInterceptors() -> [ServerInterceptor<Nym_Vpn_RegisterDeviceRequest, Nym_Vpn_RegisterDeviceResponse>]

  /// - Returns: Interceptors to use when handling 'requestZkNym'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestZkNymInterceptors() -> [ServerInterceptor<Nym_Vpn_RequestZkNymRequest, Nym_Vpn_RequestZkNymResponse>]

  /// - Returns: Interceptors to use when handling 'getDeviceZkNyms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDeviceZkNymsInterceptors() -> [ServerInterceptor<Nym_Vpn_GetDeviceZkNymsRequest, Nym_Vpn_GetDeviceZkNymsResponse>]
}

internal enum Nym_Vpn_NymVpndServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NymVpnd",
    fullName: "nym.vpn.NymVpnd",
    methods: [
      Nym_Vpn_NymVpndServerMetadata.Methods.info,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnConnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnDisconnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnStatus,
      Nym_Vpn_NymVpndServerMetadata.Methods.importUserCredential,
      Nym_Vpn_NymVpndServerMetadata.Methods.listenToConnectionStateChanges,
      Nym_Vpn_NymVpndServerMetadata.Methods.listenToConnectionStatus,
      Nym_Vpn_NymVpndServerMetadata.Methods.listEntryGateways,
      Nym_Vpn_NymVpndServerMetadata.Methods.listExitGateways,
      Nym_Vpn_NymVpndServerMetadata.Methods.listVpnGateways,
      Nym_Vpn_NymVpndServerMetadata.Methods.listEntryCountries,
      Nym_Vpn_NymVpndServerMetadata.Methods.listExitCountries,
      Nym_Vpn_NymVpndServerMetadata.Methods.listVpnCountries,
      Nym_Vpn_NymVpndServerMetadata.Methods.storeAccount,
      Nym_Vpn_NymVpndServerMetadata.Methods.getAccountSummary,
      Nym_Vpn_NymVpndServerMetadata.Methods.registerDevice,
      Nym_Vpn_NymVpndServerMetadata.Methods.requestZkNym,
      Nym_Vpn_NymVpndServerMetadata.Methods.getDeviceZkNyms,
    ]
  )

  internal enum Methods {
    internal static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/nym.vpn.NymVpnd/Info",
      type: GRPCCallType.unary
    )

    internal static let vpnConnect = GRPCMethodDescriptor(
      name: "VpnConnect",
      path: "/nym.vpn.NymVpnd/VpnConnect",
      type: GRPCCallType.unary
    )

    internal static let vpnDisconnect = GRPCMethodDescriptor(
      name: "VpnDisconnect",
      path: "/nym.vpn.NymVpnd/VpnDisconnect",
      type: GRPCCallType.unary
    )

    internal static let vpnStatus = GRPCMethodDescriptor(
      name: "VpnStatus",
      path: "/nym.vpn.NymVpnd/VpnStatus",
      type: GRPCCallType.unary
    )

    internal static let importUserCredential = GRPCMethodDescriptor(
      name: "ImportUserCredential",
      path: "/nym.vpn.NymVpnd/ImportUserCredential",
      type: GRPCCallType.unary
    )

    internal static let listenToConnectionStateChanges = GRPCMethodDescriptor(
      name: "ListenToConnectionStateChanges",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStateChanges",
      type: GRPCCallType.serverStreaming
    )

    internal static let listenToConnectionStatus = GRPCMethodDescriptor(
      name: "ListenToConnectionStatus",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStatus",
      type: GRPCCallType.serverStreaming
    )

    internal static let listEntryGateways = GRPCMethodDescriptor(
      name: "ListEntryGateways",
      path: "/nym.vpn.NymVpnd/ListEntryGateways",
      type: GRPCCallType.unary
    )

    internal static let listExitGateways = GRPCMethodDescriptor(
      name: "ListExitGateways",
      path: "/nym.vpn.NymVpnd/ListExitGateways",
      type: GRPCCallType.unary
    )

    internal static let listVpnGateways = GRPCMethodDescriptor(
      name: "ListVpnGateways",
      path: "/nym.vpn.NymVpnd/ListVpnGateways",
      type: GRPCCallType.unary
    )

    internal static let listEntryCountries = GRPCMethodDescriptor(
      name: "ListEntryCountries",
      path: "/nym.vpn.NymVpnd/ListEntryCountries",
      type: GRPCCallType.unary
    )

    internal static let listExitCountries = GRPCMethodDescriptor(
      name: "ListExitCountries",
      path: "/nym.vpn.NymVpnd/ListExitCountries",
      type: GRPCCallType.unary
    )

    internal static let listVpnCountries = GRPCMethodDescriptor(
      name: "ListVpnCountries",
      path: "/nym.vpn.NymVpnd/ListVpnCountries",
      type: GRPCCallType.unary
    )

    internal static let storeAccount = GRPCMethodDescriptor(
      name: "StoreAccount",
      path: "/nym.vpn.NymVpnd/StoreAccount",
      type: GRPCCallType.unary
    )

    internal static let getAccountSummary = GRPCMethodDescriptor(
      name: "GetAccountSummary",
      path: "/nym.vpn.NymVpnd/GetAccountSummary",
      type: GRPCCallType.unary
    )

    internal static let registerDevice = GRPCMethodDescriptor(
      name: "RegisterDevice",
      path: "/nym.vpn.NymVpnd/RegisterDevice",
      type: GRPCCallType.unary
    )

    internal static let requestZkNym = GRPCMethodDescriptor(
      name: "RequestZkNym",
      path: "/nym.vpn.NymVpnd/RequestZkNym",
      type: GRPCCallType.unary
    )

    internal static let getDeviceZkNyms = GRPCMethodDescriptor(
      name: "GetDeviceZkNyms",
      path: "/nym.vpn.NymVpnd/GetDeviceZkNyms",
      type: GRPCCallType.unary
    )
  }
}
