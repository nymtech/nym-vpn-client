// swiftlint:disable all

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: vpn.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Nym_Vpn_NymVpndClient`, then call methods of this protocol to make API calls.
internal protocol Nym_Vpn_NymVpndClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? { get }

  func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>

  func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>

  func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>

  func importUserCredential(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>

  func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Nym_Vpn_ConnectionStateChange) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>

  func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Nym_Vpn_ConnectionStatusUpdate) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>
}

extension Nym_Vpn_NymVpndClientProtocol {
  internal var serviceName: String {
    return "nym.vpn.NymVpnd"
  }

  /// Unary call to VpnConnect
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnConnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  /// Unary call to VpnDisconnect
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnDisconnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  /// Unary call to VpnStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to VpnStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  /// Unary call to ImportUserCredential
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportUserCredential.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importUserCredential(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse> {
    return self.makeUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? []
    )
  }

  /// Server streaming call to ListenToConnectionStateChanges
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToConnectionStateChanges.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Nym_Vpn_ConnectionStateChange) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange> {
    return self.makeServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to ListenToConnectionStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToConnectionStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Nym_Vpn_ConnectionStatusUpdate) -> Void
  ) -> ServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate> {
    return self.makeServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Nym_Vpn_NymVpndClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Nym_Vpn_NymVpndNIOClient")
internal final class Nym_Vpn_NymVpndClient: Nym_Vpn_NymVpndClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the nym.vpn.NymVpnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Nym_Vpn_NymVpndNIOClient: Nym_Vpn_NymVpndClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?

  /// Creates a client for the nym.vpn.NymVpnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nym_Vpn_NymVpndAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? { get }

  func makeVpnConnectCall(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>

  func makeVpnDisconnectCall(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>

  func makeVpnStatusCall(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>

  func makeImportUserCredentialCall(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>

  func makeListenToConnectionStateChangesCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>

  func makeListenToConnectionStatusCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nym_Vpn_NymVpndClientMetadata.serviceDescriptor
  }

  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeVpnConnectCall(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  internal func makeVpnDisconnectCall(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  internal func makeVpnStatusCall(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  internal func makeImportUserCredentialCall(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse> {
    return self.makeAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? []
    )
  }

  internal func makeListenToConnectionStateChangesCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange> {
    return self.makeAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? []
    )
  }

  internal func makeListenToConnectionStatusCall(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate> {
    return self.makeAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncClientProtocol {
  internal func vpnConnect(
    _ request: Nym_Vpn_ConnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ConnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? []
    )
  }

  internal func vpnDisconnect(
    _ request: Nym_Vpn_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_DisconnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? []
    )
  }

  internal func vpnStatus(
    _ request: Nym_Vpn_StatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? []
    )
  }

  internal func importUserCredential(
    _ request: Nym_Vpn_ImportUserCredentialRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nym_Vpn_ImportUserCredentialResponse {
    return try await self.performAsyncUnaryCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? []
    )
  }

  internal func listenToConnectionStateChanges(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Nym_Vpn_ConnectionStateChange> {
    return self.performAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? []
    )
  }

  internal func listenToConnectionStatus(
    _ request: Nym_Vpn_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Nym_Vpn_ConnectionStatusUpdate> {
    return self.performAsyncServerStreamingCall(
      path: Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Nym_Vpn_NymVpndAsyncClient: Nym_Vpn_NymVpndAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nym_Vpn_NymVpndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Nym_Vpn_NymVpndClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'vpnConnect'.
  func makeVpnConnectInterceptors() -> [ClientInterceptor<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnDisconnect'.
  func makeVpnDisconnectInterceptors() -> [ClientInterceptor<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>]

  /// - Returns: Interceptors to use when invoking 'vpnStatus'.
  func makeVpnStatusInterceptors() -> [ClientInterceptor<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'importUserCredential'.
  func makeImportUserCredentialInterceptors() -> [ClientInterceptor<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>]

  /// - Returns: Interceptors to use when invoking 'listenToConnectionStateChanges'.
  func makeListenToConnectionStateChangesInterceptors() -> [ClientInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>]

  /// - Returns: Interceptors to use when invoking 'listenToConnectionStatus'.
  func makeListenToConnectionStatusInterceptors() -> [ClientInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>]
}

internal enum Nym_Vpn_NymVpndClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NymVpnd",
    fullName: "nym.vpn.NymVpnd",
    methods: [
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnConnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnDisconnect,
      Nym_Vpn_NymVpndClientMetadata.Methods.vpnStatus,
      Nym_Vpn_NymVpndClientMetadata.Methods.importUserCredential,
      Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStateChanges,
      Nym_Vpn_NymVpndClientMetadata.Methods.listenToConnectionStatus,
    ]
  )

  internal enum Methods {
    internal static let vpnConnect = GRPCMethodDescriptor(
      name: "VpnConnect",
      path: "/nym.vpn.NymVpnd/VpnConnect",
      type: GRPCCallType.unary
    )

    internal static let vpnDisconnect = GRPCMethodDescriptor(
      name: "VpnDisconnect",
      path: "/nym.vpn.NymVpnd/VpnDisconnect",
      type: GRPCCallType.unary
    )

    internal static let vpnStatus = GRPCMethodDescriptor(
      name: "VpnStatus",
      path: "/nym.vpn.NymVpnd/VpnStatus",
      type: GRPCCallType.unary
    )

    internal static let importUserCredential = GRPCMethodDescriptor(
      name: "ImportUserCredential",
      path: "/nym.vpn.NymVpnd/ImportUserCredential",
      type: GRPCCallType.unary
    )

    internal static let listenToConnectionStateChanges = GRPCMethodDescriptor(
      name: "ListenToConnectionStateChanges",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStateChanges",
      type: GRPCCallType.serverStreaming
    )

    internal static let listenToConnectionStatus = GRPCMethodDescriptor(
      name: "ListenToConnectionStatus",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStatus",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nym_Vpn_NymVpndProvider: CallHandlerProvider {
  var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? { get }

  func vpnConnect(request: Nym_Vpn_ConnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ConnectResponse>

  func vpnDisconnect(request: Nym_Vpn_DisconnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_DisconnectResponse>

  func vpnStatus(request: Nym_Vpn_StatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_StatusResponse>

  func importUserCredential(request: Nym_Vpn_ImportUserCredentialRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nym_Vpn_ImportUserCredentialResponse>

  func listenToConnectionStateChanges(request: Nym_Vpn_Empty, context: StreamingResponseCallContext<Nym_Vpn_ConnectionStateChange>) -> EventLoopFuture<GRPCStatus>

  func listenToConnectionStatus(request: Nym_Vpn_Empty, context: StreamingResponseCallContext<Nym_Vpn_ConnectionStatusUpdate>) -> EventLoopFuture<GRPCStatus>
}

extension Nym_Vpn_NymVpndProvider {
  internal var serviceName: Substring {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "VpnConnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectResponse>(),
        interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? [],
        userFunction: self.vpnConnect(request:context:)
      )

    case "VpnDisconnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_DisconnectResponse>(),
        interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? [],
        userFunction: self.vpnDisconnect(request:context:)
      )

    case "VpnStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StatusResponse>(),
        interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? [],
        userFunction: self.vpnStatus(request:context:)
      )

    case "ImportUserCredential":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ImportUserCredentialRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ImportUserCredentialResponse>(),
        interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? [],
        userFunction: self.importUserCredential(request:context:)
      )

    case "ListenToConnectionStateChanges":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStateChange>(),
        interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
        userFunction: self.listenToConnectionStateChanges(request:context:)
      )

    case "ListenToConnectionStatus":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStatusUpdate>(),
        interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
        userFunction: self.listenToConnectionStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nym_Vpn_NymVpndAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? { get }

  func vpnConnect(
    request: Nym_Vpn_ConnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ConnectResponse

  func vpnDisconnect(
    request: Nym_Vpn_DisconnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_DisconnectResponse

  func vpnStatus(
    request: Nym_Vpn_StatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_StatusResponse

  func importUserCredential(
    request: Nym_Vpn_ImportUserCredentialRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nym_Vpn_ImportUserCredentialResponse

  func listenToConnectionStateChanges(
    request: Nym_Vpn_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Nym_Vpn_ConnectionStateChange>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func listenToConnectionStatus(
    request: Nym_Vpn_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Nym_Vpn_ConnectionStatusUpdate>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nym_Vpn_NymVpndAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Nym_Vpn_NymVpndServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Nym_Vpn_NymVpndServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "VpnConnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectResponse>(),
        interceptors: self.interceptors?.makeVpnConnectInterceptors() ?? [],
        wrapping: { try await self.vpnConnect(request: $0, context: $1) }
      )

    case "VpnDisconnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_DisconnectResponse>(),
        interceptors: self.interceptors?.makeVpnDisconnectInterceptors() ?? [],
        wrapping: { try await self.vpnDisconnect(request: $0, context: $1) }
      )

    case "VpnStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_StatusResponse>(),
        interceptors: self.interceptors?.makeVpnStatusInterceptors() ?? [],
        wrapping: { try await self.vpnStatus(request: $0, context: $1) }
      )

    case "ImportUserCredential":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_ImportUserCredentialRequest>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ImportUserCredentialResponse>(),
        interceptors: self.interceptors?.makeImportUserCredentialInterceptors() ?? [],
        wrapping: { try await self.importUserCredential(request: $0, context: $1) }
      )

    case "ListenToConnectionStateChanges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStateChange>(),
        interceptors: self.interceptors?.makeListenToConnectionStateChangesInterceptors() ?? [],
        wrapping: { try await self.listenToConnectionStateChanges(request: $0, responseStream: $1, context: $2) }
      )

    case "ListenToConnectionStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nym_Vpn_Empty>(),
        responseSerializer: ProtobufSerializer<Nym_Vpn_ConnectionStatusUpdate>(),
        interceptors: self.interceptors?.makeListenToConnectionStatusInterceptors() ?? [],
        wrapping: { try await self.listenToConnectionStatus(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Nym_Vpn_NymVpndServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'vpnConnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnConnectInterceptors() -> [ServerInterceptor<Nym_Vpn_ConnectRequest, Nym_Vpn_ConnectResponse>]

  /// - Returns: Interceptors to use when handling 'vpnDisconnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnDisconnectInterceptors() -> [ServerInterceptor<Nym_Vpn_DisconnectRequest, Nym_Vpn_DisconnectResponse>]

  /// - Returns: Interceptors to use when handling 'vpnStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVpnStatusInterceptors() -> [ServerInterceptor<Nym_Vpn_StatusRequest, Nym_Vpn_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'importUserCredential'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportUserCredentialInterceptors() -> [ServerInterceptor<Nym_Vpn_ImportUserCredentialRequest, Nym_Vpn_ImportUserCredentialResponse>]

  /// - Returns: Interceptors to use when handling 'listenToConnectionStateChanges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToConnectionStateChangesInterceptors() -> [ServerInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStateChange>]

  /// - Returns: Interceptors to use when handling 'listenToConnectionStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToConnectionStatusInterceptors() -> [ServerInterceptor<Nym_Vpn_Empty, Nym_Vpn_ConnectionStatusUpdate>]
}

internal enum Nym_Vpn_NymVpndServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NymVpnd",
    fullName: "nym.vpn.NymVpnd",
    methods: [
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnConnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnDisconnect,
      Nym_Vpn_NymVpndServerMetadata.Methods.vpnStatus,
      Nym_Vpn_NymVpndServerMetadata.Methods.importUserCredential,
      Nym_Vpn_NymVpndServerMetadata.Methods.listenToConnectionStateChanges,
      Nym_Vpn_NymVpndServerMetadata.Methods.listenToConnectionStatus,
    ]
  )

  internal enum Methods {
    internal static let vpnConnect = GRPCMethodDescriptor(
      name: "VpnConnect",
      path: "/nym.vpn.NymVpnd/VpnConnect",
      type: GRPCCallType.unary
    )

    internal static let vpnDisconnect = GRPCMethodDescriptor(
      name: "VpnDisconnect",
      path: "/nym.vpn.NymVpnd/VpnDisconnect",
      type: GRPCCallType.unary
    )

    internal static let vpnStatus = GRPCMethodDescriptor(
      name: "VpnStatus",
      path: "/nym.vpn.NymVpnd/VpnStatus",
      type: GRPCCallType.unary
    )

    internal static let importUserCredential = GRPCMethodDescriptor(
      name: "ImportUserCredential",
      path: "/nym.vpn.NymVpnd/ImportUserCredential",
      type: GRPCCallType.unary
    )

    internal static let listenToConnectionStateChanges = GRPCMethodDescriptor(
      name: "ListenToConnectionStateChanges",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStateChanges",
      type: GRPCCallType.serverStreaming
    )

    internal static let listenToConnectionStatus = GRPCMethodDescriptor(
      name: "ListenToConnectionStatus",
      path: "/nym.vpn.NymVpnd/ListenToConnectionStatus",
      type: GRPCCallType.serverStreaming
    )
  }
}
// swiftlint:enable all
