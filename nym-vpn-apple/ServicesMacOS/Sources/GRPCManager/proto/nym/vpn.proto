syntax = "proto3";

package nym.vpn;

message Empty {}

// Represents the identity of a gateway
message Gateway {
  string id = 1;
}

// Represents a nym-address of the form id.enc@gateway
message Address {
  string nym_address = 1;
}

message Location {
  string two_letter_iso_country_code = 1;
}

message EntryNode {
  oneof entry_node_enum {
    Gateway gateway = 1;
    Location location = 2;
    Empty random_low_latency = 3;
    Empty random = 4;
  }
}

message ExitNode {
  oneof exit_node_enum {
    Address address = 1;
    Gateway gateway = 2;
    Location location = 3;
    Empty random = 4;
  }
}

message Dns {
  string ip = 1;
}

message ConnectRequest {
  EntryNode entry = 1;
  ExitNode exit = 2;
  Dns dns = 3;
  bool disable_routing = 4;
  bool enable_two_hop = 5;
  bool enable_poisson_rate = 6;
  bool disable_background_cover_traffic = 7;
  bool enable_credentials_mode = 8;
}

message ConnectResponse {
  bool success = 1;
}

message DisconnectRequest {}
message DisconnectResponse {
  bool success = 1;
}

enum ConnectionStatus {
  STATUS_UNSPECIFIED = 0;
  UNKNOWN = 1;
  NOT_CONNECTED = 2;
  CONNECTING = 3;
  CONNECTED = 4;
  DISCONNECTING = 5;
  CONNECTION_FAILED = 6;
}

import "google/protobuf/timestamp.proto";

message ConnectionDetails {
  string entry_gateway = 1;
  google.protobuf.Timestamp since = 2;
}

message StatusRequest {}
message StatusResponse {
  ConnectionStatus status = 1;
  ConnectionDetails details = 2;
  Error error = 3;
}

message ConnectionStateChange {
  ConnectionStatus status = 1;
  Error error = 2;
}

message ConnectionStatusUpdate {
  string message = 1;
}

message Error {
  enum ErrorType {
    ERROR_TYPE_UNSPECIFIED = 0;

    // An error that was not explicitly handled by the vpn service. This should
    // not happend but it will while we interate on mapping out all possible
    // error that can happen
    UNHANDLED = 1;

    // If the credential storage does not contain any valid credentials when connecting

    NO_VALID_CREDENTIALS = 2;

    // AUTHENTICATION_FAILED = 3;
    // NETWORK_ISSUE = 4;
    // INVALID_CONFIGURATION = 5;

    // Connection timeout. This could happen  in a number of contexts, and the
    // provided details needs to be investigated to determine what went wrong
    TIMEOUT = 6;

    // PERMISSION_DENIED = 7;

    // Looking up gateways can fail in a number of ways.
    GATEWAY_DIRECTORY = 8;
  }

  ErrorType kind = 1;

  // Detailed error message for logging and debuggning
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

message ImportUserCredentialRequest {
  bytes credential = 1;
}

message ImportUserCredentialResponse {
  bool success = 1;
  ImportError error = 2;
}

message ImportError {
  enum ImportErrorType {
    IMPORT_ERROR_TYPE_UNSPECIFIED = 0;

    // Credential import is not supported while the vpn is already connected
    VPN_RUNNING = 1;

    // Importing the same credential twice will return an error
    CREDENTIAL_ALREADY_IMPORTED = 2;

    // If the credential storage fails in some way. It's very likely due to a
    // permission error.
    STORAGE_ERROR = 3;

    // If the provided credential fails to deserialize. This is probably due to
    // incorrect credential, but it could also be due to other internal reasons
    DESERIALIZATION_FAILURE = 4;

    // Credentials have a date when they expire
    CREDENTIAL_EXPIRED = 5;
  }

  ImportErrorType kind = 1;

  // Detailed error message for logging and debugging
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

service NymVpnd {
  rpc VpnConnect (ConnectRequest) returns (ConnectResponse) {}
  rpc VpnDisconnect (DisconnectRequest) returns (DisconnectResponse) {}
  rpc VpnStatus (StatusRequest) returns (StatusResponse) {}
  rpc ImportUserCredential (ImportUserCredentialRequest) returns (ImportUserCredentialResponse) {}
  rpc ListenToConnectionStateChanges (Empty) returns (stream ConnectionStateChange) {}
  rpc ListenToConnectionStatus (Empty) returns (stream ConnectionStatusUpdate) {}
}

