// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(nym_vpn_libFFI)
import nym_vpn_libFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_nym_vpn_lib_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_nym_vpn_lib_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol OsTunProvider : AnyObject {
    
    func configureWg(config: WgConfig) throws 
    
    func configureNym(config: NymConfig) throws  -> Int32
    
}

open class OsTunProviderImpl:
    OsTunProvider {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nym_vpn_lib_fn_clone_ostunprovider(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_nym_vpn_lib_fn_free_ostunprovider(pointer, $0) }
    }

    

    
open func configureWg(config: WgConfig)throws  {try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_nym_vpn_lib_fn_method_ostunprovider_configure_wg(self.uniffiClonePointer(),
        FfiConverterTypeWgConfig.lower(config),$0
    )
}
}
    
open func configureNym(config: NymConfig)throws  -> Int32 {
    return try  FfiConverterInt32.lift(try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_nym_vpn_lib_fn_method_ostunprovider_configure_nym(self.uniffiClonePointer(),
        FfiConverterTypeNymConfig.lower(config),$0
    )
})
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceOSTunProvider {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOsTunProvider = UniffiVTableCallbackInterfaceOsTunProvider(
        configureWg: { (
            uniffiHandle: UInt64,
            config: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeOSTunProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.configureWg(
                     config: try FfiConverterTypeWgConfig.lift(config)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeFFIError.lower
            )
        },
        configureNym: { (
            uniffiHandle: UInt64,
            config: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int32>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Int32 in
                guard let uniffiObj = try? FfiConverterTypeOSTunProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.configureNym(
                     config: try FfiConverterTypeNymConfig.lift(config)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterInt32.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeFFIError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeOSTunProvider.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OSTunProvider: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOSTunProvider() {
    uniffi_nym_vpn_lib_fn_init_callback_vtable_ostunprovider(&UniffiCallbackInterfaceOSTunProvider.vtable)
}

public struct FfiConverterTypeOSTunProvider: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OsTunProvider>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OsTunProvider

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OsTunProvider {
        return OsTunProviderImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OsTunProvider) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OsTunProvider {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OsTunProvider, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeOSTunProvider_lift(_ pointer: UnsafeMutableRawPointer) throws -> OsTunProvider {
    return try FfiConverterTypeOSTunProvider.lift(pointer)
}

public func FfiConverterTypeOSTunProvider_lower(_ value: OsTunProvider) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOSTunProvider.lower(value)
}


public struct Location {
    public var twoLetterIsoCountryCode: String
    public var threeLetterIsoCountryCode: String
    public var countryName: String
    public var latitude: Double?
    public var longitude: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(twoLetterIsoCountryCode: String, threeLetterIsoCountryCode: String, countryName: String, latitude: Double?, longitude: Double?) {
        self.twoLetterIsoCountryCode = twoLetterIsoCountryCode
        self.threeLetterIsoCountryCode = threeLetterIsoCountryCode
        self.countryName = countryName
        self.latitude = latitude
        self.longitude = longitude
    }
}



extension Location: Equatable, Hashable {
    public static func ==(lhs: Location, rhs: Location) -> Bool {
        if lhs.twoLetterIsoCountryCode != rhs.twoLetterIsoCountryCode {
            return false
        }
        if lhs.threeLetterIsoCountryCode != rhs.threeLetterIsoCountryCode {
            return false
        }
        if lhs.countryName != rhs.countryName {
            return false
        }
        if lhs.latitude != rhs.latitude {
            return false
        }
        if lhs.longitude != rhs.longitude {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(twoLetterIsoCountryCode)
        hasher.combine(threeLetterIsoCountryCode)
        hasher.combine(countryName)
        hasher.combine(latitude)
        hasher.combine(longitude)
    }
}


public struct FfiConverterTypeLocation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Location {
        return
            try Location(
                twoLetterIsoCountryCode: FfiConverterString.read(from: &buf), 
                threeLetterIsoCountryCode: FfiConverterString.read(from: &buf), 
                countryName: FfiConverterString.read(from: &buf), 
                latitude: FfiConverterOptionDouble.read(from: &buf), 
                longitude: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Location, into buf: inout [UInt8]) {
        FfiConverterString.write(value.twoLetterIsoCountryCode, into: &buf)
        FfiConverterString.write(value.threeLetterIsoCountryCode, into: &buf)
        FfiConverterString.write(value.countryName, into: &buf)
        FfiConverterOptionDouble.write(value.latitude, into: &buf)
        FfiConverterOptionDouble.write(value.longitude, into: &buf)
    }
}


public func FfiConverterTypeLocation_lift(_ buf: RustBuffer) throws -> Location {
    return try FfiConverterTypeLocation.lift(buf)
}

public func FfiConverterTypeLocation_lower(_ value: Location) -> RustBuffer {
    return FfiConverterTypeLocation.lower(value)
}


public struct NymConfig {
    public var ipv4Addr: Ipv4Addr
    public var ipv6Addr: Ipv6Addr
    public var mtu: UInt16
    public var entryMixnetGatewayIp: IpAddr?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ipv4Addr: Ipv4Addr, ipv6Addr: Ipv6Addr, mtu: UInt16, entryMixnetGatewayIp: IpAddr?) {
        self.ipv4Addr = ipv4Addr
        self.ipv6Addr = ipv6Addr
        self.mtu = mtu
        self.entryMixnetGatewayIp = entryMixnetGatewayIp
    }
}



extension NymConfig: Equatable, Hashable {
    public static func ==(lhs: NymConfig, rhs: NymConfig) -> Bool {
        if lhs.ipv4Addr != rhs.ipv4Addr {
            return false
        }
        if lhs.ipv6Addr != rhs.ipv6Addr {
            return false
        }
        if lhs.mtu != rhs.mtu {
            return false
        }
        if lhs.entryMixnetGatewayIp != rhs.entryMixnetGatewayIp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ipv4Addr)
        hasher.combine(ipv6Addr)
        hasher.combine(mtu)
        hasher.combine(entryMixnetGatewayIp)
    }
}


public struct FfiConverterTypeNymConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NymConfig {
        return
            try NymConfig(
                ipv4Addr: FfiConverterTypeIpv4Addr.read(from: &buf), 
                ipv6Addr: FfiConverterTypeIpv6Addr.read(from: &buf), 
                mtu: FfiConverterUInt16.read(from: &buf), 
                entryMixnetGatewayIp: FfiConverterOptionTypeIpAddr.read(from: &buf)
        )
    }

    public static func write(_ value: NymConfig, into buf: inout [UInt8]) {
        FfiConverterTypeIpv4Addr.write(value.ipv4Addr, into: &buf)
        FfiConverterTypeIpv6Addr.write(value.ipv6Addr, into: &buf)
        FfiConverterUInt16.write(value.mtu, into: &buf)
        FfiConverterOptionTypeIpAddr.write(value.entryMixnetGatewayIp, into: &buf)
    }
}


public func FfiConverterTypeNymConfig_lift(_ buf: RustBuffer) throws -> NymConfig {
    return try FfiConverterTypeNymConfig.lift(buf)
}

public func FfiConverterTypeNymConfig_lower(_ value: NymConfig) -> RustBuffer {
    return FfiConverterTypeNymConfig.lower(value)
}


public struct PeerConfig {
    public var publicKey: PublicKey
    public var allowedIps: [IpNetwork]
    public var endpoint: SocketAddr
    public var psk: PresharedKey?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(publicKey: PublicKey, allowedIps: [IpNetwork], endpoint: SocketAddr, psk: PresharedKey?) {
        self.publicKey = publicKey
        self.allowedIps = allowedIps
        self.endpoint = endpoint
        self.psk = psk
    }
}



extension PeerConfig: Equatable, Hashable {
    public static func ==(lhs: PeerConfig, rhs: PeerConfig) -> Bool {
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.allowedIps != rhs.allowedIps {
            return false
        }
        if lhs.endpoint != rhs.endpoint {
            return false
        }
        if lhs.psk != rhs.psk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(publicKey)
        hasher.combine(allowedIps)
        hasher.combine(endpoint)
        hasher.combine(psk)
    }
}


public struct FfiConverterTypePeerConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PeerConfig {
        return
            try PeerConfig(
                publicKey: FfiConverterTypePublicKey.read(from: &buf), 
                allowedIps: FfiConverterSequenceTypeIpNetwork.read(from: &buf), 
                endpoint: FfiConverterTypeSocketAddr.read(from: &buf), 
                psk: FfiConverterOptionTypePresharedKey.read(from: &buf)
        )
    }

    public static func write(_ value: PeerConfig, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.publicKey, into: &buf)
        FfiConverterSequenceTypeIpNetwork.write(value.allowedIps, into: &buf)
        FfiConverterTypeSocketAddr.write(value.endpoint, into: &buf)
        FfiConverterOptionTypePresharedKey.write(value.psk, into: &buf)
    }
}


public func FfiConverterTypePeerConfig_lift(_ buf: RustBuffer) throws -> PeerConfig {
    return try FfiConverterTypePeerConfig.lift(buf)
}

public func FfiConverterTypePeerConfig_lower(_ value: PeerConfig) -> RustBuffer {
    return FfiConverterTypePeerConfig.lower(value)
}


public struct TunnelConfig {
    public var privateKey: PrivateKey
    public var addresses: [IpAddr]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(privateKey: PrivateKey, addresses: [IpAddr]) {
        self.privateKey = privateKey
        self.addresses = addresses
    }
}



extension TunnelConfig: Equatable, Hashable {
    public static func ==(lhs: TunnelConfig, rhs: TunnelConfig) -> Bool {
        if lhs.privateKey != rhs.privateKey {
            return false
        }
        if lhs.addresses != rhs.addresses {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(privateKey)
        hasher.combine(addresses)
    }
}


public struct FfiConverterTypeTunnelConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TunnelConfig {
        return
            try TunnelConfig(
                privateKey: FfiConverterTypePrivateKey.read(from: &buf), 
                addresses: FfiConverterSequenceTypeIpAddr.read(from: &buf)
        )
    }

    public static func write(_ value: TunnelConfig, into buf: inout [UInt8]) {
        FfiConverterTypePrivateKey.write(value.privateKey, into: &buf)
        FfiConverterSequenceTypeIpAddr.write(value.addresses, into: &buf)
    }
}


public func FfiConverterTypeTunnelConfig_lift(_ buf: RustBuffer) throws -> TunnelConfig {
    return try FfiConverterTypeTunnelConfig.lift(buf)
}

public func FfiConverterTypeTunnelConfig_lower(_ value: TunnelConfig) -> RustBuffer {
    return FfiConverterTypeTunnelConfig.lower(value)
}


public struct VpnConfig {
    public var apiUrl: Url
    public var explorerUrl: Url
    public var entryGateway: EntryPoint
    public var exitRouter: ExitPoint
    public var enableTwoHop: Bool
    public var tunProvider: OsTunProvider

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(apiUrl: Url, explorerUrl: Url, entryGateway: EntryPoint, exitRouter: ExitPoint, enableTwoHop: Bool, tunProvider: OsTunProvider) {
        self.apiUrl = apiUrl
        self.explorerUrl = explorerUrl
        self.entryGateway = entryGateway
        self.exitRouter = exitRouter
        self.enableTwoHop = enableTwoHop
        self.tunProvider = tunProvider
    }
}



public struct FfiConverterTypeVPNConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VpnConfig {
        return
            try VpnConfig(
                apiUrl: FfiConverterTypeUrl.read(from: &buf), 
                explorerUrl: FfiConverterTypeUrl.read(from: &buf), 
                entryGateway: FfiConverterTypeEntryPoint.read(from: &buf), 
                exitRouter: FfiConverterTypeExitPoint.read(from: &buf), 
                enableTwoHop: FfiConverterBool.read(from: &buf), 
                tunProvider: FfiConverterTypeOSTunProvider.read(from: &buf)
        )
    }

    public static func write(_ value: VpnConfig, into buf: inout [UInt8]) {
        FfiConverterTypeUrl.write(value.apiUrl, into: &buf)
        FfiConverterTypeUrl.write(value.explorerUrl, into: &buf)
        FfiConverterTypeEntryPoint.write(value.entryGateway, into: &buf)
        FfiConverterTypeExitPoint.write(value.exitRouter, into: &buf)
        FfiConverterBool.write(value.enableTwoHop, into: &buf)
        FfiConverterTypeOSTunProvider.write(value.tunProvider, into: &buf)
    }
}


public func FfiConverterTypeVPNConfig_lift(_ buf: RustBuffer) throws -> VpnConfig {
    return try FfiConverterTypeVPNConfig.lift(buf)
}

public func FfiConverterTypeVPNConfig_lower(_ value: VpnConfig) -> RustBuffer {
    return FfiConverterTypeVPNConfig.lower(value)
}


public struct WgConfig {
    public var tunnel: TunnelConfig
    public var peers: [PeerConfig]
    public var ipv4Gateway: Ipv4Addr
    public var ipv6Gateway: Ipv6Addr?
    public var mtu: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tunnel: TunnelConfig, peers: [PeerConfig], ipv4Gateway: Ipv4Addr, ipv6Gateway: Ipv6Addr?, mtu: UInt16) {
        self.tunnel = tunnel
        self.peers = peers
        self.ipv4Gateway = ipv4Gateway
        self.ipv6Gateway = ipv6Gateway
        self.mtu = mtu
    }
}



extension WgConfig: Equatable, Hashable {
    public static func ==(lhs: WgConfig, rhs: WgConfig) -> Bool {
        if lhs.tunnel != rhs.tunnel {
            return false
        }
        if lhs.peers != rhs.peers {
            return false
        }
        if lhs.ipv4Gateway != rhs.ipv4Gateway {
            return false
        }
        if lhs.ipv6Gateway != rhs.ipv6Gateway {
            return false
        }
        if lhs.mtu != rhs.mtu {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tunnel)
        hasher.combine(peers)
        hasher.combine(ipv4Gateway)
        hasher.combine(ipv6Gateway)
        hasher.combine(mtu)
    }
}


public struct FfiConverterTypeWgConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WgConfig {
        return
            try WgConfig(
                tunnel: FfiConverterTypeTunnelConfig.read(from: &buf), 
                peers: FfiConverterSequenceTypePeerConfig.read(from: &buf), 
                ipv4Gateway: FfiConverterTypeIpv4Addr.read(from: &buf), 
                ipv6Gateway: FfiConverterOptionTypeIpv6Addr.read(from: &buf), 
                mtu: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: WgConfig, into buf: inout [UInt8]) {
        FfiConverterTypeTunnelConfig.write(value.tunnel, into: &buf)
        FfiConverterSequenceTypePeerConfig.write(value.peers, into: &buf)
        FfiConverterTypeIpv4Addr.write(value.ipv4Gateway, into: &buf)
        FfiConverterOptionTypeIpv6Addr.write(value.ipv6Gateway, into: &buf)
        FfiConverterUInt16.write(value.mtu, into: &buf)
    }
}


public func FfiConverterTypeWgConfig_lift(_ buf: RustBuffer) throws -> WgConfig {
    return try FfiConverterTypeWgConfig.lift(buf)
}

public func FfiConverterTypeWgConfig_lower(_ value: WgConfig) -> RustBuffer {
    return FfiConverterTypeWgConfig.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum EntryPoint {
    
    case gateway(identity: NodeIdentity
    )
    case location(location: String
    )
    case randomLowLatency
    case random
}


public struct FfiConverterTypeEntryPoint: FfiConverterRustBuffer {
    typealias SwiftType = EntryPoint

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EntryPoint {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .gateway(identity: try FfiConverterTypeNodeIdentity.read(from: &buf)
        )
        
        case 2: return .location(location: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .randomLowLatency
        
        case 4: return .random
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EntryPoint, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .gateway(identity):
            writeInt(&buf, Int32(1))
            FfiConverterTypeNodeIdentity.write(identity, into: &buf)
            
        
        case let .location(location):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(location, into: &buf)
            
        
        case .randomLowLatency:
            writeInt(&buf, Int32(3))
        
        
        case .random:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeEntryPoint_lift(_ buf: RustBuffer) throws -> EntryPoint {
    return try FfiConverterTypeEntryPoint.lift(buf)
}

public func FfiConverterTypeEntryPoint_lower(_ value: EntryPoint) -> RustBuffer {
    return FfiConverterTypeEntryPoint.lower(value)
}



extension EntryPoint: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ExitPoint {
    
    case address(address: Recipient
    )
    case gateway(identity: NodeIdentity
    )
    case location(location: String
    )
}


public struct FfiConverterTypeExitPoint: FfiConverterRustBuffer {
    typealias SwiftType = ExitPoint

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExitPoint {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .address(address: try FfiConverterTypeRecipient.read(from: &buf)
        )
        
        case 2: return .gateway(identity: try FfiConverterTypeNodeIdentity.read(from: &buf)
        )
        
        case 3: return .location(location: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ExitPoint, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .address(address):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRecipient.write(address, into: &buf)
            
        
        case let .gateway(identity):
            writeInt(&buf, Int32(2))
            FfiConverterTypeNodeIdentity.write(identity, into: &buf)
            
        
        case let .location(location):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(location, into: &buf)
            
        }
    }
}


public func FfiConverterTypeExitPoint_lift(_ buf: RustBuffer) throws -> ExitPoint {
    return try FfiConverterTypeExitPoint.lift(buf)
}

public func FfiConverterTypeExitPoint_lower(_ value: ExitPoint) -> RustBuffer {
    return FfiConverterTypeExitPoint.lower(value)
}



extension ExitPoint: Equatable, Hashable {}




public enum FfiError {

    
    
    case InvalidValueUniffi
    case FdNotFound
    case VpnNotStopped
    case VpnNotStarted
    case VpnAlreadyRunning
    case VpnNotRunning
    case LibError(inner: String
    )
    case GatewayDirectoryError(inner: String
    )
}


public struct FfiConverterTypeFFIError: FfiConverterRustBuffer {
    typealias SwiftType = FfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidValueUniffi
        case 2: return .FdNotFound
        case 3: return .VpnNotStopped
        case 4: return .VpnNotStarted
        case 5: return .VpnAlreadyRunning
        case 6: return .VpnNotRunning
        case 7: return .LibError(
            inner: try FfiConverterString.read(from: &buf)
            )
        case 8: return .GatewayDirectoryError(
            inner: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidValueUniffi:
            writeInt(&buf, Int32(1))
        
        
        case .FdNotFound:
            writeInt(&buf, Int32(2))
        
        
        case .VpnNotStopped:
            writeInt(&buf, Int32(3))
        
        
        case .VpnNotStarted:
            writeInt(&buf, Int32(4))
        
        
        case .VpnAlreadyRunning:
            writeInt(&buf, Int32(5))
        
        
        case .VpnNotRunning:
            writeInt(&buf, Int32(6))
        
        
        case let .LibError(inner):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(inner, into: &buf)
            
        
        case let .GatewayDirectoryError(inner):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(inner, into: &buf)
            
        }
    }
}


extension FfiError: Equatable, Hashable {}

extension FfiError: Error { }

fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIpAddr: FfiConverterRustBuffer {
    typealias SwiftType = IpAddr?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIpAddr.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIpAddr.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIpv6Addr: FfiConverterRustBuffer {
    typealias SwiftType = Ipv6Addr?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIpv6Addr.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIpv6Addr.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePresharedKey: FfiConverterRustBuffer {
    typealias SwiftType = PresharedKey?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePresharedKey.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePresharedKey.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceTypeLocation: FfiConverterRustBuffer {
    typealias SwiftType = [Location]

    public static func write(_ value: [Location], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLocation.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Location] {
        let len: Int32 = try readInt(&buf)
        var seq = [Location]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLocation.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePeerConfig: FfiConverterRustBuffer {
    typealias SwiftType = [PeerConfig]

    public static func write(_ value: [PeerConfig], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePeerConfig.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PeerConfig] {
        let len: Int32 = try readInt(&buf)
        var seq = [PeerConfig]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePeerConfig.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpAddr: FfiConverterRustBuffer {
    typealias SwiftType = [IpAddr]

    public static func write(_ value: [IpAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IpAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [IpAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpAddr.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpNetwork: FfiConverterRustBuffer {
    typealias SwiftType = [IpNetwork]

    public static func write(_ value: [IpNetwork], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpNetwork.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IpNetwork] {
        let len: Int32 = try readInt(&buf)
        var seq = [IpNetwork]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpNetwork.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias IpAddr = String
public struct FfiConverterTypeIpAddr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IpAddr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: IpAddr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> IpAddr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: IpAddr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpAddr_lift(_ value: RustBuffer) throws -> IpAddr {
    return try FfiConverterTypeIpAddr.lift(value)
}

public func FfiConverterTypeIpAddr_lower(_ value: IpAddr) -> RustBuffer {
    return FfiConverterTypeIpAddr.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias IpNetwork = String
public struct FfiConverterTypeIpNetwork: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IpNetwork {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: IpNetwork, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> IpNetwork {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: IpNetwork) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpNetwork_lift(_ value: RustBuffer) throws -> IpNetwork {
    return try FfiConverterTypeIpNetwork.lift(value)
}

public func FfiConverterTypeIpNetwork_lower(_ value: IpNetwork) -> RustBuffer {
    return FfiConverterTypeIpNetwork.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ipv4Addr = String
public struct FfiConverterTypeIpv4Addr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Addr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ipv4Addr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ipv4Addr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ipv4Addr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpv4Addr_lift(_ value: RustBuffer) throws -> Ipv4Addr {
    return try FfiConverterTypeIpv4Addr.lift(value)
}

public func FfiConverterTypeIpv4Addr_lower(_ value: Ipv4Addr) -> RustBuffer {
    return FfiConverterTypeIpv4Addr.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ipv6Addr = String
public struct FfiConverterTypeIpv6Addr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Addr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ipv6Addr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ipv6Addr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ipv6Addr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpv6Addr_lift(_ value: RustBuffer) throws -> Ipv6Addr {
    return try FfiConverterTypeIpv6Addr.lift(value)
}

public func FfiConverterTypeIpv6Addr_lower(_ value: Ipv6Addr) -> RustBuffer {
    return FfiConverterTypeIpv6Addr.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias NodeIdentity = String
public struct FfiConverterTypeNodeIdentity: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeIdentity {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: NodeIdentity, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> NodeIdentity {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: NodeIdentity) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeNodeIdentity_lift(_ value: RustBuffer) throws -> NodeIdentity {
    return try FfiConverterTypeNodeIdentity.lift(value)
}

public func FfiConverterTypeNodeIdentity_lower(_ value: NodeIdentity) -> RustBuffer {
    return FfiConverterTypeNodeIdentity.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PresharedKey = String
public struct FfiConverterTypePresharedKey: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PresharedKey {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PresharedKey, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PresharedKey {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PresharedKey) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypePresharedKey_lift(_ value: RustBuffer) throws -> PresharedKey {
    return try FfiConverterTypePresharedKey.lift(value)
}

public func FfiConverterTypePresharedKey_lower(_ value: PresharedKey) -> RustBuffer {
    return FfiConverterTypePresharedKey.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PrivateKey = String
public struct FfiConverterTypePrivateKey: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrivateKey {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PrivateKey, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PrivateKey {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PrivateKey) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypePrivateKey_lift(_ value: RustBuffer) throws -> PrivateKey {
    return try FfiConverterTypePrivateKey.lift(value)
}

public func FfiConverterTypePrivateKey_lower(_ value: PrivateKey) -> RustBuffer {
    return FfiConverterTypePrivateKey.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PublicKey = String
public struct FfiConverterTypePublicKey: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PublicKey {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PublicKey) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypePublicKey_lift(_ value: RustBuffer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(value)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> RustBuffer {
    return FfiConverterTypePublicKey.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Recipient = String
public struct FfiConverterTypeRecipient: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Recipient {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Recipient, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Recipient {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Recipient) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeRecipient_lift(_ value: RustBuffer) throws -> Recipient {
    return try FfiConverterTypeRecipient.lift(value)
}

public func FfiConverterTypeRecipient_lower(_ value: Recipient) -> RustBuffer {
    return FfiConverterTypeRecipient.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SocketAddr = String
public struct FfiConverterTypeSocketAddr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: SocketAddr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> SocketAddr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: SocketAddr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeSocketAddr_lift(_ value: RustBuffer) throws -> SocketAddr {
    return try FfiConverterTypeSocketAddr.lift(value)
}

public func FfiConverterTypeSocketAddr_lower(_ value: SocketAddr) -> RustBuffer {
    return FfiConverterTypeSocketAddr.lower(value)
}





/**
 * Typealias from the type name used in the UDL file to the custom type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Url = URL


public struct FfiConverterTypeUrl: FfiConverter {

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Url {
        let builtinValue = try FfiConverterString.read(from: &buf)
        return URL(string: builtinValue)!
    }

    public static func write(_ value: Url, into buf: inout [UInt8]) {
        let builtinValue = String(describing: value)
        return FfiConverterString.write(builtinValue, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Url {
        let builtinValue = try FfiConverterString.lift(value)
        return URL(string: builtinValue)!
    }

    public static func lower(_ value: Url) -> RustBuffer {
        let builtinValue = String(describing: value)
        return FfiConverterString.lower(builtinValue)
    }
}


public func FfiConverterTypeUrl_lift(_ value: RustBuffer) throws -> Url {
    return try FfiConverterTypeUrl.lift(value)
}

public func FfiConverterTypeUrl_lower(_ value: Url) -> RustBuffer {
    return FfiConverterTypeUrl.lower(value)
}

public func getGatewayCountries(apiUrl: Url, explorerUrl: Url, exitOnly: Bool)throws  -> [Location] {
    return try  FfiConverterSequenceTypeLocation.lift(try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_nym_vpn_lib_fn_func_getgatewaycountries(
        FfiConverterTypeUrl.lower(apiUrl),
        FfiConverterTypeUrl.lower(explorerUrl),
        FfiConverterBool.lower(exitOnly),$0
    )
})
}
public func getLowLatencyEntryCountry(apiUrl: Url, explorerUrl: Url)throws  -> Location {
    return try  FfiConverterTypeLocation.lift(try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_nym_vpn_lib_fn_func_getlowlatencyentrycountry(
        FfiConverterTypeUrl.lower(apiUrl),
        FfiConverterTypeUrl.lower(explorerUrl),$0
    )
})
}
public func runVpn(config: VpnConfig)throws  {try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_nym_vpn_lib_fn_func_runvpn(
        FfiConverterTypeVPNConfig.lower(config),$0
    )
}
}
public func stopVpn()throws  {try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_nym_vpn_lib_fn_func_stopvpn($0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_nym_vpn_lib_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_getgatewaycountries() != 21142) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_getlowlatencyentrycountry() != 25285) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_runvpn() != 2496) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_stopvpn() != 23819) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_ostunprovider_configure_wg() != 61728) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_ostunprovider_configure_nym() != 42844) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitOSTunProvider()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all