syntax = "proto3";

package nym.vpn;

message Empty {}

// Represents the identity of a gateway
message Gateway {
  string id = 1;
}

// Represents a nym-address of the form id.enc@gateway
message Address {
  string nym_address = 1;
}

message Location {
  string two_letter_iso_country_code = 1;
}

message EntryNode {
  oneof entry_node_enum {
    Gateway gateway = 1;
    Location location = 2;
    Empty random_low_latency = 3;
    Empty random = 4;
  }
}

message ExitNode {
  oneof exit_node_enum {
    Address address = 1;
    Gateway gateway = 2;
    Location location = 3;
    Empty random = 4;
  }
}

message MixConnectedStateDetails {
  Address nym_address = 1;
  Address exit_ipr = 2;
  string ipv4 = 3;
  string ipv6 = 4;
}

message WgConnectedStateDetails {
  string entry_ipv4 = 1;
  string exit_ipv4 = 2;
}

message ConnectedStateDetails {
  oneof connected_state_details {
    MixConnectedStateDetails mix = 1;
    WgConnectedStateDetails wg = 2;
  }
}

message Dns {
  string ip = 1;
}

message Url {
  string url = 1;
}

// Inspired by
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
// Forward slashes '/' are not valid
message UserAgent {
  // Example:
  //    nym-vpn-app
  //    nym-vpnd
  //    nym-vpn-cli
  string application = 1;
  // Format: version[-optional] [(daemon version[-optional])]
  // Example:
  //    0.1.8
  //    0.1.8-debug (0.1.6)
  //    0.2.1-fdroid
  string version = 2;
  // Format: OS; OS version; CPU
  // Example:
  //    Windows NT 6.1; Win64; x64
  //    Macintosh; Intel Mac OS X 14.6.1
  //    iPad; U; CPU OS 3_2 like Mac OS X; en-us
  string platform = 3;
  // Format: git hash [(daemon git hash)]
  // Commit hash should be at least 7 characters long
  // Example:
  //    4h9fk59 (4kdufle)
  //    4h9fk59
  string git_commit = 4;
}

message Endpoints {
  Url nyxd_url = 1;
  Url websocket_url = 2;
  Url api_url = 3;
}

message InfoRequest {}

message InfoResponse {
  string version = 1;
  google.protobuf.Timestamp build_timestamp = 2;
  string triple = 3;
  string platform = 8;
  string git_commit = 4;
  string network_name = 5;
  repeated Endpoints endpoints = 6;
  Url nym_vpn_api_url = 7;
}

message Threshold {
  uint32 min_performance = 1;
}

message ConnectRequest {
  EntryNode entry = 1;
  ExitNode exit = 2;
  Dns dns = 3;
  bool disable_routing = 4;
  bool enable_two_hop = 5;
  bool enable_poisson_rate = 6;
  bool disable_background_cover_traffic = 7;
  bool enable_credentials_mode = 8;
  UserAgent user_agent = 12;
  // Optional thresholds
  Threshold min_mixnode_performance = 9;
  Threshold min_gateway_mixnet_performance = 10;
  Threshold min_gateway_vpn_performance = 11;
}

message ConnectResponse {
  bool success = 1;
}

message DisconnectRequest {}
message DisconnectResponse {
  bool success = 1;
}

enum ConnectionStatus {
  STATUS_UNSPECIFIED = 0;
  UNKNOWN = 1;
  NOT_CONNECTED = 2;
  CONNECTING = 3;
  CONNECTED = 4;
  DISCONNECTING = 5;
  CONNECTION_FAILED = 6;
}

import "google/protobuf/timestamp.proto";

message ConnectionDetails {
  Gateway entry_gateway = 1;
  Gateway exit_gateway = 2;
  ConnectedStateDetails protocol_details = 3;
  google.protobuf.Timestamp since = 4;
}

message StatusRequest {}
message StatusResponse {
  ConnectionStatus status = 1;
  ConnectionDetails details = 2;
  Error error = 3;
}

message ConnectionStateChange {
  ConnectionStatus status = 1;
  Error error = 2;
}

message ConnectionStatusUpdate {
  enum StatusType {
    STATUS_TYPE_UNSPECIFIED = 0;

    // Status message that is not mapped to a specific type
    UNKNOWN = 1;

    // Connection to entry gateway established
    // NOTE: currently not implemented by vpnd
    ENTRY_GATEWAY_CONNECTION_ESTABLISHED = 2;

    // Connection to exit router established
    // NOTE: currently not implemented by vpnd
    EXIT_ROUTER_CONNECTION_ESTABLISHED = 3;

    // End-to-end tunnel established and operational
    TUNNEL_END_TO_END_CONNECTION_ESTABLISHED = 4;

    // Entry gateway not routing our mixnet messages
    ENTRY_GATEWAY_NOT_ROUTING_MIXNET_MESSAGES = 5;

    // The exit router is not responding to IPv4 traffic
    EXIT_ROUTER_NOT_RESPONDING_TO_IPV4_PING = 6;

    // The exit router is not responding to IPv6 traffic
    EXIT_ROUTER_NOT_RESPONDING_TO_IPV6_PING = 7;

    // The ip packet router connected to on the exit side is not routing IPv4 traffic
    EXIT_ROUTER_NOT_ROUTING_IPV4_TRAFFIC = 8;

    // The ip packet router connected to on the exit side is not routing IPv6 traffic
    EXIT_ROUTER_NOT_ROUTING_IPV6_TRAFFIC = 9;

    // The end-to-end IPv4 connection appears to be operation correctly
    CONNECTION_OK_IPV4 = 10;

    // The end-to-end IPv6 connection appears to be operation correctly
    CONNECTION_OK_IPV6 = 11;

    // Remaining bandwidth available
    REMAINING_BANDWIDTH = 12;

    // The user has run out of available bandwidth
    NO_BANDWIDTH = 13;

    // Wireguard tunnel errors sent through the status channel. This error case
    // will go away in the future.
    WG_TUNNEL_ERROR = 14;
  }

  StatusType kind = 1;

  // Detailed message for logging and debugging
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

message Error {
  enum ErrorType {
    ERROR_TYPE_UNSPECIFIED = 0;

    // An error that was not explicitly handled by the vpn service. This should
    // not happen but it will while we iterate on mapping out all possible
    // errors
    UNHANDLED = 1;

    // The vpn exiting with an error that isn't handled by the automatic
    // conversion. If this happens it's a bug.
    UNHANDLED_EXIT = 49;

    // An internal error that indicates a programmer error and should not
    // happen. If it did an invariant was probably broken at some point.
    INTERNAL = 33;

    // If the credential storage does not contain any valid credentials when
    // connecting
    NO_VALID_CREDENTIALS = 2;

    // Generic connection timeout. This could happen  in a number of contexts,
    // and the provided details needs to be investigated to determine what went
    // wrong
    TIMEOUT = 6;

    // Timeout starting the mixnet client
    MIXNET_TIMEOUT = 7;

    // Failed to setup the mixnet storage paths
    MIXNET_STORAGE_PATHS = 19;

    // Failed to create a mixnet client with default storage setup
    MIXNET_DEFAULT_STORAGE = 20;

    // Failed to build the mixnet client instance
    MIXNET_BUILD_CLIENT = 21;

    // Failed to connect to the mixnet
    MIXNET_CONNECT = 22;

    // Failed to connect to the mixnet entry gateway
    MIXNET_ENTRY_GATEWAY = 23;

    // Failed to connect to the IPR
    IPR_FAILED_TO_CONNECT = 25;

    // Failed to connect to one of the authenticators
    AUTHENTICATOR_FAILED_TO_CONNECT = 34;

    // Failed to connect to the authenticator, timeout waiting for the connect
    // response
    AUTHENTICATOR_CONNECT_TIMEOUT = 35;

    // Failed to connect to the authenticator, the response was invalid
    AUTHENTICATOR_INVALID_RESPONSE = 36;

    // Failed to verify the registration data provided by the authenticator
    AUTHENTICATOR_REGISTRATION_DATA_VERIFICATION = 37;

    // Failed to parse the socket addr provided by the authenticator when
    // setting up the wireguard configuration
    AUTHENTICATOR_ENTRY_GATEWAY_SOCKET_ADDR = 38;

    // Failed to parse the IPv4 provided by the authenticator when setting up
    // the wireguard configuration
    AUTHENTICATOR_ENTRY_GATEWAY_IPV4 = 39;

    // The authenticator responded with a response tagged with a version we
    // can't understand.
    AUTHENTICATOR_WRONG_VERSION = 40;

    // The authenticator, or someone else, responded with a reply that we can't
    // read.
    AUTHENTICATOR_MALFORMED_REPLY = 41;

    // Not authenticator address found for the gateway(s) we're trying to use
    AUTHENTICATOR_ADDRESS_NOT_FOUND = 47;

    // Authentication with the authenticators was not possible, as we we don't
    // have addresses for them. This is likely an internal programming error.
    AUTHENTICATOR_AUTHENTICATION_NOT_POSSIBLE = 48;

    // Looking up gateways can fail in a number of ways.
    GATEWAY_DIRECTORY = 8;

    // Failing to lookup gateways
    GATEWAY_DIRECTORY_LOOKUP_GATEWAYS = 9;

    // Failing to lookup gateway identity
    GATEWAY_DIRECTORY_LOOKUP_GATEWAY_IDENTITY = 10;

    // Failing to lookup the IPR address
    GATEWAY_DIRECTORY_LOOKUP_ROUTER_ADDRESS = 11;

    // Failing to lookup the gateway IP
    GATEWAY_DIRECTORY_LOOKUP_IP = 12;

    // Failing to lookup the entry gateway
    GATEWAY_DIRECTORY_ENTRY = 13;

    // Entry gateway identity not found
    GATEWAY_DIRECTORY_ENTRY_ID = 24;

    // Failing to lookup the entry gateway for a given location
    GATEWAY_DIRECTORY_ENTRY_LOCATION = 14;

    // Failing to lookup the exit gateway
    GATEWAY_DIRECTORY_EXIT = 15;

    // Failing to lookup the exit gateway for a given location
    GATEWAY_DIRECTORY_EXIT_LOCATION = 16;

    // Invalid configuration attempted, with the same entry and exit gateway
    GATEWAY_DIRECTORY_SAME_ENTRY_AND_EXIT_GW = 17;

    // Client ran out of allocated bandwidth
    OUT_OF_BANDWIDTH = 18;

    // The user has no available bandwidth to setup tunnel
    OUT_OF_BANDWIDTH_WHEN_SETTING_UP_TUNNEL = 26;

    // Failed to bring up the wg interface up
    BRING_INTERFACE_UP = 27;

    // Failed to init firewall subsystem
    FIREWALL_INIT = 28;

    // Failed to reset the firewall policy
    FIREWALL_RESET_POLICY = 29;

    // Failed to init the DNS subsystem
    DNS_INIT = 30;

    // Failed to set DNS
    DNS_SET = 31;

    // Failed to find the default network interface
    FIND_DEFAULT_INTERFACE = 32;

    // Failed to add ipv6 default route to capture ipv6 traffic
    ADD_IPV6_ROUTE = 42;

    // General failure for the tun device
    TUN = 43;

    // General failure for routing
    ROUTING = 44;

    // General failure setting up the wireguard configuration
    WIREGUARD_CONFIG = 45;

    // General failure for the mixnet connection monitor
    MIXNET_CONNECTION_MONITOR = 46;
  }

  ErrorType kind = 1;

  // Detailed error message for logging and debugging
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

message ImportUserCredentialRequest {
  bytes credential = 1;
}

message ImportUserCredentialResponse {
  bool success = 1;
  ImportError error = 2;
  google.protobuf.Timestamp expiry = 3;
}

message ImportError {
  enum ImportErrorType {
    IMPORT_ERROR_TYPE_UNSPECIFIED = 0;

    // Credential import is not supported while the vpn is already connected
    VPN_RUNNING = 1;

    // Importing the same credential twice will return an error
    CREDENTIAL_ALREADY_IMPORTED = 2;

    // If the credential storage fails in some way. It's very likely due to a
    // permission error.
    STORAGE_ERROR = 3;

    // If the provided credential fails to deserialize. This is probably due to
    // incorrect credential, but it could also be due to other internal reasons
    DESERIALIZATION_FAILURE = 4;

    // Credentials have a date when they expire
    CREDENTIAL_EXPIRED = 5;
  }

  ImportErrorType kind = 1;

  // Detailed error message for logging and debugging
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

message AsEntry {
  bool can_connect = 1;
  bool can_route = 2;
}

message AsExit {
  bool can_connect = 1;
  bool can_route_ip_v4 = 2;
  bool can_route_ip_v6 = 3;
  bool can_route_ip_external_v4 = 4;
  bool can_route_ip_external_v6 = 5;
}

message WgProbeResult {
  bool can_register = 1;
  bool can_handshake = 2;
  bool can_resolve_dns = 3;
  float ping_hosts_performance = 4;
  float ping_ips_performance = 5;
}

message ProbeOutcome {
  AsEntry as_entry = 1;
  AsExit as_exit = 2;
  WgProbeResult wg = 3;
}

message Probe {
  google.protobuf.Timestamp last_updated_utc = 1;
  ProbeOutcome outcome = 2;
}

message GatewayResponse {
  Gateway id = 1;
  Location location = 2;
  Probe last_probe = 3;
}

enum GatewayType {
  GATEWAY_TYPE_UNSPECIFIED = 0;
  MIXNET_ENTRY = 1;
  MIXNET_EXIT = 2;
  WG = 3;
}

message ListGatewaysRequest {
  GatewayType kind = 1;
  UserAgent user_agent = 4;
  // Optional thresholds
  Threshold min_mixnet_performance = 2;
  Threshold min_vpn_performance = 3;
}

message ListGatewaysResponse {
  repeated GatewayResponse gateways = 1;
}

message ListCountriesRequest {
  GatewayType kind = 1;
  UserAgent user_agent = 4;
  // Optional thresholds
  Threshold min_mixnet_performance = 2;
  Threshold min_vpn_performance = 3;
}

message ListCountriesResponse {
  repeated Location countries = 1;
}

message StoreAccountRequest {
  string mnemonic = 1;
  uint32 nonce = 2;
}

message StoreAccountResponse {
  bool success = 1;
  AccountError error = 2;
}

message GetAccountSummaryRequest {}

message GetAccountSummaryResponse {
  string json = 1;
  AccountError error = 2;
}

message GetDevicesRequest {}
message GetDevicesResponse {
  string json = 1;
  AccountError error = 2;
}

message RegisterDeviceRequest {}

message RegisterDeviceResponse {
  string json = 1;
  AccountError error = 2;
}

message RequestZkNymRequest {}

message RequestZkNymResponse {
  string json = 1;
  AccountError error = 2;
}

message GetDeviceZkNymsRequest {}

message GetDeviceZkNymsResponse {
  string json = 1;
  AccountError error = 2;
}

message GetFreePassesRequest {}

message GetFreePassesResponse {
  string json = 1;
  AccountError error = 2;
}

message ApplyFreepassRequest {
  string code = 1;
}

message ApplyFreepassResponse {
  string json = 1;
  AccountError error = 2;
}

message AccountError {
  enum AccountErrorType {
    STORE_ACCOUNT_ERROR_UNSPECIFIED = 0;

    // The provided mnemonic was not able to be parsed
    INVALID_MNEMONIC = 1;

    // General error from the storage backend
    STORAGE = 2;
  }

  AccountErrorType kind = 1;

  // Detailed error message for logging and debugging
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

service NymVpnd {
  rpc Info (InfoRequest) returns (InfoResponse) {}
  rpc VpnConnect (ConnectRequest) returns (ConnectResponse) {}
  rpc VpnDisconnect (DisconnectRequest) returns (DisconnectResponse) {}
  rpc VpnStatus (StatusRequest) returns (StatusResponse) {}
  rpc ImportUserCredential (ImportUserCredentialRequest) returns (ImportUserCredentialResponse) {}
  rpc ListenToConnectionStateChanges (Empty) returns (stream ConnectionStateChange) {}
  rpc ListenToConnectionStatus (Empty) returns (stream ConnectionStatusUpdate) {}

  rpc ListGateways (ListGatewaysRequest) returns (ListGatewaysResponse) {}
  rpc ListCountries (ListCountriesRequest) returns (ListCountriesResponse) {}

  // Unstable
  rpc StoreAccount (StoreAccountRequest) returns (StoreAccountResponse) {}
  rpc GetAccountSummary (GetAccountSummaryRequest) returns (GetAccountSummaryResponse) {}
  rpc GetDevices (GetDevicesRequest) returns (GetDevicesResponse) {}
  rpc RegisterDevice (RegisterDeviceRequest) returns (RegisterDeviceResponse) {}
  rpc RequestZkNym (RequestZkNymRequest) returns (RequestZkNymResponse) {}
  rpc GetDeviceZkNyms (GetDeviceZkNymsRequest) returns (GetDeviceZkNymsResponse) {}
  rpc GetFreePasses (GetFreePassesRequest) returns (GetFreePassesResponse) {}
  rpc ApplyFreepass (ApplyFreepassRequest) returns (ApplyFreepassResponse) {}
}

