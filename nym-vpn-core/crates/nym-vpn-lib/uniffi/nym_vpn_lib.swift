// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(nym_vpn_libFFI)
import nym_vpn_libFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_nym_vpn_lib_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_nym_vpn_lib_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}




/**
 * Types observing network changes.
 */
public protocol OsDefaultPathObserver : AnyObject {
    
    func onDefaultPathChange(newPath: OsDefaultPath) 
    
}

/**
 * Types observing network changes.
 */
open class OsDefaultPathObserverImpl:
    OsDefaultPathObserver {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nym_vpn_lib_fn_clone_osdefaultpathobserver(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_nym_vpn_lib_fn_free_osdefaultpathobserver(pointer, $0) }
    }

    

    
open func onDefaultPathChange(newPath: OsDefaultPath) {try! rustCall() {
    uniffi_nym_vpn_lib_fn_method_osdefaultpathobserver_on_default_path_change(self.uniffiClonePointer(),
        FfiConverterTypeOSDefaultPath.lower(newPath),$0
    )
}
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceOSDefaultPathObserver {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOsDefaultPathObserver = UniffiVTableCallbackInterfaceOsDefaultPathObserver(
        onDefaultPathChange: { (
            uniffiHandle: UInt64,
            newPath: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeOSDefaultPathObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onDefaultPathChange(
                     newPath: try FfiConverterTypeOSDefaultPath.lift(newPath)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeOSDefaultPathObserver.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OSDefaultPathObserver: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOSDefaultPathObserver() {
    uniffi_nym_vpn_lib_fn_init_callback_vtable_osdefaultpathobserver(&UniffiCallbackInterfaceOSDefaultPathObserver.vtable)
}

public struct FfiConverterTypeOSDefaultPathObserver: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OsDefaultPathObserver>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OsDefaultPathObserver

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OsDefaultPathObserver {
        return OsDefaultPathObserverImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OsDefaultPathObserver) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OsDefaultPathObserver {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OsDefaultPathObserver, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeOSDefaultPathObserver_lift(_ pointer: UnsafeMutableRawPointer) throws -> OsDefaultPathObserver {
    return try FfiConverterTypeOSDefaultPathObserver.lift(pointer)
}

public func FfiConverterTypeOSDefaultPathObserver_lower(_ value: OsDefaultPathObserver) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOSDefaultPathObserver.lower(value)
}




public protocol OsTunProvider : AnyObject {
    
    /**
     * Set network settings including tun, dns, ip.
     */
    func setTunnelNetworkSettings(tunnelSettings: TunnelNetworkSettings) async throws 
    
    /**
     * Set or unset the default path observer.
     */
    func setDefaultPathObserver(observer: OsDefaultPathObserver?) throws 
    
}

open class OsTunProviderImpl:
    OsTunProvider {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nym_vpn_lib_fn_clone_ostunprovider(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_nym_vpn_lib_fn_free_ostunprovider(pointer, $0) }
    }

    

    
    /**
     * Set network settings including tun, dns, ip.
     */
open func setTunnelNetworkSettings(tunnelSettings: TunnelNetworkSettings)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_nym_vpn_lib_fn_method_ostunprovider_set_tunnel_network_settings(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTunnelNetworkSettings.lower(tunnelSettings)
                )
            },
            pollFunc: ffi_nym_vpn_lib_rust_future_poll_void,
            completeFunc: ffi_nym_vpn_lib_rust_future_complete_void,
            freeFunc: ffi_nym_vpn_lib_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeVpnError.lift
        )
}
    
    /**
     * Set or unset the default path observer.
     */
open func setDefaultPathObserver(observer: OsDefaultPathObserver?)throws  {try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_method_ostunprovider_set_default_path_observer(self.uniffiClonePointer(),
        FfiConverterOptionTypeOSDefaultPathObserver.lower(observer),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceOSTunProvider {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOsTunProvider = UniffiVTableCallbackInterfaceOsTunProvider(
        setTunnelNetworkSettings: { (
            uniffiHandle: UInt64,
            tunnelSettings: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeOSTunProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.setTunnelNetworkSettings(
                     tunnelSettings: try FfiConverterTypeTunnelNetworkSettings.lift(tunnelSettings)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeVpnError.lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        setDefaultPathObserver: { (
            uniffiHandle: UInt64,
            observer: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeOSTunProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.setDefaultPathObserver(
                     observer: try FfiConverterOptionTypeOSDefaultPathObserver.lift(observer)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeVpnError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeOSTunProvider.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OSTunProvider: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOSTunProvider() {
    uniffi_nym_vpn_lib_fn_init_callback_vtable_ostunprovider(&UniffiCallbackInterfaceOSTunProvider.vtable)
}

public struct FfiConverterTypeOSTunProvider: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OsTunProvider>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OsTunProvider

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OsTunProvider {
        return OsTunProviderImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OsTunProvider) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OsTunProvider {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OsTunProvider, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeOSTunProvider_lift(_ pointer: UnsafeMutableRawPointer) throws -> OsTunProvider {
    return try FfiConverterTypeOSTunProvider.lift(pointer)
}

public func FfiConverterTypeOSTunProvider_lower(_ value: OsTunProvider) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOSTunProvider.lower(value)
}




public protocol TunnelStatusListener : AnyObject {
    
    func onTunStatusChange(status: TunStatus) 
    
    func onBandwidthStatusChange(status: BandwidthStatus) 
    
    func onConnectionStatusChange(status: ConnectionStatus) 
    
    func onNymVpnStatusChange(status: NymVpnStatus) 
    
    func onExitStatusChange(status: ExitStatus) 
    
}

open class TunnelStatusListenerImpl:
    TunnelStatusListener {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nym_vpn_lib_fn_clone_tunnelstatuslistener(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_nym_vpn_lib_fn_free_tunnelstatuslistener(pointer, $0) }
    }

    

    
open func onTunStatusChange(status: TunStatus) {try! rustCall() {
    uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_tun_status_change(self.uniffiClonePointer(),
        FfiConverterTypeTunStatus.lower(status),$0
    )
}
}
    
open func onBandwidthStatusChange(status: BandwidthStatus) {try! rustCall() {
    uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_bandwidth_status_change(self.uniffiClonePointer(),
        FfiConverterTypeBandwidthStatus.lower(status),$0
    )
}
}
    
open func onConnectionStatusChange(status: ConnectionStatus) {try! rustCall() {
    uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_connection_status_change(self.uniffiClonePointer(),
        FfiConverterTypeConnectionStatus.lower(status),$0
    )
}
}
    
open func onNymVpnStatusChange(status: NymVpnStatus) {try! rustCall() {
    uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_nym_vpn_status_change(self.uniffiClonePointer(),
        FfiConverterTypeNymVpnStatus.lower(status),$0
    )
}
}
    
open func onExitStatusChange(status: ExitStatus) {try! rustCall() {
    uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_exit_status_change(self.uniffiClonePointer(),
        FfiConverterTypeExitStatus.lower(status),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceTunnelStatusListener {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceTunnelStatusListener = UniffiVTableCallbackInterfaceTunnelStatusListener(
        onTunStatusChange: { (
            uniffiHandle: UInt64,
            status: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeTunnelStatusListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onTunStatusChange(
                     status: try FfiConverterTypeTunStatus.lift(status)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onBandwidthStatusChange: { (
            uniffiHandle: UInt64,
            status: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeTunnelStatusListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onBandwidthStatusChange(
                     status: try FfiConverterTypeBandwidthStatus.lift(status)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onConnectionStatusChange: { (
            uniffiHandle: UInt64,
            status: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeTunnelStatusListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onConnectionStatusChange(
                     status: try FfiConverterTypeConnectionStatus.lift(status)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onNymVpnStatusChange: { (
            uniffiHandle: UInt64,
            status: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeTunnelStatusListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onNymVpnStatusChange(
                     status: try FfiConverterTypeNymVpnStatus.lift(status)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onExitStatusChange: { (
            uniffiHandle: UInt64,
            status: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeTunnelStatusListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onExitStatusChange(
                     status: try FfiConverterTypeExitStatus.lift(status)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeTunnelStatusListener.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface TunnelStatusListener: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitTunnelStatusListener() {
    uniffi_nym_vpn_lib_fn_init_callback_vtable_tunnelstatuslistener(&UniffiCallbackInterfaceTunnelStatusListener.vtable)
}

public struct FfiConverterTypeTunnelStatusListener: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<TunnelStatusListener>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TunnelStatusListener

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TunnelStatusListener {
        return TunnelStatusListenerImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TunnelStatusListener) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TunnelStatusListener {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TunnelStatusListener, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeTunnelStatusListener_lift(_ pointer: UnsafeMutableRawPointer) throws -> TunnelStatusListener {
    return try FfiConverterTypeTunnelStatusListener.lift(pointer)
}

public func FfiConverterTypeTunnelStatusListener_lower(_ value: TunnelStatusListener) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTunnelStatusListener.lower(value)
}


public struct DnsSettings {
    /**
     * DNS IP addresses.
     */
    public var servers: [IpAddr]
    /**
     * DNS server search domains.
     */
    public var searchDomains: [String]?
    /**
     * Which domains to resolve using these DNS settings.
     */
    public var matchDomains: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * DNS IP addresses.
         */servers: [IpAddr], 
        /**
         * DNS server search domains.
         */searchDomains: [String]?, 
        /**
         * Which domains to resolve using these DNS settings.
         */matchDomains: [String]?) {
        self.servers = servers
        self.searchDomains = searchDomains
        self.matchDomains = matchDomains
    }
}



extension DnsSettings: Equatable, Hashable {
    public static func ==(lhs: DnsSettings, rhs: DnsSettings) -> Bool {
        if lhs.servers != rhs.servers {
            return false
        }
        if lhs.searchDomains != rhs.searchDomains {
            return false
        }
        if lhs.matchDomains != rhs.matchDomains {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(servers)
        hasher.combine(searchDomains)
        hasher.combine(matchDomains)
    }
}


public struct FfiConverterTypeDnsSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DnsSettings {
        return
            try DnsSettings(
                servers: FfiConverterSequenceTypeIpAddr.read(from: &buf), 
                searchDomains: FfiConverterOptionSequenceString.read(from: &buf), 
                matchDomains: FfiConverterOptionSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: DnsSettings, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeIpAddr.write(value.servers, into: &buf)
        FfiConverterOptionSequenceString.write(value.searchDomains, into: &buf)
        FfiConverterOptionSequenceString.write(value.matchDomains, into: &buf)
    }
}


public func FfiConverterTypeDnsSettings_lift(_ buf: RustBuffer) throws -> DnsSettings {
    return try FfiConverterTypeDnsSettings.lift(buf)
}

public func FfiConverterTypeDnsSettings_lower(_ value: DnsSettings) -> RustBuffer {
    return FfiConverterTypeDnsSettings.lower(value)
}


public struct GatewayMinPerformance {
    public var mixnetMinPerformance: UInt64?
    public var vpnMinPerformance: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(mixnetMinPerformance: UInt64?, vpnMinPerformance: UInt64?) {
        self.mixnetMinPerformance = mixnetMinPerformance
        self.vpnMinPerformance = vpnMinPerformance
    }
}



extension GatewayMinPerformance: Equatable, Hashable {
    public static func ==(lhs: GatewayMinPerformance, rhs: GatewayMinPerformance) -> Bool {
        if lhs.mixnetMinPerformance != rhs.mixnetMinPerformance {
            return false
        }
        if lhs.vpnMinPerformance != rhs.vpnMinPerformance {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(mixnetMinPerformance)
        hasher.combine(vpnMinPerformance)
    }
}


public struct FfiConverterTypeGatewayMinPerformance: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GatewayMinPerformance {
        return
            try GatewayMinPerformance(
                mixnetMinPerformance: FfiConverterOptionUInt64.read(from: &buf), 
                vpnMinPerformance: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: GatewayMinPerformance, into buf: inout [UInt8]) {
        FfiConverterOptionUInt64.write(value.mixnetMinPerformance, into: &buf)
        FfiConverterOptionUInt64.write(value.vpnMinPerformance, into: &buf)
    }
}


public func FfiConverterTypeGatewayMinPerformance_lift(_ buf: RustBuffer) throws -> GatewayMinPerformance {
    return try FfiConverterTypeGatewayMinPerformance.lift(buf)
}

public func FfiConverterTypeGatewayMinPerformance_lower(_ value: GatewayMinPerformance) -> RustBuffer {
    return FfiConverterTypeGatewayMinPerformance.lower(value)
}


public struct Ipv4Settings {
    /**
     * IPv4 addresses that will be set on tunnel interface.
     */
    public var addresses: [Ipv4Network]
    /**
     * Traffic matching these routes will be routed over the tun interface.
     */
    public var includedRoutes: [Ipv4Route]?
    /**
     * Traffic matching these routes will be routed over the primary physical interface.
     */
    public var excludedRoutes: [Ipv4Route]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * IPv4 addresses that will be set on tunnel interface.
         */addresses: [Ipv4Network], 
        /**
         * Traffic matching these routes will be routed over the tun interface.
         */includedRoutes: [Ipv4Route]?, 
        /**
         * Traffic matching these routes will be routed over the primary physical interface.
         */excludedRoutes: [Ipv4Route]?) {
        self.addresses = addresses
        self.includedRoutes = includedRoutes
        self.excludedRoutes = excludedRoutes
    }
}



extension Ipv4Settings: Equatable, Hashable {
    public static func ==(lhs: Ipv4Settings, rhs: Ipv4Settings) -> Bool {
        if lhs.addresses != rhs.addresses {
            return false
        }
        if lhs.includedRoutes != rhs.includedRoutes {
            return false
        }
        if lhs.excludedRoutes != rhs.excludedRoutes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addresses)
        hasher.combine(includedRoutes)
        hasher.combine(excludedRoutes)
    }
}


public struct FfiConverterTypeIpv4Settings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Settings {
        return
            try Ipv4Settings(
                addresses: FfiConverterSequenceTypeIpv4Network.read(from: &buf), 
                includedRoutes: FfiConverterOptionSequenceTypeIpv4Route.read(from: &buf), 
                excludedRoutes: FfiConverterOptionSequenceTypeIpv4Route.read(from: &buf)
        )
    }

    public static func write(_ value: Ipv4Settings, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeIpv4Network.write(value.addresses, into: &buf)
        FfiConverterOptionSequenceTypeIpv4Route.write(value.includedRoutes, into: &buf)
        FfiConverterOptionSequenceTypeIpv4Route.write(value.excludedRoutes, into: &buf)
    }
}


public func FfiConverterTypeIpv4Settings_lift(_ buf: RustBuffer) throws -> Ipv4Settings {
    return try FfiConverterTypeIpv4Settings.lift(buf)
}

public func FfiConverterTypeIpv4Settings_lower(_ value: Ipv4Settings) -> RustBuffer {
    return FfiConverterTypeIpv4Settings.lower(value)
}


public struct Ipv6Settings {
    /**
     * IPv4 addresses that will be set on tunnel interface.
     */
    public var addresses: [Ipv6Network]
    /**
     * Traffic matching these routes will be routed over the tun interface.
     */
    public var includedRoutes: [Ipv6Route]?
    /**
     * Traffic matching these routes will be routed over the primary physical interface.
     */
    public var excludedRoutes: [Ipv6Route]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * IPv4 addresses that will be set on tunnel interface.
         */addresses: [Ipv6Network], 
        /**
         * Traffic matching these routes will be routed over the tun interface.
         */includedRoutes: [Ipv6Route]?, 
        /**
         * Traffic matching these routes will be routed over the primary physical interface.
         */excludedRoutes: [Ipv6Route]?) {
        self.addresses = addresses
        self.includedRoutes = includedRoutes
        self.excludedRoutes = excludedRoutes
    }
}



extension Ipv6Settings: Equatable, Hashable {
    public static func ==(lhs: Ipv6Settings, rhs: Ipv6Settings) -> Bool {
        if lhs.addresses != rhs.addresses {
            return false
        }
        if lhs.includedRoutes != rhs.includedRoutes {
            return false
        }
        if lhs.excludedRoutes != rhs.excludedRoutes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addresses)
        hasher.combine(includedRoutes)
        hasher.combine(excludedRoutes)
    }
}


public struct FfiConverterTypeIpv6Settings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Settings {
        return
            try Ipv6Settings(
                addresses: FfiConverterSequenceTypeIpv6Network.read(from: &buf), 
                includedRoutes: FfiConverterOptionSequenceTypeIpv6Route.read(from: &buf), 
                excludedRoutes: FfiConverterOptionSequenceTypeIpv6Route.read(from: &buf)
        )
    }

    public static func write(_ value: Ipv6Settings, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeIpv6Network.write(value.addresses, into: &buf)
        FfiConverterOptionSequenceTypeIpv6Route.write(value.includedRoutes, into: &buf)
        FfiConverterOptionSequenceTypeIpv6Route.write(value.excludedRoutes, into: &buf)
    }
}


public func FfiConverterTypeIpv6Settings_lift(_ buf: RustBuffer) throws -> Ipv6Settings {
    return try FfiConverterTypeIpv6Settings.lift(buf)
}

public func FfiConverterTypeIpv6Settings_lower(_ value: Ipv6Settings) -> RustBuffer {
    return FfiConverterTypeIpv6Settings.lower(value)
}


public struct Location {
    public var twoLetterIsoCountryCode: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(twoLetterIsoCountryCode: String) {
        self.twoLetterIsoCountryCode = twoLetterIsoCountryCode
    }
}



extension Location: Equatable, Hashable {
    public static func ==(lhs: Location, rhs: Location) -> Bool {
        if lhs.twoLetterIsoCountryCode != rhs.twoLetterIsoCountryCode {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(twoLetterIsoCountryCode)
    }
}


public struct FfiConverterTypeLocation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Location {
        return
            try Location(
                twoLetterIsoCountryCode: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Location, into buf: inout [UInt8]) {
        FfiConverterString.write(value.twoLetterIsoCountryCode, into: &buf)
    }
}


public func FfiConverterTypeLocation_lift(_ buf: RustBuffer) throws -> Location {
    return try FfiConverterTypeLocation.lift(buf)
}

public func FfiConverterTypeLocation_lower(_ value: Location) -> RustBuffer {
    return FfiConverterTypeLocation.lower(value)
}


public struct MixConnectionInfo {
    public var nymAddress: Recipient
    public var entryGateway: NodeIdentity

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(nymAddress: Recipient, entryGateway: NodeIdentity) {
        self.nymAddress = nymAddress
        self.entryGateway = entryGateway
    }
}



extension MixConnectionInfo: Equatable, Hashable {
    public static func ==(lhs: MixConnectionInfo, rhs: MixConnectionInfo) -> Bool {
        if lhs.nymAddress != rhs.nymAddress {
            return false
        }
        if lhs.entryGateway != rhs.entryGateway {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(nymAddress)
        hasher.combine(entryGateway)
    }
}


public struct FfiConverterTypeMixConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MixConnectionInfo {
        return
            try MixConnectionInfo(
                nymAddress: FfiConverterTypeRecipient.read(from: &buf), 
                entryGateway: FfiConverterTypeNodeIdentity.read(from: &buf)
        )
    }

    public static func write(_ value: MixConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterTypeRecipient.write(value.nymAddress, into: &buf)
        FfiConverterTypeNodeIdentity.write(value.entryGateway, into: &buf)
    }
}


public func FfiConverterTypeMixConnectionInfo_lift(_ buf: RustBuffer) throws -> MixConnectionInfo {
    return try FfiConverterTypeMixConnectionInfo.lift(buf)
}

public func FfiConverterTypeMixConnectionInfo_lower(_ value: MixConnectionInfo) -> RustBuffer {
    return FfiConverterTypeMixConnectionInfo.lower(value)
}


public struct MixExitConnectionInfo {
    public var exitGateway: NodeIdentity
    public var exitIpr: Recipient
    public var ips: IpPair

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(exitGateway: NodeIdentity, exitIpr: Recipient, ips: IpPair) {
        self.exitGateway = exitGateway
        self.exitIpr = exitIpr
        self.ips = ips
    }
}



extension MixExitConnectionInfo: Equatable, Hashable {
    public static func ==(lhs: MixExitConnectionInfo, rhs: MixExitConnectionInfo) -> Bool {
        if lhs.exitGateway != rhs.exitGateway {
            return false
        }
        if lhs.exitIpr != rhs.exitIpr {
            return false
        }
        if lhs.ips != rhs.ips {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(exitGateway)
        hasher.combine(exitIpr)
        hasher.combine(ips)
    }
}


public struct FfiConverterTypeMixExitConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MixExitConnectionInfo {
        return
            try MixExitConnectionInfo(
                exitGateway: FfiConverterTypeNodeIdentity.read(from: &buf), 
                exitIpr: FfiConverterTypeRecipient.read(from: &buf), 
                ips: FfiConverterTypeIpPair.read(from: &buf)
        )
    }

    public static func write(_ value: MixExitConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterTypeNodeIdentity.write(value.exitGateway, into: &buf)
        FfiConverterTypeRecipient.write(value.exitIpr, into: &buf)
        FfiConverterTypeIpPair.write(value.ips, into: &buf)
    }
}


public func FfiConverterTypeMixExitConnectionInfo_lift(_ buf: RustBuffer) throws -> MixExitConnectionInfo {
    return try FfiConverterTypeMixExitConnectionInfo.lift(buf)
}

public func FfiConverterTypeMixExitConnectionInfo_lower(_ value: MixExitConnectionInfo) -> RustBuffer {
    return FfiConverterTypeMixExitConnectionInfo.lower(value)
}


/**
 * Represents a default network route used by the system.
 */
public struct OsDefaultPath {
    /**
     * Indicates whether the process is able to make connection through the given path.
     */
    public var status: OsPathStatus
    /**
     * Set to true for interfaces that are considered expensive, such as when using cellular data plan.
     */
    public var isExpensive: Bool
    /**
     * Set to true when using a constrained interface, such as when using low-data mode.
     */
    public var isConstrained: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Indicates whether the process is able to make connection through the given path.
         */status: OsPathStatus, 
        /**
         * Set to true for interfaces that are considered expensive, such as when using cellular data plan.
         */isExpensive: Bool, 
        /**
         * Set to true when using a constrained interface, such as when using low-data mode.
         */isConstrained: Bool) {
        self.status = status
        self.isExpensive = isExpensive
        self.isConstrained = isConstrained
    }
}



extension OsDefaultPath: Equatable, Hashable {
    public static func ==(lhs: OsDefaultPath, rhs: OsDefaultPath) -> Bool {
        if lhs.status != rhs.status {
            return false
        }
        if lhs.isExpensive != rhs.isExpensive {
            return false
        }
        if lhs.isConstrained != rhs.isConstrained {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(status)
        hasher.combine(isExpensive)
        hasher.combine(isConstrained)
    }
}


public struct FfiConverterTypeOSDefaultPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OsDefaultPath {
        return
            try OsDefaultPath(
                status: FfiConverterTypeOSPathStatus.read(from: &buf), 
                isExpensive: FfiConverterBool.read(from: &buf), 
                isConstrained: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: OsDefaultPath, into buf: inout [UInt8]) {
        FfiConverterTypeOSPathStatus.write(value.status, into: &buf)
        FfiConverterBool.write(value.isExpensive, into: &buf)
        FfiConverterBool.write(value.isConstrained, into: &buf)
    }
}


public func FfiConverterTypeOSDefaultPath_lift(_ buf: RustBuffer) throws -> OsDefaultPath {
    return try FfiConverterTypeOSDefaultPath.lift(buf)
}

public func FfiConverterTypeOSDefaultPath_lower(_ value: OsDefaultPath) -> RustBuffer {
    return FfiConverterTypeOSDefaultPath.lower(value)
}


/**
 * Tunnel + network settings
 */
public struct TunnelNetworkSettings {
    /**
     * Tunnel remote address, which is mostly of decorative value.
     */
    public var tunnelRemoteAddress: String
    /**
     * IPv4 interface settings.
     */
    public var ipv4Settings: Ipv4Settings?
    /**
     * IPv6 interface settings.
     */
    public var ipv6Settings: Ipv6Settings?
    /**
     * DNS settings.
     */
    public var dnsSettings: DnsSettings?
    /**
     * Tunnel device MTU.
     */
    public var mtu: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Tunnel remote address, which is mostly of decorative value.
         */tunnelRemoteAddress: String, 
        /**
         * IPv4 interface settings.
         */ipv4Settings: Ipv4Settings?, 
        /**
         * IPv6 interface settings.
         */ipv6Settings: Ipv6Settings?, 
        /**
         * DNS settings.
         */dnsSettings: DnsSettings?, 
        /**
         * Tunnel device MTU.
         */mtu: UInt16) {
        self.tunnelRemoteAddress = tunnelRemoteAddress
        self.ipv4Settings = ipv4Settings
        self.ipv6Settings = ipv6Settings
        self.dnsSettings = dnsSettings
        self.mtu = mtu
    }
}



extension TunnelNetworkSettings: Equatable, Hashable {
    public static func ==(lhs: TunnelNetworkSettings, rhs: TunnelNetworkSettings) -> Bool {
        if lhs.tunnelRemoteAddress != rhs.tunnelRemoteAddress {
            return false
        }
        if lhs.ipv4Settings != rhs.ipv4Settings {
            return false
        }
        if lhs.ipv6Settings != rhs.ipv6Settings {
            return false
        }
        if lhs.dnsSettings != rhs.dnsSettings {
            return false
        }
        if lhs.mtu != rhs.mtu {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tunnelRemoteAddress)
        hasher.combine(ipv4Settings)
        hasher.combine(ipv6Settings)
        hasher.combine(dnsSettings)
        hasher.combine(mtu)
    }
}


public struct FfiConverterTypeTunnelNetworkSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TunnelNetworkSettings {
        return
            try TunnelNetworkSettings(
                tunnelRemoteAddress: FfiConverterString.read(from: &buf), 
                ipv4Settings: FfiConverterOptionTypeIpv4Settings.read(from: &buf), 
                ipv6Settings: FfiConverterOptionTypeIpv6Settings.read(from: &buf), 
                dnsSettings: FfiConverterOptionTypeDnsSettings.read(from: &buf), 
                mtu: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: TunnelNetworkSettings, into buf: inout [UInt8]) {
        FfiConverterString.write(value.tunnelRemoteAddress, into: &buf)
        FfiConverterOptionTypeIpv4Settings.write(value.ipv4Settings, into: &buf)
        FfiConverterOptionTypeIpv6Settings.write(value.ipv6Settings, into: &buf)
        FfiConverterOptionTypeDnsSettings.write(value.dnsSettings, into: &buf)
        FfiConverterUInt16.write(value.mtu, into: &buf)
    }
}


public func FfiConverterTypeTunnelNetworkSettings_lift(_ buf: RustBuffer) throws -> TunnelNetworkSettings {
    return try FfiConverterTypeTunnelNetworkSettings.lift(buf)
}

public func FfiConverterTypeTunnelNetworkSettings_lower(_ value: TunnelNetworkSettings) -> RustBuffer {
    return FfiConverterTypeTunnelNetworkSettings.lower(value)
}


public struct UserAgent {
    public var application: String
    public var version: String
    public var platform: String
    public var gitCommit: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(application: String, version: String, platform: String, gitCommit: String) {
        self.application = application
        self.version = version
        self.platform = platform
        self.gitCommit = gitCommit
    }
}



extension UserAgent: Equatable, Hashable {
    public static func ==(lhs: UserAgent, rhs: UserAgent) -> Bool {
        if lhs.application != rhs.application {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.platform != rhs.platform {
            return false
        }
        if lhs.gitCommit != rhs.gitCommit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(application)
        hasher.combine(version)
        hasher.combine(platform)
        hasher.combine(gitCommit)
    }
}


public struct FfiConverterTypeUserAgent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserAgent {
        return
            try UserAgent(
                application: FfiConverterString.read(from: &buf), 
                version: FfiConverterString.read(from: &buf), 
                platform: FfiConverterString.read(from: &buf), 
                gitCommit: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: UserAgent, into buf: inout [UInt8]) {
        FfiConverterString.write(value.application, into: &buf)
        FfiConverterString.write(value.version, into: &buf)
        FfiConverterString.write(value.platform, into: &buf)
        FfiConverterString.write(value.gitCommit, into: &buf)
    }
}


public func FfiConverterTypeUserAgent_lift(_ buf: RustBuffer) throws -> UserAgent {
    return try FfiConverterTypeUserAgent.lift(buf)
}

public func FfiConverterTypeUserAgent_lower(_ value: UserAgent) -> RustBuffer {
    return FfiConverterTypeUserAgent.lower(value)
}


public struct VpnConfig {
    public var apiUrl: Url
    public var vpnApiUrl: Url?
    public var entryGateway: EntryPoint
    public var exitRouter: ExitPoint
    public var enableTwoHop: Bool
    public var tunProvider: OsTunProvider
    public var credentialDataPath: PathBuf?
    public var tunStatusListener: TunnelStatusListener?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(apiUrl: Url, vpnApiUrl: Url?, entryGateway: EntryPoint, exitRouter: ExitPoint, enableTwoHop: Bool, tunProvider: OsTunProvider, credentialDataPath: PathBuf?, tunStatusListener: TunnelStatusListener?) {
        self.apiUrl = apiUrl
        self.vpnApiUrl = vpnApiUrl
        self.entryGateway = entryGateway
        self.exitRouter = exitRouter
        self.enableTwoHop = enableTwoHop
        self.tunProvider = tunProvider
        self.credentialDataPath = credentialDataPath
        self.tunStatusListener = tunStatusListener
    }
}



public struct FfiConverterTypeVPNConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VpnConfig {
        return
            try VpnConfig(
                apiUrl: FfiConverterTypeUrl.read(from: &buf), 
                vpnApiUrl: FfiConverterOptionTypeUrl.read(from: &buf), 
                entryGateway: FfiConverterTypeEntryPoint.read(from: &buf), 
                exitRouter: FfiConverterTypeExitPoint.read(from: &buf), 
                enableTwoHop: FfiConverterBool.read(from: &buf), 
                tunProvider: FfiConverterTypeOSTunProvider.read(from: &buf), 
                credentialDataPath: FfiConverterOptionTypePathBuf.read(from: &buf), 
                tunStatusListener: FfiConverterOptionTypeTunnelStatusListener.read(from: &buf)
        )
    }

    public static func write(_ value: VpnConfig, into buf: inout [UInt8]) {
        FfiConverterTypeUrl.write(value.apiUrl, into: &buf)
        FfiConverterOptionTypeUrl.write(value.vpnApiUrl, into: &buf)
        FfiConverterTypeEntryPoint.write(value.entryGateway, into: &buf)
        FfiConverterTypeExitPoint.write(value.exitRouter, into: &buf)
        FfiConverterBool.write(value.enableTwoHop, into: &buf)
        FfiConverterTypeOSTunProvider.write(value.tunProvider, into: &buf)
        FfiConverterOptionTypePathBuf.write(value.credentialDataPath, into: &buf)
        FfiConverterOptionTypeTunnelStatusListener.write(value.tunStatusListener, into: &buf)
    }
}


public func FfiConverterTypeVPNConfig_lift(_ buf: RustBuffer) throws -> VpnConfig {
    return try FfiConverterTypeVPNConfig.lift(buf)
}

public func FfiConverterTypeVPNConfig_lower(_ value: VpnConfig) -> RustBuffer {
    return FfiConverterTypeVPNConfig.lower(value)
}


public struct WireguardConnectionInfo {
    public var gatewayId: NodeIdentity
    public var publicKey: String
    public var privateIpv4: Ipv4Addr

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(gatewayId: NodeIdentity, publicKey: String, privateIpv4: Ipv4Addr) {
        self.gatewayId = gatewayId
        self.publicKey = publicKey
        self.privateIpv4 = privateIpv4
    }
}



extension WireguardConnectionInfo: Equatable, Hashable {
    public static func ==(lhs: WireguardConnectionInfo, rhs: WireguardConnectionInfo) -> Bool {
        if lhs.gatewayId != rhs.gatewayId {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.privateIpv4 != rhs.privateIpv4 {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(gatewayId)
        hasher.combine(publicKey)
        hasher.combine(privateIpv4)
    }
}


public struct FfiConverterTypeWireguardConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WireguardConnectionInfo {
        return
            try WireguardConnectionInfo(
                gatewayId: FfiConverterTypeNodeIdentity.read(from: &buf), 
                publicKey: FfiConverterString.read(from: &buf), 
                privateIpv4: FfiConverterTypeIpv4Addr.read(from: &buf)
        )
    }

    public static func write(_ value: WireguardConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterTypeNodeIdentity.write(value.gatewayId, into: &buf)
        FfiConverterString.write(value.publicKey, into: &buf)
        FfiConverterTypeIpv4Addr.write(value.privateIpv4, into: &buf)
    }
}


public func FfiConverterTypeWireguardConnectionInfo_lift(_ buf: RustBuffer) throws -> WireguardConnectionInfo {
    return try FfiConverterTypeWireguardConnectionInfo.lift(buf)
}

public func FfiConverterTypeWireguardConnectionInfo_lower(_ value: WireguardConnectionInfo) -> RustBuffer {
    return FfiConverterTypeWireguardConnectionInfo.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BandwidthStatus {
    
    case noBandwidth
    case remainingBandwidth(bandwidth: Int64
    )
}


public struct FfiConverterTypeBandwidthStatus: FfiConverterRustBuffer {
    typealias SwiftType = BandwidthStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BandwidthStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .noBandwidth
        
        case 2: return .remainingBandwidth(bandwidth: try FfiConverterInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BandwidthStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .noBandwidth:
            writeInt(&buf, Int32(1))
        
        
        case let .remainingBandwidth(bandwidth):
            writeInt(&buf, Int32(2))
            FfiConverterInt64.write(bandwidth, into: &buf)
            
        }
    }
}


public func FfiConverterTypeBandwidthStatus_lift(_ buf: RustBuffer) throws -> BandwidthStatus {
    return try FfiConverterTypeBandwidthStatus.lift(buf)
}

public func FfiConverterTypeBandwidthStatus_lower(_ value: BandwidthStatus) -> RustBuffer {
    return FfiConverterTypeBandwidthStatus.lower(value)
}



extension BandwidthStatus: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ConnectionStatus {
    
    case entryGatewayDown
    case exitGatewayDownIpv4
    case exitGatewayDownIpv6
    case exitGatewayRoutingErrorIpv4
    case exitGatewayRoutingErrorIpv6
    case connectedIpv4
    case connectedIpv6
}


public struct FfiConverterTypeConnectionStatus: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .entryGatewayDown
        
        case 2: return .exitGatewayDownIpv4
        
        case 3: return .exitGatewayDownIpv6
        
        case 4: return .exitGatewayRoutingErrorIpv4
        
        case 5: return .exitGatewayRoutingErrorIpv6
        
        case 6: return .connectedIpv4
        
        case 7: return .connectedIpv6
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectionStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .entryGatewayDown:
            writeInt(&buf, Int32(1))
        
        
        case .exitGatewayDownIpv4:
            writeInt(&buf, Int32(2))
        
        
        case .exitGatewayDownIpv6:
            writeInt(&buf, Int32(3))
        
        
        case .exitGatewayRoutingErrorIpv4:
            writeInt(&buf, Int32(4))
        
        
        case .exitGatewayRoutingErrorIpv6:
            writeInt(&buf, Int32(5))
        
        
        case .connectedIpv4:
            writeInt(&buf, Int32(6))
        
        
        case .connectedIpv6:
            writeInt(&buf, Int32(7))
        
        }
    }
}


public func FfiConverterTypeConnectionStatus_lift(_ buf: RustBuffer) throws -> ConnectionStatus {
    return try FfiConverterTypeConnectionStatus.lift(buf)
}

public func FfiConverterTypeConnectionStatus_lower(_ value: ConnectionStatus) -> RustBuffer {
    return FfiConverterTypeConnectionStatus.lower(value)
}



extension ConnectionStatus: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum EntryPoint {
    
    case gateway(identity: NodeIdentity
    )
    case location(location: String
    )
    case randomLowLatency
    case random
}


public struct FfiConverterTypeEntryPoint: FfiConverterRustBuffer {
    typealias SwiftType = EntryPoint

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EntryPoint {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .gateway(identity: try FfiConverterTypeNodeIdentity.read(from: &buf)
        )
        
        case 2: return .location(location: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .randomLowLatency
        
        case 4: return .random
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EntryPoint, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .gateway(identity):
            writeInt(&buf, Int32(1))
            FfiConverterTypeNodeIdentity.write(identity, into: &buf)
            
        
        case let .location(location):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(location, into: &buf)
            
        
        case .randomLowLatency:
            writeInt(&buf, Int32(3))
        
        
        case .random:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeEntryPoint_lift(_ buf: RustBuffer) throws -> EntryPoint {
    return try FfiConverterTypeEntryPoint.lift(buf)
}

public func FfiConverterTypeEntryPoint_lower(_ value: EntryPoint) -> RustBuffer {
    return FfiConverterTypeEntryPoint.lower(value)
}



extension EntryPoint: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ExitPoint {
    
    case address(address: Recipient
    )
    case gateway(identity: NodeIdentity
    )
    case location(location: String
    )
}


public struct FfiConverterTypeExitPoint: FfiConverterRustBuffer {
    typealias SwiftType = ExitPoint

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExitPoint {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .address(address: try FfiConverterTypeRecipient.read(from: &buf)
        )
        
        case 2: return .gateway(identity: try FfiConverterTypeNodeIdentity.read(from: &buf)
        )
        
        case 3: return .location(location: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ExitPoint, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .address(address):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRecipient.write(address, into: &buf)
            
        
        case let .gateway(identity):
            writeInt(&buf, Int32(2))
            FfiConverterTypeNodeIdentity.write(identity, into: &buf)
            
        
        case let .location(location):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(location, into: &buf)
            
        }
    }
}


public func FfiConverterTypeExitPoint_lift(_ buf: RustBuffer) throws -> ExitPoint {
    return try FfiConverterTypeExitPoint.lift(buf)
}

public func FfiConverterTypeExitPoint_lower(_ value: ExitPoint) -> RustBuffer {
    return FfiConverterTypeExitPoint.lower(value)
}



extension ExitPoint: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ExitStatus {
    
    case failure(error: VpnError
    )
    case stopped
}


public struct FfiConverterTypeExitStatus: FfiConverterRustBuffer {
    typealias SwiftType = ExitStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExitStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .failure(error: try FfiConverterTypeVpnError.read(from: &buf)
        )
        
        case 2: return .stopped
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ExitStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .failure(error):
            writeInt(&buf, Int32(1))
            FfiConverterTypeVpnError.write(error, into: &buf)
            
        
        case .stopped:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeExitStatus_lift(_ buf: RustBuffer) throws -> ExitStatus {
    return try FfiConverterTypeExitStatus.lift(buf)
}

public func FfiConverterTypeExitStatus_lower(_ value: ExitStatus) -> RustBuffer {
    return FfiConverterTypeExitStatus.lower(value)
}



extension ExitStatus: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum GatewayType {
    
    case entry
    case exit
    case vpn
}


public struct FfiConverterTypeGatewayType: FfiConverterRustBuffer {
    typealias SwiftType = GatewayType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GatewayType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .entry
        
        case 2: return .exit
        
        case 3: return .vpn
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GatewayType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .entry:
            writeInt(&buf, Int32(1))
        
        
        case .exit:
            writeInt(&buf, Int32(2))
        
        
        case .vpn:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeGatewayType_lift(_ buf: RustBuffer) throws -> GatewayType {
    return try FfiConverterTypeGatewayType.lift(buf)
}

public func FfiConverterTypeGatewayType_lower(_ value: GatewayType) -> RustBuffer {
    return FfiConverterTypeGatewayType.lower(value)
}



extension GatewayType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Ipv4Route {
    
    /**
     * Default IPv4 route (0.0.0.0/0)
     */
    case `default`
    /**
     * Individual IPv4 route
     */
    case specific(destination: Ipv4Addr, subnetMask: Ipv4Addr, gateway: Ipv4Addr?
    )
}


public struct FfiConverterTypeIpv4Route: FfiConverterRustBuffer {
    typealias SwiftType = Ipv4Route

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Route {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`default`
        
        case 2: return .specific(destination: try FfiConverterTypeIpv4Addr.read(from: &buf), subnetMask: try FfiConverterTypeIpv4Addr.read(from: &buf), gateway: try FfiConverterOptionTypeIpv4Addr.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Ipv4Route, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`default`:
            writeInt(&buf, Int32(1))
        
        
        case let .specific(destination,subnetMask,gateway):
            writeInt(&buf, Int32(2))
            FfiConverterTypeIpv4Addr.write(destination, into: &buf)
            FfiConverterTypeIpv4Addr.write(subnetMask, into: &buf)
            FfiConverterOptionTypeIpv4Addr.write(gateway, into: &buf)
            
        }
    }
}


public func FfiConverterTypeIpv4Route_lift(_ buf: RustBuffer) throws -> Ipv4Route {
    return try FfiConverterTypeIpv4Route.lift(buf)
}

public func FfiConverterTypeIpv4Route_lower(_ value: Ipv4Route) -> RustBuffer {
    return FfiConverterTypeIpv4Route.lower(value)
}



extension Ipv4Route: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Ipv6Route {
    
    /**
     * Default IPv6 route (::/0)
     */
    case `default`
    /**
     * Individual IPv6 route
     */
    case specific(destination: Ipv6Addr, prefixLength: UInt8, gateway: Ipv6Addr?
    )
}


public struct FfiConverterTypeIpv6Route: FfiConverterRustBuffer {
    typealias SwiftType = Ipv6Route

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Route {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`default`
        
        case 2: return .specific(destination: try FfiConverterTypeIpv6Addr.read(from: &buf), prefixLength: try FfiConverterUInt8.read(from: &buf), gateway: try FfiConverterOptionTypeIpv6Addr.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Ipv6Route, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`default`:
            writeInt(&buf, Int32(1))
        
        
        case let .specific(destination,prefixLength,gateway):
            writeInt(&buf, Int32(2))
            FfiConverterTypeIpv6Addr.write(destination, into: &buf)
            FfiConverterUInt8.write(prefixLength, into: &buf)
            FfiConverterOptionTypeIpv6Addr.write(gateway, into: &buf)
            
        }
    }
}


public func FfiConverterTypeIpv6Route_lift(_ buf: RustBuffer) throws -> Ipv6Route {
    return try FfiConverterTypeIpv6Route.lift(buf)
}

public func FfiConverterTypeIpv6Route_lower(_ value: Ipv6Route) -> RustBuffer {
    return FfiConverterTypeIpv6Route.lower(value)
}



extension Ipv6Route: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NymVpnStatus {
    
    case mixConnectInfo(mixConnectionInfo: MixConnectionInfo, mixExitConnectionInfo: MixExitConnectionInfo
    )
    case wgConnectInfo(entryConnectionInfo: WireguardConnectionInfo, exitConnectionInfo: WireguardConnectionInfo
    )
}


public struct FfiConverterTypeNymVpnStatus: FfiConverterRustBuffer {
    typealias SwiftType = NymVpnStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NymVpnStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mixConnectInfo(mixConnectionInfo: try FfiConverterTypeMixConnectionInfo.read(from: &buf), mixExitConnectionInfo: try FfiConverterTypeMixExitConnectionInfo.read(from: &buf)
        )
        
        case 2: return .wgConnectInfo(entryConnectionInfo: try FfiConverterTypeWireguardConnectionInfo.read(from: &buf), exitConnectionInfo: try FfiConverterTypeWireguardConnectionInfo.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NymVpnStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .mixConnectInfo(mixConnectionInfo,mixExitConnectionInfo):
            writeInt(&buf, Int32(1))
            FfiConverterTypeMixConnectionInfo.write(mixConnectionInfo, into: &buf)
            FfiConverterTypeMixExitConnectionInfo.write(mixExitConnectionInfo, into: &buf)
            
        
        case let .wgConnectInfo(entryConnectionInfo,exitConnectionInfo):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWireguardConnectionInfo.write(entryConnectionInfo, into: &buf)
            FfiConverterTypeWireguardConnectionInfo.write(exitConnectionInfo, into: &buf)
            
        }
    }
}


public func FfiConverterTypeNymVpnStatus_lift(_ buf: RustBuffer) throws -> NymVpnStatus {
    return try FfiConverterTypeNymVpnStatus.lift(buf)
}

public func FfiConverterTypeNymVpnStatus_lower(_ value: NymVpnStatus) -> RustBuffer {
    return FfiConverterTypeNymVpnStatus.lower(value)
}



extension NymVpnStatus: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum OsPathStatus {
    
    /**
     * The path cannot be evaluated.
     */
    case invalid
    /**
     * The path is ready to be used for network connections.
     */
    case satisfied
    /**
     * The path for network connections is not available, either due to lack of network
     * connectivity or being prohibited by system policy.
     */
    case unsatisfied
    /**
     * The path is not currently satisfied, but may become satisfied upon a connection attempt.
     * This can be due to a service, such as a VPN or a cellular data connection not being activated.
     */
    case satisfiable
    /**
     * Unknown path status was received.
     * The raw variant code is contained in associated value.
     */
    case unknown(Int64
    )
}


public struct FfiConverterTypeOSPathStatus: FfiConverterRustBuffer {
    typealias SwiftType = OsPathStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OsPathStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .invalid
        
        case 2: return .satisfied
        
        case 3: return .unsatisfied
        
        case 4: return .satisfiable
        
        case 5: return .unknown(try FfiConverterInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: OsPathStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .invalid:
            writeInt(&buf, Int32(1))
        
        
        case .satisfied:
            writeInt(&buf, Int32(2))
        
        
        case .unsatisfied:
            writeInt(&buf, Int32(3))
        
        
        case .satisfiable:
            writeInt(&buf, Int32(4))
        
        
        case let .unknown(v1):
            writeInt(&buf, Int32(5))
            FfiConverterInt64.write(v1, into: &buf)
            
        }
    }
}


public func FfiConverterTypeOSPathStatus_lift(_ buf: RustBuffer) throws -> OsPathStatus {
    return try FfiConverterTypeOSPathStatus.lift(buf)
}

public func FfiConverterTypeOSPathStatus_lower(_ value: OsPathStatus) -> RustBuffer {
    return FfiConverterTypeOSPathStatus.lower(value)
}



extension OsPathStatus: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TunStatus {
    
    case up
    case down
    case initializingClient
    case establishingConnection
    case disconnecting
}


public struct FfiConverterTypeTunStatus: FfiConverterRustBuffer {
    typealias SwiftType = TunStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TunStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .up
        
        case 2: return .down
        
        case 3: return .initializingClient
        
        case 4: return .establishingConnection
        
        case 5: return .disconnecting
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TunStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .up:
            writeInt(&buf, Int32(1))
        
        
        case .down:
            writeInt(&buf, Int32(2))
        
        
        case .initializingClient:
            writeInt(&buf, Int32(3))
        
        
        case .establishingConnection:
            writeInt(&buf, Int32(4))
        
        
        case .disconnecting:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeTunStatus_lift(_ buf: RustBuffer) throws -> TunStatus {
    return try FfiConverterTypeTunStatus.lift(buf)
}

public func FfiConverterTypeTunStatus_lower(_ value: TunStatus) -> RustBuffer {
    return FfiConverterTypeTunStatus.lower(value)
}



extension TunStatus: Equatable, Hashable {}




public enum VpnError {

    
    
    case InternalError(details: String
    )
    case NetworkConnectionError(details: String
    )
    case GatewayError(details: String
    )
    case InvalidCredential(details: String
    )
    case OutOfBandwidth
    case InvalidStateError(details: String
    )
}


public struct FfiConverterTypeVpnError: FfiConverterRustBuffer {
    typealias SwiftType = VpnError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VpnError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InternalError(
            details: try FfiConverterString.read(from: &buf)
            )
        case 2: return .NetworkConnectionError(
            details: try FfiConverterString.read(from: &buf)
            )
        case 3: return .GatewayError(
            details: try FfiConverterString.read(from: &buf)
            )
        case 4: return .InvalidCredential(
            details: try FfiConverterString.read(from: &buf)
            )
        case 5: return .OutOfBandwidth
        case 6: return .InvalidStateError(
            details: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VpnError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InternalError(details):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(details, into: &buf)
            
        
        case let .NetworkConnectionError(details):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(details, into: &buf)
            
        
        case let .GatewayError(details):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(details, into: &buf)
            
        
        case let .InvalidCredential(details):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(details, into: &buf)
            
        
        case .OutOfBandwidth:
            writeInt(&buf, Int32(5))
        
        
        case let .InvalidStateError(details):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(details, into: &buf)
            
        }
    }
}


extension VpnError: Equatable, Hashable {}

extension VpnError: Error { }

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTimestamp.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTimestamp.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeOSDefaultPathObserver: FfiConverterRustBuffer {
    typealias SwiftType = OsDefaultPathObserver?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOSDefaultPathObserver.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOSDefaultPathObserver.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeTunnelStatusListener: FfiConverterRustBuffer {
    typealias SwiftType = TunnelStatusListener?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTunnelStatusListener.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTunnelStatusListener.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeDnsSettings: FfiConverterRustBuffer {
    typealias SwiftType = DnsSettings?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDnsSettings.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDnsSettings.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeGatewayMinPerformance: FfiConverterRustBuffer {
    typealias SwiftType = GatewayMinPerformance?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeGatewayMinPerformance.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeGatewayMinPerformance.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIpv4Settings: FfiConverterRustBuffer {
    typealias SwiftType = Ipv4Settings?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIpv4Settings.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIpv4Settings.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIpv6Settings: FfiConverterRustBuffer {
    typealias SwiftType = Ipv6Settings?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIpv6Settings.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIpv6Settings.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeUserAgent: FfiConverterRustBuffer {
    typealias SwiftType = UserAgent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUserAgent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUserAgent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeIpv4Route: FfiConverterRustBuffer {
    typealias SwiftType = [Ipv4Route]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeIpv4Route.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeIpv4Route.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeIpv6Route: FfiConverterRustBuffer {
    typealias SwiftType = [Ipv6Route]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeIpv6Route.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeIpv6Route.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIpv4Addr: FfiConverterRustBuffer {
    typealias SwiftType = Ipv4Addr?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIpv4Addr.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIpv4Addr.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIpv6Addr: FfiConverterRustBuffer {
    typealias SwiftType = Ipv6Addr?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIpv6Addr.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIpv6Addr.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePathBuf: FfiConverterRustBuffer {
    typealias SwiftType = PathBuf?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePathBuf.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePathBuf.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeUrl: FfiConverterRustBuffer {
    typealias SwiftType = Url?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUrl.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUrl.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeLocation: FfiConverterRustBuffer {
    typealias SwiftType = [Location]

    public static func write(_ value: [Location], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLocation.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Location] {
        let len: Int32 = try readInt(&buf)
        var seq = [Location]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLocation.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpv4Route: FfiConverterRustBuffer {
    typealias SwiftType = [Ipv4Route]

    public static func write(_ value: [Ipv4Route], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpv4Route.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Ipv4Route] {
        let len: Int32 = try readInt(&buf)
        var seq = [Ipv4Route]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpv4Route.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpv6Route: FfiConverterRustBuffer {
    typealias SwiftType = [Ipv6Route]

    public static func write(_ value: [Ipv6Route], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpv6Route.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Ipv6Route] {
        let len: Int32 = try readInt(&buf)
        var seq = [Ipv6Route]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpv6Route.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpAddr: FfiConverterRustBuffer {
    typealias SwiftType = [IpAddr]

    public static func write(_ value: [IpAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IpAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [IpAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpAddr.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpv4Network: FfiConverterRustBuffer {
    typealias SwiftType = [Ipv4Network]

    public static func write(_ value: [Ipv4Network], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpv4Network.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Ipv4Network] {
        let len: Int32 = try readInt(&buf)
        var seq = [Ipv4Network]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpv4Network.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIpv6Network: FfiConverterRustBuffer {
    typealias SwiftType = [Ipv6Network]

    public static func write(_ value: [Ipv6Network], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIpv6Network.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Ipv6Network] {
        let len: Int32 = try readInt(&buf)
        var seq = [Ipv6Network]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIpv6Network.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias IpAddr = String
public struct FfiConverterTypeIpAddr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IpAddr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: IpAddr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> IpAddr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: IpAddr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpAddr_lift(_ value: RustBuffer) throws -> IpAddr {
    return try FfiConverterTypeIpAddr.lift(value)
}

public func FfiConverterTypeIpAddr_lower(_ value: IpAddr) -> RustBuffer {
    return FfiConverterTypeIpAddr.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias IpPair = String
public struct FfiConverterTypeIpPair: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IpPair {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: IpPair, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> IpPair {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: IpPair) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpPair_lift(_ value: RustBuffer) throws -> IpPair {
    return try FfiConverterTypeIpPair.lift(value)
}

public func FfiConverterTypeIpPair_lower(_ value: IpPair) -> RustBuffer {
    return FfiConverterTypeIpPair.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ipv4Addr = String
public struct FfiConverterTypeIpv4Addr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Addr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ipv4Addr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ipv4Addr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ipv4Addr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpv4Addr_lift(_ value: RustBuffer) throws -> Ipv4Addr {
    return try FfiConverterTypeIpv4Addr.lift(value)
}

public func FfiConverterTypeIpv4Addr_lower(_ value: Ipv4Addr) -> RustBuffer {
    return FfiConverterTypeIpv4Addr.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ipv4Network = String
public struct FfiConverterTypeIpv4Network: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Network {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ipv4Network, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ipv4Network {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ipv4Network) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpv4Network_lift(_ value: RustBuffer) throws -> Ipv4Network {
    return try FfiConverterTypeIpv4Network.lift(value)
}

public func FfiConverterTypeIpv4Network_lower(_ value: Ipv4Network) -> RustBuffer {
    return FfiConverterTypeIpv4Network.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ipv6Addr = String
public struct FfiConverterTypeIpv6Addr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Addr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ipv6Addr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ipv6Addr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ipv6Addr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpv6Addr_lift(_ value: RustBuffer) throws -> Ipv6Addr {
    return try FfiConverterTypeIpv6Addr.lift(value)
}

public func FfiConverterTypeIpv6Addr_lower(_ value: Ipv6Addr) -> RustBuffer {
    return FfiConverterTypeIpv6Addr.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ipv6Network = String
public struct FfiConverterTypeIpv6Network: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Network {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ipv6Network, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ipv6Network {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ipv6Network) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeIpv6Network_lift(_ value: RustBuffer) throws -> Ipv6Network {
    return try FfiConverterTypeIpv6Network.lift(value)
}

public func FfiConverterTypeIpv6Network_lower(_ value: Ipv6Network) -> RustBuffer {
    return FfiConverterTypeIpv6Network.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias NodeIdentity = String
public struct FfiConverterTypeNodeIdentity: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeIdentity {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: NodeIdentity, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> NodeIdentity {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: NodeIdentity) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeNodeIdentity_lift(_ value: RustBuffer) throws -> NodeIdentity {
    return try FfiConverterTypeNodeIdentity.lift(value)
}

public func FfiConverterTypeNodeIdentity_lower(_ value: NodeIdentity) -> RustBuffer {
    return FfiConverterTypeNodeIdentity.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PathBuf = String
public struct FfiConverterTypePathBuf: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathBuf {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PathBuf, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PathBuf {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PathBuf) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypePathBuf_lift(_ value: RustBuffer) throws -> PathBuf {
    return try FfiConverterTypePathBuf.lift(value)
}

public func FfiConverterTypePathBuf_lower(_ value: PathBuf) -> RustBuffer {
    return FfiConverterTypePathBuf.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Recipient = String
public struct FfiConverterTypeRecipient: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Recipient {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Recipient, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Recipient {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Recipient) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeRecipient_lift(_ value: RustBuffer) throws -> Recipient {
    return try FfiConverterTypeRecipient.lift(value)
}

public func FfiConverterTypeRecipient_lower(_ value: Recipient) -> RustBuffer {
    return FfiConverterTypeRecipient.lower(value)
}





/**
 * Typealias from the type name used in the UDL file to the custom type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Url = URL


public struct FfiConverterTypeUrl: FfiConverter {

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Url {
        let builtinValue = try FfiConverterString.read(from: &buf)
        return URL(string: builtinValue)!
    }

    public static func write(_ value: Url, into buf: inout [UInt8]) {
        let builtinValue = String(describing: value)
        return FfiConverterString.write(builtinValue, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Url {
        let builtinValue = try FfiConverterString.lift(value)
        return URL(string: builtinValue)!
    }

    public static func lower(_ value: Url) -> RustBuffer {
        let builtinValue = String(describing: value)
        return FfiConverterString.lower(builtinValue)
    }
}


public func FfiConverterTypeUrl_lift(_ value: RustBuffer) throws -> Url {
    return try FfiConverterTypeUrl.lift(value)
}

public func FfiConverterTypeUrl_lower(_ value: Url) -> RustBuffer {
    return FfiConverterTypeUrl.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
private func uniffiTraitInterfaceCallAsync<T>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> ()
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)

}

private func uniffiTraitInterfaceCallAsyncWithError<T, E>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> (),
    lowerError: @escaping (E) -> RustBuffer
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch let error as E {
            handleError(CALL_ERROR, lowerError(error))
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)
}

// Borrow the callback handle map implementation to store foreign future handles
// TODO: consolidate the handle-map code (https://github.com/mozilla/uniffi-rs/pull/1823)
fileprivate var UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = UniffiHandleMap<UniffiForeignFutureTask>()

// Protocol for tasks that handle foreign futures.
//
// Defining a protocol allows all tasks to be stored in the same handle map.  This can't be done
// with the task object itself, since has generic parameters.
protocol UniffiForeignFutureTask {
    func cancel()
}

extension Task: UniffiForeignFutureTask {}

private func uniffiForeignFutureFree(handle: UInt64) {
    do {
        let task = try UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle: handle)
        // Set the cancellation flag on the task.  If it's still running, the code can check the
        // cancellation flag or call `Task.checkCancellation()`.  If the task has completed, this is
        // a no-op.
        task.cancel()
    } catch {
        print("uniffiForeignFutureFree: handle missing from handlemap")
    }
}

// For testing
public func uniffiForeignFutureHandleCountNymVpnLib() -> Int {
    UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.count
}
public func checkCredential(credential: String)throws  -> Date? {
    return try  FfiConverterOptionTimestamp.lift(try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_func_checkcredential(
        FfiConverterString.lower(credential),$0
    )
})
}
public func getGatewayCountries(apiUrl: Url, nymVpnApiUrl: Url?, gwType: GatewayType, userAgent: UserAgent?, minGatewayPerformance: GatewayMinPerformance?)throws  -> [Location] {
    return try  FfiConverterSequenceTypeLocation.lift(try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_func_getgatewaycountries(
        FfiConverterTypeUrl.lower(apiUrl),
        FfiConverterOptionTypeUrl.lower(nymVpnApiUrl),
        FfiConverterTypeGatewayType.lower(gwType),
        FfiConverterOptionTypeUserAgent.lower(userAgent),
        FfiConverterOptionTypeGatewayMinPerformance.lower(minGatewayPerformance),$0
    )
})
}
public func getLowLatencyEntryCountry(apiUrl: Url, vpnApiUrl: Url?, userAgent: UserAgent)throws  -> Location {
    return try  FfiConverterTypeLocation.lift(try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_func_getlowlatencyentrycountry(
        FfiConverterTypeUrl.lower(apiUrl),
        FfiConverterOptionTypeUrl.lower(vpnApiUrl),
        FfiConverterTypeUserAgent.lower(userAgent),$0
    )
})
}
public func importCredential(credential: String, path: String)throws  -> Date? {
    return try  FfiConverterOptionTimestamp.lift(try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_func_importcredential(
        FfiConverterString.lower(credential),
        FfiConverterString.lower(path),$0
    )
})
}
public func initLogger() {try! rustCall() {
    uniffi_nym_vpn_lib_fn_func_initlogger($0
    )
}
}
public func startVpn(config: VpnConfig)throws  {try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_func_startvpn(
        FfiConverterTypeVPNConfig.lower(config),$0
    )
}
}
public func stopVpn()throws  {try rustCallWithError(FfiConverterTypeVpnError.lift) {
    uniffi_nym_vpn_lib_fn_func_stopvpn($0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_nym_vpn_lib_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_checkcredential() != 1684) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_getgatewaycountries() != 41607) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_getlowlatencyentrycountry() != 12628) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_importcredential() != 49505) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_initlogger() != 45606) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_startvpn() != 55890) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_func_stopvpn() != 59823) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_osdefaultpathobserver_on_default_path_change() != 43452) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_ostunprovider_set_tunnel_network_settings() != 45546) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_ostunprovider_set_default_path_observer() != 11941) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_tun_status_change() != 55105) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_bandwidth_status_change() != 27737) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_connection_status_change() != 33534) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_nym_vpn_status_change() != 65319) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_exit_status_change() != 8499) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitOSDefaultPathObserver()
    uniffiCallbackInitOSTunProvider()
    uniffiCallbackInitTunnelStatusListener()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all