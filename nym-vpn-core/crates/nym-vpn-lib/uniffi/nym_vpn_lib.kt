// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package nym_vpn_lib;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.net.URI
import java.net.URL
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_nym_vpn_lib_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_nym_vpn_lib_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "nym_vpn_lib"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceAndroidTunProviderMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`socket`: Int,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAndroidTunProviderMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`config`: RustBuffer.ByValue,`uniffiOutReturn`: IntByReference,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTunnelStatusListenerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("bypass", "configureTunnel", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceAndroidTunProvider(
    @JvmField internal var `bypass`: UniffiCallbackInterfaceAndroidTunProviderMethod0? = null,
    @JvmField internal var `configureTunnel`: UniffiCallbackInterfaceAndroidTunProviderMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `bypass`: UniffiCallbackInterfaceAndroidTunProviderMethod0? = null,
        `configureTunnel`: UniffiCallbackInterfaceAndroidTunProviderMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceAndroidTunProvider(`bypass`,`configureTunnel`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceAndroidTunProvider) {
        `bypass` = other.`bypass`
        `configureTunnel` = other.`configureTunnel`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onEvent", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceTunnelStatusListener(
    @JvmField internal var `onEvent`: UniffiCallbackInterfaceTunnelStatusListenerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onEvent`: UniffiCallbackInterfaceTunnelStatusListenerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceTunnelStatusListener(`onEvent`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceTunnelStatusListener) {
        `onEvent` = other.`onEvent`
        `uniffiFree` = other.`uniffiFree`
    }

}
































































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "nym_vpn_lib")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                uniffiCallbackInterfaceAndroidTunProvider.register(lib)
                uniffiCallbackInterfaceTunnelStatusListener.register(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_nym_vpn_lib_fn_clone_androidtunprovider(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_nym_vpn_lib_fn_free_androidtunprovider(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_init_callback_vtable_androidtunprovider(`vtable`: UniffiVTableCallbackInterfaceAndroidTunProvider,
    ): Unit
    fun uniffi_nym_vpn_lib_fn_method_androidtunprovider_bypass(`ptr`: Pointer,`socket`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_method_androidtunprovider_configure_tunnel(`ptr`: Pointer,`config`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun uniffi_nym_vpn_lib_fn_clone_tunnelstatuslistener(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_nym_vpn_lib_fn_free_tunnelstatuslistener(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_init_callback_vtable_tunnelstatuslistener(`vtable`: UniffiVTableCallbackInterfaceTunnelStatusListener,
    ): Unit
    fun uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_event(`ptr`: Pointer,`event`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_fetchenvironment(`networkName`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_nym_vpn_lib_fn_func_getaccountsummary(uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_nym_vpn_lib_fn_func_getgatewaycountries(`apiUrl`: RustBuffer.ByValue,`nymVpnApiUrl`: RustBuffer.ByValue,`gwType`: RustBuffer.ByValue,`userAgent`: RustBuffer.ByValue,`minGatewayPerformance`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_nym_vpn_lib_fn_func_getlowlatencyentrycountry(`apiUrl`: RustBuffer.ByValue,`vpnApiUrl`: RustBuffer.ByValue,`userAgent`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_nym_vpn_lib_fn_func_initlogger(uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_isaccountmnemonicstored(`path`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_nym_vpn_lib_fn_func_removeaccountmnemonic(`path`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_nym_vpn_lib_fn_func_resetdeviceidentity(`path`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_startaccountcontroller(`dataDir`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_startvpn(`config`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_stopaccountcontroller(uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_stopvpn(uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_fn_func_storeaccountmnemonic(`mnemonic`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_nym_vpn_lib_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_nym_vpn_lib_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_nym_vpn_lib_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_nym_vpn_lib_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_nym_vpn_lib_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_nym_vpn_lib_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_nym_vpn_lib_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_nym_vpn_lib_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_nym_vpn_lib_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_nym_vpn_lib_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_nym_vpn_lib_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_nym_vpn_lib_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_nym_vpn_lib_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_nym_vpn_lib_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_nym_vpn_lib_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_nym_vpn_lib_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_nym_vpn_lib_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_nym_vpn_lib_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_nym_vpn_lib_checksum_func_fetchenvironment(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_getaccountsummary(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_getgatewaycountries(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_getlowlatencyentrycountry(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_initlogger(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_isaccountmnemonicstored(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_removeaccountmnemonic(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_resetdeviceidentity(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_startaccountcontroller(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_startvpn(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_stopaccountcontroller(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_stopvpn(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_func_storeaccountmnemonic(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_method_androidtunprovider_bypass(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_method_androidtunprovider_configure_tunnel(
    ): Short
    fun uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_event(
    ): Short
    fun ffi_nym_vpn_lib_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_nym_vpn_lib_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_nym_vpn_lib_checksum_func_fetchenvironment() != 34561.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_getaccountsummary() != 13465.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_getgatewaycountries() != 41607.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_getlowlatencyentrycountry() != 12628.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_initlogger() != 45606.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_isaccountmnemonicstored() != 32917.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_removeaccountmnemonic() != 51019.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_resetdeviceidentity() != 48847.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_startaccountcontroller() != 34257.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_startvpn() != 55890.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_stopaccountcontroller() != 64683.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_stopvpn() != 59823.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_func_storeaccountmnemonic() != 55674.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_method_androidtunprovider_bypass() != 2706.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_method_androidtunprovider_configure_tunnel() != 55981.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_nym_vpn_lib_checksum_method_tunnelstatuslistener_on_event() != 60728.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4UL

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
public interface AndroidTunProvider {
    
    fun `bypass`(`socket`: kotlin.Int)
    
    fun `configureTunnel`(`config`: TunnelNetworkSettings): kotlin.Int
    
    companion object
}

open class AndroidTunProviderImpl: Disposable, AutoCloseable, AndroidTunProvider {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_free_androidtunprovider(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_clone_androidtunprovider(pointer!!, status)
        }
    }

    override fun `bypass`(`socket`: kotlin.Int)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_method_androidtunprovider_bypass(
        it, FfiConverterInt.lower(`socket`),_status)
}
    }
    
    

    
    @Throws(VpnException::class)override fun `configureTunnel`(`config`: TunnelNetworkSettings): kotlin.Int {
            return FfiConverterInt.lift(
    callWithPointer {
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_method_androidtunprovider_configure_tunnel(
        it, FfiConverterTypeTunnelNetworkSettings.lower(`config`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceAndroidTunProvider {
    internal object `bypass`: UniffiCallbackInterfaceAndroidTunProviderMethod0 {
        override fun callback(`uniffiHandle`: Long,`socket`: Int,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAndroidTunProvider.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`bypass`(
                    FfiConverterInt.lift(`socket`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `configureTunnel`: UniffiCallbackInterfaceAndroidTunProviderMethod1 {
        override fun callback(`uniffiHandle`: Long,`config`: RustBuffer.ByValue,`uniffiOutReturn`: IntByReference,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAndroidTunProvider.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`configureTunnel`(
                    FfiConverterTypeTunnelNetworkSettings.lift(`config`),
                )
            }
            val writeReturn = { value: kotlin.Int -> uniffiOutReturn.setValue(FfiConverterInt.lower(value)) }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: VpnException -> FfiConverterTypeVpnError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeAndroidTunProvider.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceAndroidTunProvider.UniffiByValue(
        `bypass`,
        `configureTunnel`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_nym_vpn_lib_fn_init_callback_vtable_androidtunprovider(vtable)
    }
}

public object FfiConverterTypeAndroidTunProvider: FfiConverter<AndroidTunProvider, Pointer> {
    internal val handleMap = UniffiHandleMap<AndroidTunProvider>()

    override fun lower(value: AndroidTunProvider): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): AndroidTunProvider {
        return AndroidTunProviderImpl(value)
    }

    override fun read(buf: ByteBuffer): AndroidTunProvider {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AndroidTunProvider) = 8UL

    override fun write(value: AndroidTunProvider, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface TunnelStatusListener {
    
    fun `onEvent`(`event`: TunnelEvent)
    
    companion object
}

open class TunnelStatusListenerImpl: Disposable, AutoCloseable, TunnelStatusListener {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_free_tunnelstatuslistener(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_clone_tunnelstatuslistener(pointer!!, status)
        }
    }

    override fun `onEvent`(`event`: TunnelEvent)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_method_tunnelstatuslistener_on_event(
        it, FfiConverterTypeTunnelEvent.lower(`event`),_status)
}
    }
    
    

    

    
    
    companion object
    
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceTunnelStatusListener {
    internal object `onEvent`: UniffiCallbackInterfaceTunnelStatusListenerMethod0 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTunnelStatusListener.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onEvent`(
                    FfiConverterTypeTunnelEvent.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeTunnelStatusListener.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceTunnelStatusListener.UniffiByValue(
        `onEvent`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_nym_vpn_lib_fn_init_callback_vtable_tunnelstatuslistener(vtable)
    }
}

public object FfiConverterTypeTunnelStatusListener: FfiConverter<TunnelStatusListener, Pointer> {
    internal val handleMap = UniffiHandleMap<TunnelStatusListener>()

    override fun lower(value: TunnelStatusListener): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): TunnelStatusListener {
        return TunnelStatusListenerImpl(value)
    }

    override fun read(buf: ByteBuffer): TunnelStatusListener {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: TunnelStatusListener) = 8UL

    override fun write(value: TunnelStatusListener, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class AccountStateSummary (
    var `mnemonic`: MnemonicState?, 
    var `account`: AccountState?, 
    var `subscription`: SubscriptionState?, 
    var `device`: DeviceState?, 
    var `pendingZkNym`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeAccountStateSummary: FfiConverterRustBuffer<AccountStateSummary> {
    override fun read(buf: ByteBuffer): AccountStateSummary {
        return AccountStateSummary(
            FfiConverterOptionalTypeMnemonicState.read(buf),
            FfiConverterOptionalTypeAccountState.read(buf),
            FfiConverterOptionalTypeSubscriptionState.read(buf),
            FfiConverterOptionalTypeDeviceState.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: AccountStateSummary) = (
            FfiConverterOptionalTypeMnemonicState.allocationSize(value.`mnemonic`) +
            FfiConverterOptionalTypeAccountState.allocationSize(value.`account`) +
            FfiConverterOptionalTypeSubscriptionState.allocationSize(value.`subscription`) +
            FfiConverterOptionalTypeDeviceState.allocationSize(value.`device`) +
            FfiConverterBoolean.allocationSize(value.`pendingZkNym`)
    )

    override fun write(value: AccountStateSummary, buf: ByteBuffer) {
            FfiConverterOptionalTypeMnemonicState.write(value.`mnemonic`, buf)
            FfiConverterOptionalTypeAccountState.write(value.`account`, buf)
            FfiConverterOptionalTypeSubscriptionState.write(value.`subscription`, buf)
            FfiConverterOptionalTypeDeviceState.write(value.`device`, buf)
            FfiConverterBoolean.write(value.`pendingZkNym`, buf)
    }
}



data class ChainDetails (
    var `bech32AccountPrefix`: kotlin.String, 
    var `mixDenom`: DenomDetails, 
    var `stakeDenom`: DenomDetails
) {
    
    companion object
}

public object FfiConverterTypeChainDetails: FfiConverterRustBuffer<ChainDetails> {
    override fun read(buf: ByteBuffer): ChainDetails {
        return ChainDetails(
            FfiConverterString.read(buf),
            FfiConverterTypeDenomDetails.read(buf),
            FfiConverterTypeDenomDetails.read(buf),
        )
    }

    override fun allocationSize(value: ChainDetails) = (
            FfiConverterString.allocationSize(value.`bech32AccountPrefix`) +
            FfiConverterTypeDenomDetails.allocationSize(value.`mixDenom`) +
            FfiConverterTypeDenomDetails.allocationSize(value.`stakeDenom`)
    )

    override fun write(value: ChainDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`bech32AccountPrefix`, buf)
            FfiConverterTypeDenomDetails.write(value.`mixDenom`, buf)
            FfiConverterTypeDenomDetails.write(value.`stakeDenom`, buf)
    }
}



data class ConnectionData (
    /**
     * Mixnet entry gateway
     */
    var `entryGateway`: BoxedNodeIdentity, 
    /**
     * Mixnet exit gateway
     */
    var `exitGateway`: BoxedNodeIdentity, 
    /**
     * When the tunnel was last established.
     */
    var `connectedAt`: OffsetDateTime, 
    /**
     * Tunnel connection data.
     */
    var `tunnel`: TunnelConnectionData
) {
    
    companion object
}

public object FfiConverterTypeConnectionData: FfiConverterRustBuffer<ConnectionData> {
    override fun read(buf: ByteBuffer): ConnectionData {
        return ConnectionData(
            FfiConverterTypeBoxedNodeIdentity.read(buf),
            FfiConverterTypeBoxedNodeIdentity.read(buf),
            FfiConverterTypeOffsetDateTime.read(buf),
            FfiConverterTypeTunnelConnectionData.read(buf),
        )
    }

    override fun allocationSize(value: ConnectionData) = (
            FfiConverterTypeBoxedNodeIdentity.allocationSize(value.`entryGateway`) +
            FfiConverterTypeBoxedNodeIdentity.allocationSize(value.`exitGateway`) +
            FfiConverterTypeOffsetDateTime.allocationSize(value.`connectedAt`) +
            FfiConverterTypeTunnelConnectionData.allocationSize(value.`tunnel`)
    )

    override fun write(value: ConnectionData, buf: ByteBuffer) {
            FfiConverterTypeBoxedNodeIdentity.write(value.`entryGateway`, buf)
            FfiConverterTypeBoxedNodeIdentity.write(value.`exitGateway`, buf)
            FfiConverterTypeOffsetDateTime.write(value.`connectedAt`, buf)
            FfiConverterTypeTunnelConnectionData.write(value.`tunnel`, buf)
    }
}



data class DenomDetails (
    var `base`: kotlin.String, 
    var `display`: kotlin.String, 
    var `displayExponent`: kotlin.UInt
) {
    
    companion object
}

public object FfiConverterTypeDenomDetails: FfiConverterRustBuffer<DenomDetails> {
    override fun read(buf: ByteBuffer): DenomDetails {
        return DenomDetails(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: DenomDetails) = (
            FfiConverterString.allocationSize(value.`base`) +
            FfiConverterString.allocationSize(value.`display`) +
            FfiConverterUInt.allocationSize(value.`displayExponent`)
    )

    override fun write(value: DenomDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`base`, buf)
            FfiConverterString.write(value.`display`, buf)
            FfiConverterUInt.write(value.`displayExponent`, buf)
    }
}



data class DnsSettings (
    /**
     * DNS IP addresses.
     */
    var `servers`: List<IpAddr>, 
    /**
     * DNS server search domains.
     */
    var `searchDomains`: List<kotlin.String>?, 
    /**
     * Which domains to resolve using these DNS settings.
     */
    var `matchDomains`: List<kotlin.String>?
) {
    
    companion object
}

public object FfiConverterTypeDnsSettings: FfiConverterRustBuffer<DnsSettings> {
    override fun read(buf: ByteBuffer): DnsSettings {
        return DnsSettings(
            FfiConverterSequenceTypeIpAddr.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: DnsSettings) = (
            FfiConverterSequenceTypeIpAddr.allocationSize(value.`servers`) +
            FfiConverterOptionalSequenceString.allocationSize(value.`searchDomains`) +
            FfiConverterOptionalSequenceString.allocationSize(value.`matchDomains`)
    )

    override fun write(value: DnsSettings, buf: ByteBuffer) {
            FfiConverterSequenceTypeIpAddr.write(value.`servers`, buf)
            FfiConverterOptionalSequenceString.write(value.`searchDomains`, buf)
            FfiConverterOptionalSequenceString.write(value.`matchDomains`, buf)
    }
}



data class GatewayMinPerformance (
    var `mixnetMinPerformance`: kotlin.ULong?, 
    var `vpnMinPerformance`: kotlin.ULong?
) {
    
    companion object
}

public object FfiConverterTypeGatewayMinPerformance: FfiConverterRustBuffer<GatewayMinPerformance> {
    override fun read(buf: ByteBuffer): GatewayMinPerformance {
        return GatewayMinPerformance(
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: GatewayMinPerformance) = (
            FfiConverterOptionalULong.allocationSize(value.`mixnetMinPerformance`) +
            FfiConverterOptionalULong.allocationSize(value.`vpnMinPerformance`)
    )

    override fun write(value: GatewayMinPerformance, buf: ByteBuffer) {
            FfiConverterOptionalULong.write(value.`mixnetMinPerformance`, buf)
            FfiConverterOptionalULong.write(value.`vpnMinPerformance`, buf)
    }
}



data class Ipv4Settings (
    /**
     * IPv4 addresses that will be set on tunnel interface.
     */
    var `addresses`: List<Ipv4Network>, 
    /**
     * Traffic matching these routes will be routed over the tun interface.
     */
    var `includedRoutes`: List<Ipv4Route>?, 
    /**
     * Traffic matching these routes will be routed over the primary physical interface.
     */
    var `excludedRoutes`: List<Ipv4Route>?
) {
    
    companion object
}

public object FfiConverterTypeIpv4Settings: FfiConverterRustBuffer<Ipv4Settings> {
    override fun read(buf: ByteBuffer): Ipv4Settings {
        return Ipv4Settings(
            FfiConverterSequenceTypeIpv4Network.read(buf),
            FfiConverterOptionalSequenceTypeIpv4Route.read(buf),
            FfiConverterOptionalSequenceTypeIpv4Route.read(buf),
        )
    }

    override fun allocationSize(value: Ipv4Settings) = (
            FfiConverterSequenceTypeIpv4Network.allocationSize(value.`addresses`) +
            FfiConverterOptionalSequenceTypeIpv4Route.allocationSize(value.`includedRoutes`) +
            FfiConverterOptionalSequenceTypeIpv4Route.allocationSize(value.`excludedRoutes`)
    )

    override fun write(value: Ipv4Settings, buf: ByteBuffer) {
            FfiConverterSequenceTypeIpv4Network.write(value.`addresses`, buf)
            FfiConverterOptionalSequenceTypeIpv4Route.write(value.`includedRoutes`, buf)
            FfiConverterOptionalSequenceTypeIpv4Route.write(value.`excludedRoutes`, buf)
    }
}



data class Ipv6Settings (
    /**
     * IPv4 addresses that will be set on tunnel interface.
     */
    var `addresses`: List<Ipv6Network>, 
    /**
     * Traffic matching these routes will be routed over the tun interface.
     */
    var `includedRoutes`: List<Ipv6Route>?, 
    /**
     * Traffic matching these routes will be routed over the primary physical interface.
     */
    var `excludedRoutes`: List<Ipv6Route>?
) {
    
    companion object
}

public object FfiConverterTypeIpv6Settings: FfiConverterRustBuffer<Ipv6Settings> {
    override fun read(buf: ByteBuffer): Ipv6Settings {
        return Ipv6Settings(
            FfiConverterSequenceTypeIpv6Network.read(buf),
            FfiConverterOptionalSequenceTypeIpv6Route.read(buf),
            FfiConverterOptionalSequenceTypeIpv6Route.read(buf),
        )
    }

    override fun allocationSize(value: Ipv6Settings) = (
            FfiConverterSequenceTypeIpv6Network.allocationSize(value.`addresses`) +
            FfiConverterOptionalSequenceTypeIpv6Route.allocationSize(value.`includedRoutes`) +
            FfiConverterOptionalSequenceTypeIpv6Route.allocationSize(value.`excludedRoutes`)
    )

    override fun write(value: Ipv6Settings, buf: ByteBuffer) {
            FfiConverterSequenceTypeIpv6Network.write(value.`addresses`, buf)
            FfiConverterOptionalSequenceTypeIpv6Route.write(value.`includedRoutes`, buf)
            FfiConverterOptionalSequenceTypeIpv6Route.write(value.`excludedRoutes`, buf)
    }
}



data class Location (
    var `twoLetterIsoCountryCode`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLocation: FfiConverterRustBuffer<Location> {
    override fun read(buf: ByteBuffer): Location {
        return Location(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Location) = (
            FfiConverterString.allocationSize(value.`twoLetterIsoCountryCode`)
    )

    override fun write(value: Location, buf: ByteBuffer) {
            FfiConverterString.write(value.`twoLetterIsoCountryCode`, buf)
    }
}



data class MixConnectionInfo (
    var `nymAddress`: Recipient, 
    var `entryGateway`: NodeIdentity
) {
    
    companion object
}

public object FfiConverterTypeMixConnectionInfo: FfiConverterRustBuffer<MixConnectionInfo> {
    override fun read(buf: ByteBuffer): MixConnectionInfo {
        return MixConnectionInfo(
            FfiConverterTypeRecipient.read(buf),
            FfiConverterTypeNodeIdentity.read(buf),
        )
    }

    override fun allocationSize(value: MixConnectionInfo) = (
            FfiConverterTypeRecipient.allocationSize(value.`nymAddress`) +
            FfiConverterTypeNodeIdentity.allocationSize(value.`entryGateway`)
    )

    override fun write(value: MixConnectionInfo, buf: ByteBuffer) {
            FfiConverterTypeRecipient.write(value.`nymAddress`, buf)
            FfiConverterTypeNodeIdentity.write(value.`entryGateway`, buf)
    }
}



data class MixExitConnectionInfo (
    var `exitGateway`: NodeIdentity, 
    var `exitIpr`: Recipient, 
    var `ips`: IpPair
) {
    
    companion object
}

public object FfiConverterTypeMixExitConnectionInfo: FfiConverterRustBuffer<MixExitConnectionInfo> {
    override fun read(buf: ByteBuffer): MixExitConnectionInfo {
        return MixExitConnectionInfo(
            FfiConverterTypeNodeIdentity.read(buf),
            FfiConverterTypeRecipient.read(buf),
            FfiConverterTypeIpPair.read(buf),
        )
    }

    override fun allocationSize(value: MixExitConnectionInfo) = (
            FfiConverterTypeNodeIdentity.allocationSize(value.`exitGateway`) +
            FfiConverterTypeRecipient.allocationSize(value.`exitIpr`) +
            FfiConverterTypeIpPair.allocationSize(value.`ips`)
    )

    override fun write(value: MixExitConnectionInfo, buf: ByteBuffer) {
            FfiConverterTypeNodeIdentity.write(value.`exitGateway`, buf)
            FfiConverterTypeRecipient.write(value.`exitIpr`, buf)
            FfiConverterTypeIpPair.write(value.`ips`, buf)
    }
}



data class MixnetConnectionData (
    var `nymAddress`: BoxedRecepient, 
    var `exitIpr`: BoxedRecepient, 
    var `ipv4`: Ipv4Addr, 
    var `ipv6`: Ipv6Addr
) {
    
    companion object
}

public object FfiConverterTypeMixnetConnectionData: FfiConverterRustBuffer<MixnetConnectionData> {
    override fun read(buf: ByteBuffer): MixnetConnectionData {
        return MixnetConnectionData(
            FfiConverterTypeBoxedRecepient.read(buf),
            FfiConverterTypeBoxedRecepient.read(buf),
            FfiConverterTypeIpv4Addr.read(buf),
            FfiConverterTypeIpv6Addr.read(buf),
        )
    }

    override fun allocationSize(value: MixnetConnectionData) = (
            FfiConverterTypeBoxedRecepient.allocationSize(value.`nymAddress`) +
            FfiConverterTypeBoxedRecepient.allocationSize(value.`exitIpr`) +
            FfiConverterTypeIpv4Addr.allocationSize(value.`ipv4`) +
            FfiConverterTypeIpv6Addr.allocationSize(value.`ipv6`)
    )

    override fun write(value: MixnetConnectionData, buf: ByteBuffer) {
            FfiConverterTypeBoxedRecepient.write(value.`nymAddress`, buf)
            FfiConverterTypeBoxedRecepient.write(value.`exitIpr`, buf)
            FfiConverterTypeIpv4Addr.write(value.`ipv4`, buf)
            FfiConverterTypeIpv6Addr.write(value.`ipv6`, buf)
    }
}



/**
 * Represents the nym network environment together with the environment specific to nym-vpn. These
 * need to be exported to the environment (for now, until it's refactored internally in the nym
 * crates) so that the client can have access to the necessary information.
 *
 * The list is as of today:
 *
 * NETWORK_NAME = nym_network::network_name
 *
 * BECH32_PREFIX = nym_network::chain_details::bech32_account_prefix
 * MIX_DENOM = nym_network::chain_details::mix_denom::base
 * MIX_DENOM_DISPLAY = nym_network::chain_details::mix_denom::display
 * STAKE_DENOM = nym_network::chain_details::stake_denom::base
 * STAKE_DENOM_DISPLAY = nym_network::chain_details::stake_denom::display
 * DENOMS_EXPONENT = nym_network::chain_details::mix_denom::display_exponent
 *
 * MIXNET_CONTRACT_ADDRESS = nym_network::contracts::mixnet_contract_address
 * VESTING_CONTRACT_ADDRESS = nym_network::contracts::vesting_contract_address
 * GROUP_CONTRACT_ADDRESS = nym_network::contracts::group_contract_address
 * ECASH_CONTRACT_ADDRESS = nym_network::contracts::ecash_contract_address
 * MULTISIG_CONTRACT_ADDRESS = nym_network::contracts::multisig_contract_address
 * COCONUT_DKG_CONTRACT_ADDRESS = nym_network::contracts::coconut_dkg_contract_address
 *
 * NYXD = nym_network::endpoints[0]::nyxd_url
 * NYM_API = nym_network::endpoints[0]::api_url
 * NYXD_WS = nym_network::endpoints[0]::websocket_url
 *
 * NYM_VPN_API = nym_vpn_network::nym_vpn_api_url
 */
data class NetworkEnvironment (
    var `nymNetwork`: NymNetworkDetails, 
    var `nymVpnNetwork`: NymVpnNetwork
) {
    
    companion object
}

public object FfiConverterTypeNetworkEnvironment: FfiConverterRustBuffer<NetworkEnvironment> {
    override fun read(buf: ByteBuffer): NetworkEnvironment {
        return NetworkEnvironment(
            FfiConverterTypeNymNetworkDetails.read(buf),
            FfiConverterTypeNymVpnNetwork.read(buf),
        )
    }

    override fun allocationSize(value: NetworkEnvironment) = (
            FfiConverterTypeNymNetworkDetails.allocationSize(value.`nymNetwork`) +
            FfiConverterTypeNymVpnNetwork.allocationSize(value.`nymVpnNetwork`)
    )

    override fun write(value: NetworkEnvironment, buf: ByteBuffer) {
            FfiConverterTypeNymNetworkDetails.write(value.`nymNetwork`, buf)
            FfiConverterTypeNymVpnNetwork.write(value.`nymVpnNetwork`, buf)
    }
}



data class NymContracts (
    var `mixnetContractAddress`: kotlin.String?, 
    var `vestingContractAddress`: kotlin.String?, 
    var `ecashContractAddress`: kotlin.String?, 
    var `groupContractAddress`: kotlin.String?, 
    var `multisigContractAddress`: kotlin.String?, 
    var `coconutDkgContractAddress`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeNymContracts: FfiConverterRustBuffer<NymContracts> {
    override fun read(buf: ByteBuffer): NymContracts {
        return NymContracts(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: NymContracts) = (
            FfiConverterOptionalString.allocationSize(value.`mixnetContractAddress`) +
            FfiConverterOptionalString.allocationSize(value.`vestingContractAddress`) +
            FfiConverterOptionalString.allocationSize(value.`ecashContractAddress`) +
            FfiConverterOptionalString.allocationSize(value.`groupContractAddress`) +
            FfiConverterOptionalString.allocationSize(value.`multisigContractAddress`) +
            FfiConverterOptionalString.allocationSize(value.`coconutDkgContractAddress`)
    )

    override fun write(value: NymContracts, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`mixnetContractAddress`, buf)
            FfiConverterOptionalString.write(value.`vestingContractAddress`, buf)
            FfiConverterOptionalString.write(value.`ecashContractAddress`, buf)
            FfiConverterOptionalString.write(value.`groupContractAddress`, buf)
            FfiConverterOptionalString.write(value.`multisigContractAddress`, buf)
            FfiConverterOptionalString.write(value.`coconutDkgContractAddress`, buf)
    }
}



data class NymNetworkDetails (
    var `networkName`: kotlin.String, 
    var `chainDetails`: ChainDetails, 
    var `endpoints`: List<ValidatorDetails>, 
    var `contracts`: NymContracts
) {
    
    companion object
}

public object FfiConverterTypeNymNetworkDetails: FfiConverterRustBuffer<NymNetworkDetails> {
    override fun read(buf: ByteBuffer): NymNetworkDetails {
        return NymNetworkDetails(
            FfiConverterString.read(buf),
            FfiConverterTypeChainDetails.read(buf),
            FfiConverterSequenceTypeValidatorDetails.read(buf),
            FfiConverterTypeNymContracts.read(buf),
        )
    }

    override fun allocationSize(value: NymNetworkDetails) = (
            FfiConverterString.allocationSize(value.`networkName`) +
            FfiConverterTypeChainDetails.allocationSize(value.`chainDetails`) +
            FfiConverterSequenceTypeValidatorDetails.allocationSize(value.`endpoints`) +
            FfiConverterTypeNymContracts.allocationSize(value.`contracts`)
    )

    override fun write(value: NymNetworkDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`networkName`, buf)
            FfiConverterTypeChainDetails.write(value.`chainDetails`, buf)
            FfiConverterSequenceTypeValidatorDetails.write(value.`endpoints`, buf)
            FfiConverterTypeNymContracts.write(value.`contracts`, buf)
    }
}



data class NymVpnNetwork (
    var `nymVpnApiUrl`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeNymVpnNetwork: FfiConverterRustBuffer<NymVpnNetwork> {
    override fun read(buf: ByteBuffer): NymVpnNetwork {
        return NymVpnNetwork(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: NymVpnNetwork) = (
            FfiConverterString.allocationSize(value.`nymVpnApiUrl`)
    )

    override fun write(value: NymVpnNetwork, buf: ByteBuffer) {
            FfiConverterString.write(value.`nymVpnApiUrl`, buf)
    }
}



/**
 * Tunnel + network settings
 */
data class TunnelNetworkSettings (
    /**
     * Tunnel remote address, which is mostly of decorative value.
     */
    var `tunnelRemoteAddress`: kotlin.String, 
    /**
     * IPv4 interface settings.
     */
    var `ipv4Settings`: Ipv4Settings?, 
    /**
     * IPv6 interface settings.
     */
    var `ipv6Settings`: Ipv6Settings?, 
    /**
     * DNS settings.
     */
    var `dnsSettings`: DnsSettings?, 
    /**
     * Tunnel device MTU.
     */
    var `mtu`: kotlin.UShort
) {
    
    companion object
}

public object FfiConverterTypeTunnelNetworkSettings: FfiConverterRustBuffer<TunnelNetworkSettings> {
    override fun read(buf: ByteBuffer): TunnelNetworkSettings {
        return TunnelNetworkSettings(
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeIpv4Settings.read(buf),
            FfiConverterOptionalTypeIpv6Settings.read(buf),
            FfiConverterOptionalTypeDnsSettings.read(buf),
            FfiConverterUShort.read(buf),
        )
    }

    override fun allocationSize(value: TunnelNetworkSettings) = (
            FfiConverterString.allocationSize(value.`tunnelRemoteAddress`) +
            FfiConverterOptionalTypeIpv4Settings.allocationSize(value.`ipv4Settings`) +
            FfiConverterOptionalTypeIpv6Settings.allocationSize(value.`ipv6Settings`) +
            FfiConverterOptionalTypeDnsSettings.allocationSize(value.`dnsSettings`) +
            FfiConverterUShort.allocationSize(value.`mtu`)
    )

    override fun write(value: TunnelNetworkSettings, buf: ByteBuffer) {
            FfiConverterString.write(value.`tunnelRemoteAddress`, buf)
            FfiConverterOptionalTypeIpv4Settings.write(value.`ipv4Settings`, buf)
            FfiConverterOptionalTypeIpv6Settings.write(value.`ipv6Settings`, buf)
            FfiConverterOptionalTypeDnsSettings.write(value.`dnsSettings`, buf)
            FfiConverterUShort.write(value.`mtu`, buf)
    }
}



data class UserAgent (
    var `application`: kotlin.String, 
    var `version`: kotlin.String, 
    var `platform`: kotlin.String, 
    var `gitCommit`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeUserAgent: FfiConverterRustBuffer<UserAgent> {
    override fun read(buf: ByteBuffer): UserAgent {
        return UserAgent(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: UserAgent) = (
            FfiConverterString.allocationSize(value.`application`) +
            FfiConverterString.allocationSize(value.`version`) +
            FfiConverterString.allocationSize(value.`platform`) +
            FfiConverterString.allocationSize(value.`gitCommit`)
    )

    override fun write(value: UserAgent, buf: ByteBuffer) {
            FfiConverterString.write(value.`application`, buf)
            FfiConverterString.write(value.`version`, buf)
            FfiConverterString.write(value.`platform`, buf)
            FfiConverterString.write(value.`gitCommit`, buf)
    }
}



data class VpnConfig (
    var `apiUrl`: Url, 
    var `vpnApiUrl`: Url?, 
    var `entryGateway`: EntryPoint, 
    var `exitRouter`: ExitPoint, 
    var `enableTwoHop`: kotlin.Boolean, 
    var `tunProvider`: AndroidTunProvider, 
    var `credentialDataPath`: PathBuf?, 
    var `tunStatusListener`: TunnelStatusListener?
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`apiUrl`, 
        this.`vpnApiUrl`, 
        this.`entryGateway`, 
        this.`exitRouter`, 
        this.`enableTwoHop`, 
        this.`tunProvider`, 
        this.`credentialDataPath`, 
        this.`tunStatusListener`)
    }
    
    companion object
}

public object FfiConverterTypeVPNConfig: FfiConverterRustBuffer<VpnConfig> {
    override fun read(buf: ByteBuffer): VpnConfig {
        return VpnConfig(
            FfiConverterTypeUrl.read(buf),
            FfiConverterOptionalTypeUrl.read(buf),
            FfiConverterTypeEntryPoint.read(buf),
            FfiConverterTypeExitPoint.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeAndroidTunProvider.read(buf),
            FfiConverterOptionalTypePathBuf.read(buf),
            FfiConverterOptionalTypeTunnelStatusListener.read(buf),
        )
    }

    override fun allocationSize(value: VpnConfig) = (
            FfiConverterTypeUrl.allocationSize(value.`apiUrl`) +
            FfiConverterOptionalTypeUrl.allocationSize(value.`vpnApiUrl`) +
            FfiConverterTypeEntryPoint.allocationSize(value.`entryGateway`) +
            FfiConverterTypeExitPoint.allocationSize(value.`exitRouter`) +
            FfiConverterBoolean.allocationSize(value.`enableTwoHop`) +
            FfiConverterTypeAndroidTunProvider.allocationSize(value.`tunProvider`) +
            FfiConverterOptionalTypePathBuf.allocationSize(value.`credentialDataPath`) +
            FfiConverterOptionalTypeTunnelStatusListener.allocationSize(value.`tunStatusListener`)
    )

    override fun write(value: VpnConfig, buf: ByteBuffer) {
            FfiConverterTypeUrl.write(value.`apiUrl`, buf)
            FfiConverterOptionalTypeUrl.write(value.`vpnApiUrl`, buf)
            FfiConverterTypeEntryPoint.write(value.`entryGateway`, buf)
            FfiConverterTypeExitPoint.write(value.`exitRouter`, buf)
            FfiConverterBoolean.write(value.`enableTwoHop`, buf)
            FfiConverterTypeAndroidTunProvider.write(value.`tunProvider`, buf)
            FfiConverterOptionalTypePathBuf.write(value.`credentialDataPath`, buf)
            FfiConverterOptionalTypeTunnelStatusListener.write(value.`tunStatusListener`, buf)
    }
}



data class ValidatorDetails (
    var `nyxdUrl`: kotlin.String, 
    var `websocketUrl`: kotlin.String?, 
    var `apiUrl`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeValidatorDetails: FfiConverterRustBuffer<ValidatorDetails> {
    override fun read(buf: ByteBuffer): ValidatorDetails {
        return ValidatorDetails(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ValidatorDetails) = (
            FfiConverterString.allocationSize(value.`nyxdUrl`) +
            FfiConverterOptionalString.allocationSize(value.`websocketUrl`) +
            FfiConverterOptionalString.allocationSize(value.`apiUrl`)
    )

    override fun write(value: ValidatorDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`nyxdUrl`, buf)
            FfiConverterOptionalString.write(value.`websocketUrl`, buf)
            FfiConverterOptionalString.write(value.`apiUrl`, buf)
    }
}



data class WireguardConnectionData (
    var `entry`: WireguardNode, 
    var `exit`: WireguardNode
) {
    
    companion object
}

public object FfiConverterTypeWireguardConnectionData: FfiConverterRustBuffer<WireguardConnectionData> {
    override fun read(buf: ByteBuffer): WireguardConnectionData {
        return WireguardConnectionData(
            FfiConverterTypeWireguardNode.read(buf),
            FfiConverterTypeWireguardNode.read(buf),
        )
    }

    override fun allocationSize(value: WireguardConnectionData) = (
            FfiConverterTypeWireguardNode.allocationSize(value.`entry`) +
            FfiConverterTypeWireguardNode.allocationSize(value.`exit`)
    )

    override fun write(value: WireguardConnectionData, buf: ByteBuffer) {
            FfiConverterTypeWireguardNode.write(value.`entry`, buf)
            FfiConverterTypeWireguardNode.write(value.`exit`, buf)
    }
}



data class WireguardConnectionInfo (
    var `gatewayId`: NodeIdentity, 
    var `publicKey`: kotlin.String, 
    var `privateIpv4`: Ipv4Addr
) {
    
    companion object
}

public object FfiConverterTypeWireguardConnectionInfo: FfiConverterRustBuffer<WireguardConnectionInfo> {
    override fun read(buf: ByteBuffer): WireguardConnectionInfo {
        return WireguardConnectionInfo(
            FfiConverterTypeNodeIdentity.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeIpv4Addr.read(buf),
        )
    }

    override fun allocationSize(value: WireguardConnectionInfo) = (
            FfiConverterTypeNodeIdentity.allocationSize(value.`gatewayId`) +
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterTypeIpv4Addr.allocationSize(value.`privateIpv4`)
    )

    override fun write(value: WireguardConnectionInfo, buf: ByteBuffer) {
            FfiConverterTypeNodeIdentity.write(value.`gatewayId`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterTypeIpv4Addr.write(value.`privateIpv4`, buf)
    }
}



data class WireguardNode (
    var `endpoint`: SocketAddr, 
    var `publicKey`: PublicKey, 
    var `privateIpv4`: Ipv4Addr
) {
    
    companion object
}

public object FfiConverterTypeWireguardNode: FfiConverterRustBuffer<WireguardNode> {
    override fun read(buf: ByteBuffer): WireguardNode {
        return WireguardNode(
            FfiConverterTypeSocketAddr.read(buf),
            FfiConverterTypePublicKey.read(buf),
            FfiConverterTypeIpv4Addr.read(buf),
        )
    }

    override fun allocationSize(value: WireguardNode) = (
            FfiConverterTypeSocketAddr.allocationSize(value.`endpoint`) +
            FfiConverterTypePublicKey.allocationSize(value.`publicKey`) +
            FfiConverterTypeIpv4Addr.allocationSize(value.`privateIpv4`)
    )

    override fun write(value: WireguardNode, buf: ByteBuffer) {
            FfiConverterTypeSocketAddr.write(value.`endpoint`, buf)
            FfiConverterTypePublicKey.write(value.`publicKey`, buf)
            FfiConverterTypeIpv4Addr.write(value.`privateIpv4`, buf)
    }
}




enum class AccountState {
    
    NOT_REGISTERED,
    INACTIVE,
    ACTIVE,
    DELETE_ME;
    companion object
}


public object FfiConverterTypeAccountState: FfiConverterRustBuffer<AccountState> {
    override fun read(buf: ByteBuffer) = try {
        AccountState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AccountState) = 4UL

    override fun write(value: AccountState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class ActionAfterDisconnect {
    
    object Nothing : ActionAfterDisconnect()
    
    
    object Reconnect : ActionAfterDisconnect()
    
    
    data class Error(
        val v1: ErrorStateReason) : ActionAfterDisconnect() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeActionAfterDisconnect : FfiConverterRustBuffer<ActionAfterDisconnect>{
    override fun read(buf: ByteBuffer): ActionAfterDisconnect {
        return when(buf.getInt()) {
            1 -> ActionAfterDisconnect.Nothing
            2 -> ActionAfterDisconnect.Reconnect
            3 -> ActionAfterDisconnect.Error(
                FfiConverterTypeErrorStateReason.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ActionAfterDisconnect) = when(value) {
        is ActionAfterDisconnect.Nothing -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is ActionAfterDisconnect.Reconnect -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is ActionAfterDisconnect.Error -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeErrorStateReason.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: ActionAfterDisconnect, buf: ByteBuffer) {
        when(value) {
            is ActionAfterDisconnect.Nothing -> {
                buf.putInt(1)
                Unit
            }
            is ActionAfterDisconnect.Reconnect -> {
                buf.putInt(2)
                Unit
            }
            is ActionAfterDisconnect.Error -> {
                buf.putInt(3)
                FfiConverterTypeErrorStateReason.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class BandwidthEvent {
    
    object NoBandwidth : BandwidthEvent()
    
    
    data class RemainingBandwidth(
        val v1: kotlin.Long) : BandwidthEvent() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeBandwidthEvent : FfiConverterRustBuffer<BandwidthEvent>{
    override fun read(buf: ByteBuffer): BandwidthEvent {
        return when(buf.getInt()) {
            1 -> BandwidthEvent.NoBandwidth
            2 -> BandwidthEvent.RemainingBandwidth(
                FfiConverterLong.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: BandwidthEvent) = when(value) {
        is BandwidthEvent.NoBandwidth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is BandwidthEvent.RemainingBandwidth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterLong.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: BandwidthEvent, buf: ByteBuffer) {
        when(value) {
            is BandwidthEvent.NoBandwidth -> {
                buf.putInt(1)
                Unit
            }
            is BandwidthEvent.RemainingBandwidth -> {
                buf.putInt(2)
                FfiConverterLong.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class BandwidthStatus {
    
    object NoBandwidth : BandwidthStatus()
    
    
    data class RemainingBandwidth(
        val `bandwidth`: kotlin.Long) : BandwidthStatus() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeBandwidthStatus : FfiConverterRustBuffer<BandwidthStatus>{
    override fun read(buf: ByteBuffer): BandwidthStatus {
        return when(buf.getInt()) {
            1 -> BandwidthStatus.NoBandwidth
            2 -> BandwidthStatus.RemainingBandwidth(
                FfiConverterLong.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: BandwidthStatus) = when(value) {
        is BandwidthStatus.NoBandwidth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is BandwidthStatus.RemainingBandwidth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterLong.allocationSize(value.`bandwidth`)
            )
        }
    }

    override fun write(value: BandwidthStatus, buf: ByteBuffer) {
        when(value) {
            is BandwidthStatus.NoBandwidth -> {
                buf.putInt(1)
                Unit
            }
            is BandwidthStatus.RemainingBandwidth -> {
                buf.putInt(2)
                FfiConverterLong.write(value.`bandwidth`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class ConnectionEvent {
    
    ENTRY_GATEWAY_DOWN,
    EXIT_GATEWAY_DOWN_IPV4,
    EXIT_GATEWAY_DOWN_IPV6,
    EXIT_GATEWAY_ROUTING_ERROR_IPV4,
    EXIT_GATEWAY_ROUTING_ERROR_IPV6,
    CONNECTED_IPV4,
    CONNECTED_IPV6;
    companion object
}


public object FfiConverterTypeConnectionEvent: FfiConverterRustBuffer<ConnectionEvent> {
    override fun read(buf: ByteBuffer) = try {
        ConnectionEvent.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ConnectionEvent) = 4UL

    override fun write(value: ConnectionEvent, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ConnectionStatus {
    
    ENTRY_GATEWAY_DOWN,
    EXIT_GATEWAY_DOWN_IPV4,
    EXIT_GATEWAY_DOWN_IPV6,
    EXIT_GATEWAY_ROUTING_ERROR_IPV4,
    EXIT_GATEWAY_ROUTING_ERROR_IPV6,
    CONNECTED_IPV4,
    CONNECTED_IPV6;
    companion object
}


public object FfiConverterTypeConnectionStatus: FfiConverterRustBuffer<ConnectionStatus> {
    override fun read(buf: ByteBuffer) = try {
        ConnectionStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ConnectionStatus) = 4UL

    override fun write(value: ConnectionStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class DeviceState {
    
    NOT_REGISTERED,
    INACTIVE,
    ACTIVE,
    DELETE_ME;
    companion object
}


public object FfiConverterTypeDeviceState: FfiConverterRustBuffer<DeviceState> {
    override fun read(buf: ByteBuffer) = try {
        DeviceState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: DeviceState) = 4UL

    override fun write(value: DeviceState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class EntryPoint {
    
    data class Gateway(
        val `identity`: NodeIdentity) : EntryPoint() {
        companion object
    }
    
    data class Location(
        val `location`: kotlin.String) : EntryPoint() {
        companion object
    }
    
    object RandomLowLatency : EntryPoint()
    
    
    object Random : EntryPoint()
    
    

    
    companion object
}

public object FfiConverterTypeEntryPoint : FfiConverterRustBuffer<EntryPoint>{
    override fun read(buf: ByteBuffer): EntryPoint {
        return when(buf.getInt()) {
            1 -> EntryPoint.Gateway(
                FfiConverterTypeNodeIdentity.read(buf),
                )
            2 -> EntryPoint.Location(
                FfiConverterString.read(buf),
                )
            3 -> EntryPoint.RandomLowLatency
            4 -> EntryPoint.Random
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: EntryPoint) = when(value) {
        is EntryPoint.Gateway -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeNodeIdentity.allocationSize(value.`identity`)
            )
        }
        is EntryPoint.Location -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`location`)
            )
        }
        is EntryPoint.RandomLowLatency -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is EntryPoint.Random -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: EntryPoint, buf: ByteBuffer) {
        when(value) {
            is EntryPoint.Gateway -> {
                buf.putInt(1)
                FfiConverterTypeNodeIdentity.write(value.`identity`, buf)
                Unit
            }
            is EntryPoint.Location -> {
                buf.putInt(2)
                FfiConverterString.write(value.`location`, buf)
                Unit
            }
            is EntryPoint.RandomLowLatency -> {
                buf.putInt(3)
                Unit
            }
            is EntryPoint.Random -> {
                buf.putInt(4)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class ErrorStateReason {
    
    /**
     * Issues related to firewall configuration.
     */
    FIREWALL,
    /**
     * Failure to configure routing.
     */
    ROUTING,
    /**
     * Failure to configure dns.
     */
    DNS,
    /**
     * Failure to configure tunnel device.
     */
    TUN_DEVICE,
    /**
     * Failure to configure packet tunnel provider.
     */
    TUNNEL_PROVIDER,
    /**
     * Failure to establish mixnet connection.
     */
    ESTABLISH_MIXNET_CONNECTION,
    /**
     * Failure to establish wireguard connection.
     */
    ESTABLISH_WIREGUARD_CONNECTION,
    /**
     * Tunnel went down at runtime.
     */
    TUNNEL_DOWN,
    /**
     * Program errors that must not happen.
     */
    INTERNAL;
    companion object
}


public object FfiConverterTypeErrorStateReason: FfiConverterRustBuffer<ErrorStateReason> {
    override fun read(buf: ByteBuffer) = try {
        ErrorStateReason.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ErrorStateReason) = 4UL

    override fun write(value: ErrorStateReason, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class ExitPoint {
    
    data class Address(
        val `address`: Recipient) : ExitPoint() {
        companion object
    }
    
    data class Gateway(
        val `identity`: NodeIdentity) : ExitPoint() {
        companion object
    }
    
    data class Location(
        val `location`: kotlin.String) : ExitPoint() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeExitPoint : FfiConverterRustBuffer<ExitPoint>{
    override fun read(buf: ByteBuffer): ExitPoint {
        return when(buf.getInt()) {
            1 -> ExitPoint.Address(
                FfiConverterTypeRecipient.read(buf),
                )
            2 -> ExitPoint.Gateway(
                FfiConverterTypeNodeIdentity.read(buf),
                )
            3 -> ExitPoint.Location(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ExitPoint) = when(value) {
        is ExitPoint.Address -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeRecipient.allocationSize(value.`address`)
            )
        }
        is ExitPoint.Gateway -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeNodeIdentity.allocationSize(value.`identity`)
            )
        }
        is ExitPoint.Location -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`location`)
            )
        }
    }

    override fun write(value: ExitPoint, buf: ByteBuffer) {
        when(value) {
            is ExitPoint.Address -> {
                buf.putInt(1)
                FfiConverterTypeRecipient.write(value.`address`, buf)
                Unit
            }
            is ExitPoint.Gateway -> {
                buf.putInt(2)
                FfiConverterTypeNodeIdentity.write(value.`identity`, buf)
                Unit
            }
            is ExitPoint.Location -> {
                buf.putInt(3)
                FfiConverterString.write(value.`location`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class ExitStatus {
    
    data class Failure(
        val `error`: VpnException) : ExitStatus() {
        companion object
    }
    
    object Stopped : ExitStatus()
    
    

    
    companion object
}

public object FfiConverterTypeExitStatus : FfiConverterRustBuffer<ExitStatus>{
    override fun read(buf: ByteBuffer): ExitStatus {
        return when(buf.getInt()) {
            1 -> ExitStatus.Failure(
                FfiConverterTypeVpnError.read(buf),
                )
            2 -> ExitStatus.Stopped
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ExitStatus) = when(value) {
        is ExitStatus.Failure -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeVpnError.allocationSize(value.`error`)
            )
        }
        is ExitStatus.Stopped -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: ExitStatus, buf: ByteBuffer) {
        when(value) {
            is ExitStatus.Failure -> {
                buf.putInt(1)
                FfiConverterTypeVpnError.write(value.`error`, buf)
                Unit
            }
            is ExitStatus.Stopped -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class GatewayType {
    
    MIXNET_ENTRY,
    MIXNET_EXIT,
    WG;
    companion object
}


public object FfiConverterTypeGatewayType: FfiConverterRustBuffer<GatewayType> {
    override fun read(buf: ByteBuffer) = try {
        GatewayType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: GatewayType) = 4UL

    override fun write(value: GatewayType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class Ipv4Route {
    
    /**
     * Default IPv4 route (0.0.0.0/0)
     */
    object Default : Ipv4Route()
    
    
    /**
     * Individual IPv4 route
     */
    data class Specific(
        val `destination`: Ipv4Addr, 
        val `subnetMask`: Ipv4Addr, 
        val `gateway`: Ipv4Addr?) : Ipv4Route() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeIpv4Route : FfiConverterRustBuffer<Ipv4Route>{
    override fun read(buf: ByteBuffer): Ipv4Route {
        return when(buf.getInt()) {
            1 -> Ipv4Route.Default
            2 -> Ipv4Route.Specific(
                FfiConverterTypeIpv4Addr.read(buf),
                FfiConverterTypeIpv4Addr.read(buf),
                FfiConverterOptionalTypeIpv4Addr.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Ipv4Route) = when(value) {
        is Ipv4Route.Default -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is Ipv4Route.Specific -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeIpv4Addr.allocationSize(value.`destination`)
                + FfiConverterTypeIpv4Addr.allocationSize(value.`subnetMask`)
                + FfiConverterOptionalTypeIpv4Addr.allocationSize(value.`gateway`)
            )
        }
    }

    override fun write(value: Ipv4Route, buf: ByteBuffer) {
        when(value) {
            is Ipv4Route.Default -> {
                buf.putInt(1)
                Unit
            }
            is Ipv4Route.Specific -> {
                buf.putInt(2)
                FfiConverterTypeIpv4Addr.write(value.`destination`, buf)
                FfiConverterTypeIpv4Addr.write(value.`subnetMask`, buf)
                FfiConverterOptionalTypeIpv4Addr.write(value.`gateway`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class Ipv6Route {
    
    /**
     * Default IPv6 route (::/0)
     */
    object Default : Ipv6Route()
    
    
    /**
     * Individual IPv6 route
     */
    data class Specific(
        val `destination`: Ipv6Addr, 
        val `prefixLength`: kotlin.UByte, 
        val `gateway`: Ipv6Addr?) : Ipv6Route() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeIpv6Route : FfiConverterRustBuffer<Ipv6Route>{
    override fun read(buf: ByteBuffer): Ipv6Route {
        return when(buf.getInt()) {
            1 -> Ipv6Route.Default
            2 -> Ipv6Route.Specific(
                FfiConverterTypeIpv6Addr.read(buf),
                FfiConverterUByte.read(buf),
                FfiConverterOptionalTypeIpv6Addr.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Ipv6Route) = when(value) {
        is Ipv6Route.Default -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is Ipv6Route.Specific -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeIpv6Addr.allocationSize(value.`destination`)
                + FfiConverterUByte.allocationSize(value.`prefixLength`)
                + FfiConverterOptionalTypeIpv6Addr.allocationSize(value.`gateway`)
            )
        }
    }

    override fun write(value: Ipv6Route, buf: ByteBuffer) {
        when(value) {
            is Ipv6Route.Default -> {
                buf.putInt(1)
                Unit
            }
            is Ipv6Route.Specific -> {
                buf.putInt(2)
                FfiConverterTypeIpv6Addr.write(value.`destination`, buf)
                FfiConverterUByte.write(value.`prefixLength`, buf)
                FfiConverterOptionalTypeIpv6Addr.write(value.`gateway`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class MixnetEvent {
    
    data class Bandwidth(
        val v1: BandwidthEvent) : MixnetEvent() {
        companion object
    }
    
    data class Connection(
        val v1: ConnectionEvent) : MixnetEvent() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeMixnetEvent : FfiConverterRustBuffer<MixnetEvent>{
    override fun read(buf: ByteBuffer): MixnetEvent {
        return when(buf.getInt()) {
            1 -> MixnetEvent.Bandwidth(
                FfiConverterTypeBandwidthEvent.read(buf),
                )
            2 -> MixnetEvent.Connection(
                FfiConverterTypeConnectionEvent.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MixnetEvent) = when(value) {
        is MixnetEvent.Bandwidth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeBandwidthEvent.allocationSize(value.v1)
            )
        }
        is MixnetEvent.Connection -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeConnectionEvent.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: MixnetEvent, buf: ByteBuffer) {
        when(value) {
            is MixnetEvent.Bandwidth -> {
                buf.putInt(1)
                FfiConverterTypeBandwidthEvent.write(value.v1, buf)
                Unit
            }
            is MixnetEvent.Connection -> {
                buf.putInt(2)
                FfiConverterTypeConnectionEvent.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class MnemonicState {
    
    NOT_STORED,
    STORED;
    companion object
}


public object FfiConverterTypeMnemonicState: FfiConverterRustBuffer<MnemonicState> {
    override fun read(buf: ByteBuffer) = try {
        MnemonicState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: MnemonicState) = 4UL

    override fun write(value: MnemonicState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class NymVpnStatus {
    
    data class MixConnectInfo(
        val `mixConnectionInfo`: MixConnectionInfo, 
        val `mixExitConnectionInfo`: MixExitConnectionInfo) : NymVpnStatus() {
        companion object
    }
    
    data class WgConnectInfo(
        val `entryConnectionInfo`: WireguardConnectionInfo, 
        val `exitConnectionInfo`: WireguardConnectionInfo) : NymVpnStatus() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeNymVpnStatus : FfiConverterRustBuffer<NymVpnStatus>{
    override fun read(buf: ByteBuffer): NymVpnStatus {
        return when(buf.getInt()) {
            1 -> NymVpnStatus.MixConnectInfo(
                FfiConverterTypeMixConnectionInfo.read(buf),
                FfiConverterTypeMixExitConnectionInfo.read(buf),
                )
            2 -> NymVpnStatus.WgConnectInfo(
                FfiConverterTypeWireguardConnectionInfo.read(buf),
                FfiConverterTypeWireguardConnectionInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NymVpnStatus) = when(value) {
        is NymVpnStatus.MixConnectInfo -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMixConnectionInfo.allocationSize(value.`mixConnectionInfo`)
                + FfiConverterTypeMixExitConnectionInfo.allocationSize(value.`mixExitConnectionInfo`)
            )
        }
        is NymVpnStatus.WgConnectInfo -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeWireguardConnectionInfo.allocationSize(value.`entryConnectionInfo`)
                + FfiConverterTypeWireguardConnectionInfo.allocationSize(value.`exitConnectionInfo`)
            )
        }
    }

    override fun write(value: NymVpnStatus, buf: ByteBuffer) {
        when(value) {
            is NymVpnStatus.MixConnectInfo -> {
                buf.putInt(1)
                FfiConverterTypeMixConnectionInfo.write(value.`mixConnectionInfo`, buf)
                FfiConverterTypeMixExitConnectionInfo.write(value.`mixExitConnectionInfo`, buf)
                Unit
            }
            is NymVpnStatus.WgConnectInfo -> {
                buf.putInt(2)
                FfiConverterTypeWireguardConnectionInfo.write(value.`entryConnectionInfo`, buf)
                FfiConverterTypeWireguardConnectionInfo.write(value.`exitConnectionInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class SubscriptionState {
    
    NOT_ACTIVE,
    PENDING,
    COMPLETE,
    ACTIVE;
    companion object
}


public object FfiConverterTypeSubscriptionState: FfiConverterRustBuffer<SubscriptionState> {
    override fun read(buf: ByteBuffer) = try {
        SubscriptionState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: SubscriptionState) = 4UL

    override fun write(value: SubscriptionState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class TunStatus {
    
    UP,
    DOWN,
    INITIALIZING_CLIENT,
    ESTABLISHING_CONNECTION,
    DISCONNECTING;
    companion object
}


public object FfiConverterTypeTunStatus: FfiConverterRustBuffer<TunStatus> {
    override fun read(buf: ByteBuffer) = try {
        TunStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: TunStatus) = 4UL

    override fun write(value: TunStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class TunnelConnectionData {
    
    data class Mixnet(
        val v1: MixnetConnectionData) : TunnelConnectionData() {
        companion object
    }
    
    data class Wireguard(
        val v1: WireguardConnectionData) : TunnelConnectionData() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeTunnelConnectionData : FfiConverterRustBuffer<TunnelConnectionData>{
    override fun read(buf: ByteBuffer): TunnelConnectionData {
        return when(buf.getInt()) {
            1 -> TunnelConnectionData.Mixnet(
                FfiConverterTypeMixnetConnectionData.read(buf),
                )
            2 -> TunnelConnectionData.Wireguard(
                FfiConverterTypeWireguardConnectionData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TunnelConnectionData) = when(value) {
        is TunnelConnectionData.Mixnet -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMixnetConnectionData.allocationSize(value.v1)
            )
        }
        is TunnelConnectionData.Wireguard -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeWireguardConnectionData.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: TunnelConnectionData, buf: ByteBuffer) {
        when(value) {
            is TunnelConnectionData.Mixnet -> {
                buf.putInt(1)
                FfiConverterTypeMixnetConnectionData.write(value.v1, buf)
                Unit
            }
            is TunnelConnectionData.Wireguard -> {
                buf.putInt(2)
                FfiConverterTypeWireguardConnectionData.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class TunnelEvent {
    
    data class NewState(
        val v1: TunnelState) : TunnelEvent() {
        companion object
    }
    
    data class MixnetState(
        val v1: MixnetEvent) : TunnelEvent() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeTunnelEvent : FfiConverterRustBuffer<TunnelEvent>{
    override fun read(buf: ByteBuffer): TunnelEvent {
        return when(buf.getInt()) {
            1 -> TunnelEvent.NewState(
                FfiConverterTypeTunnelState.read(buf),
                )
            2 -> TunnelEvent.MixnetState(
                FfiConverterTypeMixnetEvent.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TunnelEvent) = when(value) {
        is TunnelEvent.NewState -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeTunnelState.allocationSize(value.v1)
            )
        }
        is TunnelEvent.MixnetState -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMixnetEvent.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: TunnelEvent, buf: ByteBuffer) {
        when(value) {
            is TunnelEvent.NewState -> {
                buf.putInt(1)
                FfiConverterTypeTunnelState.write(value.v1, buf)
                Unit
            }
            is TunnelEvent.MixnetState -> {
                buf.putInt(2)
                FfiConverterTypeMixnetEvent.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class TunnelState {
    
    object Disconnected : TunnelState()
    
    
    object Connecting : TunnelState()
    
    
    data class Connected(
        val `connectionData`: ConnectionData) : TunnelState() {
        companion object
    }
    
    data class Disconnecting(
        val `afterDisconnect`: ActionAfterDisconnect) : TunnelState() {
        companion object
    }
    
    data class Error(
        val v1: ErrorStateReason) : TunnelState() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeTunnelState : FfiConverterRustBuffer<TunnelState>{
    override fun read(buf: ByteBuffer): TunnelState {
        return when(buf.getInt()) {
            1 -> TunnelState.Disconnected
            2 -> TunnelState.Connecting
            3 -> TunnelState.Connected(
                FfiConverterTypeConnectionData.read(buf),
                )
            4 -> TunnelState.Disconnecting(
                FfiConverterTypeActionAfterDisconnect.read(buf),
                )
            5 -> TunnelState.Error(
                FfiConverterTypeErrorStateReason.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TunnelState) = when(value) {
        is TunnelState.Disconnected -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is TunnelState.Connecting -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is TunnelState.Connected -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeConnectionData.allocationSize(value.`connectionData`)
            )
        }
        is TunnelState.Disconnecting -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeActionAfterDisconnect.allocationSize(value.`afterDisconnect`)
            )
        }
        is TunnelState.Error -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeErrorStateReason.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: TunnelState, buf: ByteBuffer) {
        when(value) {
            is TunnelState.Disconnected -> {
                buf.putInt(1)
                Unit
            }
            is TunnelState.Connecting -> {
                buf.putInt(2)
                Unit
            }
            is TunnelState.Connected -> {
                buf.putInt(3)
                FfiConverterTypeConnectionData.write(value.`connectionData`, buf)
                Unit
            }
            is TunnelState.Disconnecting -> {
                buf.putInt(4)
                FfiConverterTypeActionAfterDisconnect.write(value.`afterDisconnect`, buf)
                Unit
            }
            is TunnelState.Error -> {
                buf.putInt(5)
                FfiConverterTypeErrorStateReason.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class TunnelType {
    
    MIXNET,
    WIREGUARD;
    companion object
}


public object FfiConverterTypeTunnelType: FfiConverterRustBuffer<TunnelType> {
    override fun read(buf: ByteBuffer) = try {
        TunnelType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: TunnelType) = 4UL

    override fun write(value: TunnelType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class VpnException: Exception() {
    
    class InternalException(
        
        val `details`: kotlin.String
        ) : VpnException() {
        override val message
            get() = "details=${ `details` }"
    }
    
    class NetworkConnectionException(
        
        val `details`: kotlin.String
        ) : VpnException() {
        override val message
            get() = "details=${ `details` }"
    }
    
    class GatewayException(
        
        val `details`: kotlin.String
        ) : VpnException() {
        override val message
            get() = "details=${ `details` }"
    }
    
    class InvalidCredential(
        
        val `details`: kotlin.String
        ) : VpnException() {
        override val message
            get() = "details=${ `details` }"
    }
    
    class OutOfBandwidth(
        ) : VpnException() {
        override val message
            get() = ""
    }
    
    class InvalidStateException(
        
        val `details`: kotlin.String
        ) : VpnException() {
        override val message
            get() = "details=${ `details` }"
    }
    
    class AccountReady(
        ) : VpnException() {
        override val message
            get() = ""
    }
    
    class NoAccountStored(
        ) : VpnException() {
        override val message
            get() = ""
    }
    
    class AccountNotActive(
        ) : VpnException() {
        override val message
            get() = ""
    }
    
    class NoActiveSubscription(
        ) : VpnException() {
        override val message
            get() = ""
    }
    
    class AccountDeviceNotRegistered(
        ) : VpnException() {
        override val message
            get() = ""
    }
    
    class AccountDeviceNotActive(
        ) : VpnException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<VpnException> {
        override fun lift(error_buf: RustBuffer.ByValue): VpnException = FfiConverterTypeVpnError.lift(error_buf)
    }

    
}

public object FfiConverterTypeVpnError : FfiConverterRustBuffer<VpnException> {
    override fun read(buf: ByteBuffer): VpnException {
        

        return when(buf.getInt()) {
            1 -> VpnException.InternalException(
                FfiConverterString.read(buf),
                )
            2 -> VpnException.NetworkConnectionException(
                FfiConverterString.read(buf),
                )
            3 -> VpnException.GatewayException(
                FfiConverterString.read(buf),
                )
            4 -> VpnException.InvalidCredential(
                FfiConverterString.read(buf),
                )
            5 -> VpnException.OutOfBandwidth()
            6 -> VpnException.InvalidStateException(
                FfiConverterString.read(buf),
                )
            7 -> VpnException.AccountReady()
            8 -> VpnException.NoAccountStored()
            9 -> VpnException.AccountNotActive()
            10 -> VpnException.NoActiveSubscription()
            11 -> VpnException.AccountDeviceNotRegistered()
            12 -> VpnException.AccountDeviceNotActive()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: VpnException): ULong {
        return when(value) {
            is VpnException.InternalException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`details`)
            )
            is VpnException.NetworkConnectionException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`details`)
            )
            is VpnException.GatewayException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`details`)
            )
            is VpnException.InvalidCredential -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`details`)
            )
            is VpnException.OutOfBandwidth -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VpnException.InvalidStateException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`details`)
            )
            is VpnException.AccountReady -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VpnException.NoAccountStored -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VpnException.AccountNotActive -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VpnException.NoActiveSubscription -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VpnException.AccountDeviceNotRegistered -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VpnException.AccountDeviceNotActive -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: VpnException, buf: ByteBuffer) {
        when(value) {
            is VpnException.InternalException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`details`, buf)
                Unit
            }
            is VpnException.NetworkConnectionException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`details`, buf)
                Unit
            }
            is VpnException.GatewayException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`details`, buf)
                Unit
            }
            is VpnException.InvalidCredential -> {
                buf.putInt(4)
                FfiConverterString.write(value.`details`, buf)
                Unit
            }
            is VpnException.OutOfBandwidth -> {
                buf.putInt(5)
                Unit
            }
            is VpnException.InvalidStateException -> {
                buf.putInt(6)
                FfiConverterString.write(value.`details`, buf)
                Unit
            }
            is VpnException.AccountReady -> {
                buf.putInt(7)
                Unit
            }
            is VpnException.NoAccountStored -> {
                buf.putInt(8)
                Unit
            }
            is VpnException.AccountNotActive -> {
                buf.putInt(9)
                Unit
            }
            is VpnException.NoActiveSubscription -> {
                buf.putInt(10)
                Unit
            }
            is VpnException.AccountDeviceNotRegistered -> {
                buf.putInt(11)
                Unit
            }
            is VpnException.AccountDeviceNotActive -> {
                buf.putInt(12)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTunnelStatusListener: FfiConverterRustBuffer<TunnelStatusListener?> {
    override fun read(buf: ByteBuffer): TunnelStatusListener? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTunnelStatusListener.read(buf)
    }

    override fun allocationSize(value: TunnelStatusListener?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTunnelStatusListener.allocationSize(value)
        }
    }

    override fun write(value: TunnelStatusListener?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTunnelStatusListener.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeDnsSettings: FfiConverterRustBuffer<DnsSettings?> {
    override fun read(buf: ByteBuffer): DnsSettings? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDnsSettings.read(buf)
    }

    override fun allocationSize(value: DnsSettings?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeDnsSettings.allocationSize(value)
        }
    }

    override fun write(value: DnsSettings?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDnsSettings.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeGatewayMinPerformance: FfiConverterRustBuffer<GatewayMinPerformance?> {
    override fun read(buf: ByteBuffer): GatewayMinPerformance? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeGatewayMinPerformance.read(buf)
    }

    override fun allocationSize(value: GatewayMinPerformance?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeGatewayMinPerformance.allocationSize(value)
        }
    }

    override fun write(value: GatewayMinPerformance?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeGatewayMinPerformance.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIpv4Settings: FfiConverterRustBuffer<Ipv4Settings?> {
    override fun read(buf: ByteBuffer): Ipv4Settings? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIpv4Settings.read(buf)
    }

    override fun allocationSize(value: Ipv4Settings?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIpv4Settings.allocationSize(value)
        }
    }

    override fun write(value: Ipv4Settings?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIpv4Settings.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIpv6Settings: FfiConverterRustBuffer<Ipv6Settings?> {
    override fun read(buf: ByteBuffer): Ipv6Settings? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIpv6Settings.read(buf)
    }

    override fun allocationSize(value: Ipv6Settings?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIpv6Settings.allocationSize(value)
        }
    }

    override fun write(value: Ipv6Settings?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIpv6Settings.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUserAgent: FfiConverterRustBuffer<UserAgent?> {
    override fun read(buf: ByteBuffer): UserAgent? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUserAgent.read(buf)
    }

    override fun allocationSize(value: UserAgent?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeUserAgent.allocationSize(value)
        }
    }

    override fun write(value: UserAgent?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUserAgent.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAccountState: FfiConverterRustBuffer<AccountState?> {
    override fun read(buf: ByteBuffer): AccountState? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAccountState.read(buf)
    }

    override fun allocationSize(value: AccountState?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAccountState.allocationSize(value)
        }
    }

    override fun write(value: AccountState?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAccountState.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeDeviceState: FfiConverterRustBuffer<DeviceState?> {
    override fun read(buf: ByteBuffer): DeviceState? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDeviceState.read(buf)
    }

    override fun allocationSize(value: DeviceState?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeDeviceState.allocationSize(value)
        }
    }

    override fun write(value: DeviceState?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDeviceState.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeMnemonicState: FfiConverterRustBuffer<MnemonicState?> {
    override fun read(buf: ByteBuffer): MnemonicState? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMnemonicState.read(buf)
    }

    override fun allocationSize(value: MnemonicState?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeMnemonicState.allocationSize(value)
        }
    }

    override fun write(value: MnemonicState?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMnemonicState.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSubscriptionState: FfiConverterRustBuffer<SubscriptionState?> {
    override fun read(buf: ByteBuffer): SubscriptionState? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSubscriptionState.read(buf)
    }

    override fun allocationSize(value: SubscriptionState?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeSubscriptionState.allocationSize(value)
        }
    }

    override fun write(value: SubscriptionState?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSubscriptionState.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeIpv4Route: FfiConverterRustBuffer<List<Ipv4Route>?> {
    override fun read(buf: ByteBuffer): List<Ipv4Route>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeIpv4Route.read(buf)
    }

    override fun allocationSize(value: List<Ipv4Route>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeIpv4Route.allocationSize(value)
        }
    }

    override fun write(value: List<Ipv4Route>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeIpv4Route.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeIpv6Route: FfiConverterRustBuffer<List<Ipv6Route>?> {
    override fun read(buf: ByteBuffer): List<Ipv6Route>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeIpv6Route.read(buf)
    }

    override fun allocationSize(value: List<Ipv6Route>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeIpv6Route.allocationSize(value)
        }
    }

    override fun write(value: List<Ipv6Route>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeIpv6Route.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIpv4Addr: FfiConverterRustBuffer<Ipv4Addr?> {
    override fun read(buf: ByteBuffer): Ipv4Addr? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIpv4Addr.read(buf)
    }

    override fun allocationSize(value: Ipv4Addr?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIpv4Addr.allocationSize(value)
        }
    }

    override fun write(value: Ipv4Addr?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIpv4Addr.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIpv6Addr: FfiConverterRustBuffer<Ipv6Addr?> {
    override fun read(buf: ByteBuffer): Ipv6Addr? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIpv6Addr.read(buf)
    }

    override fun allocationSize(value: Ipv6Addr?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIpv6Addr.allocationSize(value)
        }
    }

    override fun write(value: Ipv6Addr?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIpv6Addr.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePathBuf: FfiConverterRustBuffer<PathBuf?> {
    override fun read(buf: ByteBuffer): PathBuf? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePathBuf.read(buf)
    }

    override fun allocationSize(value: PathBuf?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypePathBuf.allocationSize(value)
        }
    }

    override fun write(value: PathBuf?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePathBuf.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUrl: FfiConverterRustBuffer<Url?> {
    override fun read(buf: ByteBuffer): Url? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUrl.read(buf)
    }

    override fun allocationSize(value: Url?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeUrl.allocationSize(value)
        }
    }

    override fun write(value: Url?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUrl.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeLocation: FfiConverterRustBuffer<List<Location>> {
    override fun read(buf: ByteBuffer): List<Location> {
        val len = buf.getInt()
        return List<Location>(len) {
            FfiConverterTypeLocation.read(buf)
        }
    }

    override fun allocationSize(value: List<Location>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeLocation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Location>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeLocation.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeValidatorDetails: FfiConverterRustBuffer<List<ValidatorDetails>> {
    override fun read(buf: ByteBuffer): List<ValidatorDetails> {
        val len = buf.getInt()
        return List<ValidatorDetails>(len) {
            FfiConverterTypeValidatorDetails.read(buf)
        }
    }

    override fun allocationSize(value: List<ValidatorDetails>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeValidatorDetails.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ValidatorDetails>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeValidatorDetails.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIpv4Route: FfiConverterRustBuffer<List<Ipv4Route>> {
    override fun read(buf: ByteBuffer): List<Ipv4Route> {
        val len = buf.getInt()
        return List<Ipv4Route>(len) {
            FfiConverterTypeIpv4Route.read(buf)
        }
    }

    override fun allocationSize(value: List<Ipv4Route>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIpv4Route.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Ipv4Route>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIpv4Route.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIpv6Route: FfiConverterRustBuffer<List<Ipv6Route>> {
    override fun read(buf: ByteBuffer): List<Ipv6Route> {
        val len = buf.getInt()
        return List<Ipv6Route>(len) {
            FfiConverterTypeIpv6Route.read(buf)
        }
    }

    override fun allocationSize(value: List<Ipv6Route>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIpv6Route.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Ipv6Route>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIpv6Route.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIpAddr: FfiConverterRustBuffer<List<IpAddr>> {
    override fun read(buf: ByteBuffer): List<IpAddr> {
        val len = buf.getInt()
        return List<IpAddr>(len) {
            FfiConverterTypeIpAddr.read(buf)
        }
    }

    override fun allocationSize(value: List<IpAddr>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIpAddr.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<IpAddr>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIpAddr.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIpv4Network: FfiConverterRustBuffer<List<Ipv4Network>> {
    override fun read(buf: ByteBuffer): List<Ipv4Network> {
        val len = buf.getInt()
        return List<Ipv4Network>(len) {
            FfiConverterTypeIpv4Network.read(buf)
        }
    }

    override fun allocationSize(value: List<Ipv4Network>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIpv4Network.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Ipv4Network>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIpv4Network.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIpv6Network: FfiConverterRustBuffer<List<Ipv6Network>> {
    override fun read(buf: ByteBuffer): List<Ipv6Network> {
        val len = buf.getInt()
        return List<Ipv6Network>(len) {
            FfiConverterTypeIpv6Network.read(buf)
        }
    }

    override fun allocationSize(value: List<Ipv6Network>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIpv6Network.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Ipv6Network>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIpv6Network.write(it, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias BoxedNodeIdentity = kotlin.String
public typealias FfiConverterTypeBoxedNodeIdentity = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias BoxedRecepient = kotlin.String
public typealias FfiConverterTypeBoxedRecepient = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias IpAddr = kotlin.String
public typealias FfiConverterTypeIpAddr = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias IpPair = kotlin.String
public typealias FfiConverterTypeIpPair = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Ipv4Addr = kotlin.String
public typealias FfiConverterTypeIpv4Addr = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Ipv4Network = kotlin.String
public typealias FfiConverterTypeIpv4Network = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Ipv6Addr = kotlin.String
public typealias FfiConverterTypeIpv6Addr = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Ipv6Network = kotlin.String
public typealias FfiConverterTypeIpv6Network = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias NodeIdentity = kotlin.String
public typealias FfiConverterTypeNodeIdentity = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias OffsetDateTime = kotlin.Long
public typealias FfiConverterTypeOffsetDateTime = FfiConverterLong



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias PathBuf = kotlin.String
public typealias FfiConverterTypePathBuf = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias PublicKey = kotlin.String
public typealias FfiConverterTypePublicKey = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Recipient = kotlin.String
public typealias FfiConverterTypeRecipient = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias SocketAddr = kotlin.String
public typealias FfiConverterTypeSocketAddr = FfiConverterString





/**
 * Typealias from the type name used in the UDL file to the custom type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Url = URL



public object FfiConverterTypeUrl: FfiConverter<Url, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue): Url {
        val builtinValue = FfiConverterString.lift(value)
        return URI(builtinValue).toURL()
    }

    override fun lower(value: Url): RustBuffer.ByValue {
        val builtinValue = value.toString()
        return FfiConverterString.lower(builtinValue)
    }

    override fun read(buf: ByteBuffer): Url {
        val builtinValue = FfiConverterString.read(buf)
        return URI(builtinValue).toURL()
    }

    override fun allocationSize(value: Url): ULong {
        val builtinValue = value.toString()
        return FfiConverterString.allocationSize(builtinValue)
    }

    override fun write(value: Url, buf: ByteBuffer) {
        val builtinValue = value.toString()
        FfiConverterString.write(builtinValue, buf)
    }
}
    @Throws(VpnException::class) fun `fetchEnvironment`(`networkName`: kotlin.String): NetworkEnvironment {
            return FfiConverterTypeNetworkEnvironment.lift(
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_fetchenvironment(
        FfiConverterString.lower(`networkName`),_status)
}
    )
    }
    

    @Throws(VpnException::class) fun `getAccountSummary`(): AccountStateSummary {
            return FfiConverterTypeAccountStateSummary.lift(
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_getaccountsummary(
        _status)
}
    )
    }
    

    @Throws(VpnException::class) fun `getGatewayCountries`(`apiUrl`: Url, `nymVpnApiUrl`: Url?, `gwType`: GatewayType, `userAgent`: UserAgent?, `minGatewayPerformance`: GatewayMinPerformance?): List<Location> {
            return FfiConverterSequenceTypeLocation.lift(
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_getgatewaycountries(
        FfiConverterTypeUrl.lower(`apiUrl`),FfiConverterOptionalTypeUrl.lower(`nymVpnApiUrl`),FfiConverterTypeGatewayType.lower(`gwType`),FfiConverterOptionalTypeUserAgent.lower(`userAgent`),FfiConverterOptionalTypeGatewayMinPerformance.lower(`minGatewayPerformance`),_status)
}
    )
    }
    

    @Throws(VpnException::class) fun `getLowLatencyEntryCountry`(`apiUrl`: Url, `vpnApiUrl`: Url?, `userAgent`: UserAgent): Location {
            return FfiConverterTypeLocation.lift(
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_getlowlatencyentrycountry(
        FfiConverterTypeUrl.lower(`apiUrl`),FfiConverterOptionalTypeUrl.lower(`vpnApiUrl`),FfiConverterTypeUserAgent.lower(`userAgent`),_status)
}
    )
    }
    
 fun `initLogger`()
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_initlogger(
        _status)
}
    
    

    @Throws(VpnException::class) fun `isAccountMnemonicStored`(`path`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_isaccountmnemonicstored(
        FfiConverterString.lower(`path`),_status)
}
    )
    }
    

    @Throws(VpnException::class) fun `removeAccountMnemonic`(`path`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_removeaccountmnemonic(
        FfiConverterString.lower(`path`),_status)
}
    )
    }
    

    @Throws(VpnException::class) fun `resetDeviceIdentity`(`path`: kotlin.String)
        = 
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_resetdeviceidentity(
        FfiConverterString.lower(`path`),_status)
}
    
    

    @Throws(VpnException::class) fun `startAccountController`(`dataDir`: kotlin.String)
        = 
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_startaccountcontroller(
        FfiConverterString.lower(`dataDir`),_status)
}
    
    

    @Throws(VpnException::class) fun `startVpn`(`config`: VpnConfig)
        = 
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_startvpn(
        FfiConverterTypeVPNConfig.lower(`config`),_status)
}
    
    

    @Throws(VpnException::class) fun `stopAccountController`()
        = 
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_stopaccountcontroller(
        _status)
}
    
    

    @Throws(VpnException::class) fun `stopVpn`()
        = 
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_stopvpn(
        _status)
}
    
    

    @Throws(VpnException::class) fun `storeAccountMnemonic`(`mnemonic`: kotlin.String, `path`: kotlin.String)
        = 
    uniffiRustCallWithError(VpnException) { _status ->
    UniffiLib.INSTANCE.uniffi_nym_vpn_lib_fn_func_storeaccountmnemonic(
        FfiConverterString.lower(`mnemonic`),FfiConverterString.lower(`path`),_status)
}
    
    


