name: build-nym-vpn-desktop-linux
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      TAURI_PRIVATE_KEY:
        required: true
      TAURI_KEY_PASSWORD:
        required: true
      DESKTOP_JS_SENTRY_DSN:
        required: true
    outputs:
      UPLOAD_DIR_LINUX:
        value: ${{ jobs.build-linux.outputs.UPLOAD_DIR_LINUX }}
      PKG_VERSION:
        value: ${{ jobs.build-linux.outputs.PKG_VERSION }}
      RUST_VERSION:
        value: ${{ jobs.build-linux.outputs.RUST_VERSION }}

env:
  CARGO_TERM_COLOR: always
  CARGO_TARGET: release
  WG_GO_LIB_PATH: ${{ github.workspace }}/lib
  WG_GO_LIB_NAME: wireguard-go_ubuntu-22.04_x86_64
  UPDATER_BUNDLE_NAME: updater_linux_x86_64.AppImage.tar.gz
  UPLOAD_DIR_LINUX: linux_artifacts

jobs:
  build-wireguard-go-linux:
    uses: ./.github/workflows/build-wireguard-go-linux.yml

  build-linux:
    needs: build-wireguard-go-linux
    runs-on: ubuntu-22.04-arc
    outputs:
      UPLOAD_DIR_LINUX: ${{ env.UPLOAD_DIR_LINUX }}
      PKG_VERSION: ${{ steps.package-version.outputs.metadata }}
      RUST_VERSION: ${{ steps.rust-version.outputs.rustc }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev squashfs-tools libayatana-appindicator3-dev make libfuse2 librsvg2-dev file

      - name: Install rust toolchain
        uses: brndnmtthws/rust-action-rustup@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install cargo-about
        run: cargo install --locked cargo-about

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get package version
        id: package-version
        uses: nicolaiunrein/cargo-get@master
        with:
          subcommand: package.version --entry nym-vpn-desktop/src-tauri

      - name: Download wireguard-go artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WG_GO_LIB_NAME }}
          path: ${{ env.WG_GO_LIB_PATH }}

      # - name: Generate licenses file (Js & Rust) and install JS dependencies
      #   working-directory: nym-vpn-desktop
      #   run: |
      #     npm i license-checker-rseidelsohn
      #     rm public/licenses-js.json || true
      #     npm run gen:licenses:js
      #     rm public/licenses-rust.json || true
      #     npm run gen:licenses:rust
      #     npm ci

      - name: Build desktop client
        working-directory: nym-vpn-desktop/src-tauri
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APP_SENTRY_DSN: ${{ secrets.DESKTOP_JS_SENTRY_DSN }}
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
        run: |
          npm run tauri build --${{ env.CARGO_TARGET }}
          ls -la target/release/ || true
          ls -la target/release/bundle || true
          ls -la target/release/bundle/* || true

      - name: Get rust version used for build
        id: rust-version
        run: |
          echo "rustc=$(rustc -V)" >> $GITHUB_OUTPUT

      - name: Move things around to prepare for upload
        env:
          SRC_APPIMAGE: nym-vpn-desktop/src-tauri/target/release/bundle/appimage/nym-vpn_${{ steps.package-version.outputs.metadata }}_amd64.AppImage
          SRC_DEB: nym-vpn-desktop/src-tauri/target/release/bundle/deb/nym-vpn_${{ steps.package-version.outputs.metadata }}_amd64.deb
        run: |
          mkdir ${{ env.UPLOAD_DIR_LINUX }}
          echo "Move AppImage"
          cp -vpr ${{ env.SRC_APPIMAGE }} ${{ env.UPLOAD_DIR_LINUX }}
          echo "Move updater bundle and signature"
          cp -vpr ${{ env.SRC_APPIMAGE }}.tar.gz     ${{ env.UPLOAD_DIR_LINUX }}/${{ env.UPDATER_BUNDLE_NAME }}
          cp -vpr ${{ env.SRC_APPIMAGE }}.tar.gz.sig ${{ env.UPLOAD_DIR_LINUX }}/${{ env.UPDATER_BUNDLE_NAME }}.sig
          echo "Move debian pkg"
          cp -vpr ${{ env.SRC_DEB }} ${{ env.UPLOAD_DIR_LINUX }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_DIR_LINUX }}
          path: ${{ env.UPLOAD_DIR_LINUX }}
          retention-days: 1
