# TODO this template could be use once nym-vpn-lib is ready to be
# build as a static/shared library (including FFI layer) and used
# as a true library

name: ci-lib

on:
  workflow_dispatch:
  # reusable workflow
  workflow_call:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-16-core, macos-latest, custom-runner-mac-m1]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout nym-vpn-client
        uses: actions/checkout@v4
        with:
          path: nym-vpn-client
          # fetch only the root files and these dirs
          sparse-checkout: |
            nym-vpn-lib
            wireguard

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Set LIBRARY_PATH
        working-directory: nym-vpn-client
        run: |
          if ${{ contains(matrix.os, 'ubuntu') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'mac-m1') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/aarch64-apple-darwin" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'macos') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
          fi

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1') || contains(matrix.os, 'windows')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Build wireguard
        working-directory: nym-vpn-client
        run: ./wireguard/build-wireguard-go.sh

      - name: Clippy check
        working-directory: nym-vpn-client/nym-vpn-lib
        run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo clippy

      - name: Build
        working-directory: nym-vpn-client/nym-vpn-lib
        run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo build --release --verbose

      - name: Upload artifacts (Linux build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'ubuntu')
        with:
          name: nym-vpn-lib_ubuntu-22.04
          path: |
            nym-vpn-client/target/release/libnym_vpn_lib.d
            nym-vpn-client/target/release/libnym_vpn_lib.rlib
            nym-vpn-client/build/lib/x86_64-unknown-linux-gnu

      - name: Upload artifacts (macos amd64 build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'macos')
        with:
          name: nym-vpn-lib_macos_x86_64
          # TODO fix artifact paths
          path: |
            nym-vpn-client/target/release/libnym_vpn_lib.d
            nym-vpn-client/target/release/libnym_vpn_lib.rlib
            nym-vpn-client/build/lib/x86_64-apple-darwin

      - name: Upload artifacts (macos arm build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'mac-m1')
        with:
          name: nym-vpn-lib_macos-m1
          # TODO fix artifact paths
          path: |
            nym-vpn-client/target/release/libnym_vpn_lib.d
            nym-vpn-client/target/release/libnym_vpn_lib.rlib
            nym-vpn-client/build/lib/aarch64-apple-darwin
