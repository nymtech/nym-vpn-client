name: ci-nym-vpn-cli

on:
  # push:
  pull_request:
    paths:
      - "nym-vpn-cli/**"
      - "nym-vpn-lib/**"
      - "wireguard/**"
      - "Cargo.toml"
      - ".github/workflows/ci-nym-vpn-cli.yml"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        # windows-2022 is incredibly slow right now https://github.com/actions/runner-images/issues/7320
        os: [ubuntu-22.04, macos-latest, windows-2019]
    continue-on-error: ${{ matrix.os == 'windows-2019' }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Support longpaths on windows
      if: contains(matrix.os, 'windows')
      run: git config --system core.longpaths true

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler
      if: matrix.os == 'ubuntu-22.04'

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Set LIBRARY_PATH
      shell: bash
      run: |
        if ${{ contains(matrix.os, 'ubuntu') }}; then
          echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
        elif ${{ contains(matrix.os, 'macos') }}; then
          echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
        elif ${{ contains(matrix.os, 'windows') }}; then
          echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/build/lib/x86_64-pc-windows-msvc" >> $GITHUB_ENV
        fi

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'windows')
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Build wireguard
      run: ./wireguard/build-wireguard-go.sh

    - name: Build
      run: cargo build --verbose
      env:
        RUSTFLAGS: "-L ${{ env.LIBRARY_PATH }}"

    - name: Run tests
      run: cargo test --verbose
      env:
        RUSTFLAGS: "-L ${{ env.LIBRARY_PATH }}"

    - name: Clippy
      run: cargo clippy -- -Dwarnings
      env:
        RUSTFLAGS: "-L ${{ env.LIBRARY_PATH }}"
