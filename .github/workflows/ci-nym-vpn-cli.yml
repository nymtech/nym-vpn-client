name: ci-nym-vpn-cli

on:
  # push:
  pull_request:
    paths:
      - "nym-vpn-cli/**"
      - "nym-vpn-lib/**"
      - "wireguard/**"
      - "Cargo.toml"
      - ".github/workflows/ci-nym-vpn-cli.yml"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, custom-runner-mac-m1, windows-2022 ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Cleanup working directory'
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler git curl gcc g++ make
        if: matrix.os == 'ubuntu-22.04'

      - name: Support longpaths on windows
        if: contains(matrix.os, 'windows')
        run: git config --system core.longpaths true

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install rust toolchain
        id: rust-toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Add iOS target
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        run: rustup target add aarch64-apple-ios

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-toolchain.outputs.cachekey }}
          workspaces: |
            nym-vpn-cli

      - name: Set env
        shell: bash
        run: |
          if ${{ contains(matrix.os, 'ubuntu') || matrix.os == 'ubuntu-22.04' }}; then
            triplet=x86_64-unknown-linux-gnu
          elif ${{ matrix.os == 'macos-12' || matrix.os == 'macos-13' }}; then
            triplet=x86_64-apple-darwin
          elif ${{ contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1') }}; then
            triplet=universal-apple-darwin
          elif ${{ contains(matrix.os, 'windows') }}; then
            triplet=x86_64-pc-windows-msvc
          else
            echo " âœ— unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          echo "TRIPLET=$triplet" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L ${GITHUB_WORKSPACE}/build/lib/${triplet}" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'windows')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: rustfmt check
        run: cargo fmt --check

      - name: Build wireguard
        run: ./wireguard/build-wireguard-go.sh

      - name: Build
        if: "!contains(matrix.os, 'windows')"
        run: cargo build --verbose

      - name: Build (iOS)
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        run: cargo build --verbose --target aarch64-apple-ios -p nym-vpn-lib

      - name: Run tests
        if: "!contains(matrix.os, 'windows')"
        run: cargo test --verbose

      - name: Clippy
        run: cargo clippy -- -Dwarnings

      # TODO: Activate clippy for iOS when starting to do usefule work
      # - name: Clippy (iOS)
      #   if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
      #   run: cargo clippy --target aarch64-apple-ios -p nym-vpn-lib -- -Dwarnings
