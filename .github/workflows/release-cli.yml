name: release-cli

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        os: [ubuntu-22.04-16-core, macos-latest-large, custom-runner-mac-m1]
    uses: ./.github/workflows/ci-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-16-core, macos-latest, custom-runner-mac-m1]
    runs-on: ${{ matrix.os }}

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-cli
            nym-vpn-lib

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Download wireguard-go artifacts (linux x86_64)
        uses: actions/download-artifact@v3
        if: contains(matrix.os, 'ubuntu')
        with:
          name: wireguard-go_linux-x86_64
          path: lib

      - name: Download wireguard-go artifacts (macos aarch64)
        uses: actions/download-artifact@v3
        if: contains(matrix.os, 'mac-m1')
        with:
          name: wireguard-go_macos-aarch64
          path: lib

      - name: Download wireguard-go artifacts (macos x86_64)
        uses: actions/download-artifact@v3
        if: contains(matrix.os, 'macos')
        with:
          name: wireguard-go_macos-x86_64
          path: lib

      - name: Set LIBRARY_PATH
        working-directory: nym-vpn-client
        shell: bash
        run: |
          if ${{ contains(matrix.os, 'ubuntu') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'mac-m1') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/aarch64-apple-darwin" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'macos') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
          fi

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1') || contains(matrix.os, 'windows')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo build --release --verbose

      - name: Run tests
        run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo test --release --verbose

      - name: Get package name
        id: package-version
        uses: nicolaiunrein/cargo-get@master
        with:
          subcommand: package.version --entry="nym-vpn-cli"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-22.04'
        with:
          name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_ubuntu-22.04_amd64
          path: target/release/nym-vpn-cli

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
          name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_macos_x86_64
          path: target/release/nym-vpn-cli

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'custom-runner-mac-m1'
        with:
          name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_macos_aarch64
          path: target/release/nym-vpn-cli
