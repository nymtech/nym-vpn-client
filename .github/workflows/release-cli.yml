name: release-cli

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest, custom-runner-mac-m1]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler
      if: matrix.os == 'ubuntu-22.04'

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Set LIBRARY_PATH
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
          echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" = "custom-runner-mac-m1" ]; then
          echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/build/lib/aarch64-apple-darwin" >> $GITHUB_ENV
        fi

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build wireguard
      run: ./wireguard/build-wireguard-go.sh

    - name: Build
      run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo build --release --verbose

    - name: Run tests
      run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo test --release --verbose

    - name: Get package name
      id: package-version
      uses: nicolaiunrein/cargo-get@master
      with:
        subcommand: package.version --entry="nym-vpn-cli"

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      if: matrix.os == 'ubuntu-22.04'
      with:
        name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_ubuntu-22.04_amd64
        path: target/release/nym-vpn-cli

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      if: matrix.os == 'macos-latest'
      with:
        name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_macos_x86_64
        path: target/release/nym-vpn-cli

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      if: matrix.os == 'custom-runner-mac-m1'
      with:
        name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_macos_aarch64
        path: target/release/nym-vpn-cli
