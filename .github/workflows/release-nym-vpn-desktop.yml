name: release-nym-vpn-desktop
on:
  # schedule:
  #   - cron: '4 4 * * *'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
      publish:
        type: boolean
        description: Publish Release
        required: true
        default: false
  push:
    tags:
      - nym-vpn-desktop-v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        os:
          [
            ubuntu-22.04-16-core,
            # ubuntu-20.04-16-core,
            # macos-latest,
            custom-runner-mac-m1,
          ]
    uses: ./.github/workflows/build-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build:
    needs: build-wireguard-go
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            ubuntu-22.04-16-core,
            # ubuntu-20.04-16-core,
            # macos-latest,
            custom-runner-mac-m1,
          ]
    runs-on: ${{ matrix.os }}
    env:
      # TODO use repo secrets instead
      TAURI_PRIVATE_KEY: "1234"
      TAURI_KEY_PASSWORD: "1234"
      WG_GO_LIB_PATH: ${{ github.workspace }}/lib

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-desktop
            nym-vpn-lib

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev

      - name: Get version
        working-directory: nym-vpn-desktop/src-tauri
        shell: bash
        run: |
          version=$(jq '.package.version' --raw-output tauri.conf.json)
          echo " ✓ App version: $version"
          echo "APP_VERSION=$version" >> $GITHUB_ENV

      - name: Check tag name consistency
        if: github.event_name == 'push'
        run: |
          if [[ nym-vpn-desktop-v${{ env.APP_VERSION }} != ${{ github.ref_name }} ]]; then
            exit 1
          fi

      - name: Set env
        run: |
          if ${{ contains(matrix.os, 'ubuntu-22.04') }}; then
            platform_arch=ubuntu-22.04_x86_64
          elif ${{ contains(matrix.os, 'ubuntu-20.04') }}; then
            platform_arch=ubuntu-20.04_x86_64
          elif ${{ contains(matrix.os, 'mac-m1') }}; then
            platform_arch=macos_aarch64
          elif ${{ contains(matrix.os, 'macos') }}; then
            platform_arch=macos_x86_64
          else
            echo " ✗ unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          wg_go_lib_name="wireguard-go_$platform_arch"
          artifact_dir="nym-vpn-desktop_${{ env.APP_VERSION }}_$platform_arch"
          artifact_archive="$artifact_dir.tar.gz"
          artifact_checksum="$artifact_archive.sha256sum"
          # debug
          echo " ✓ PLATFORM_ARCH: $platform_arch"
          echo " ✓ WG_GO_LIB_NAME: $wg_go_lib_name"
          echo " ✓ WG_GO_LIB_PATH: ${{ env.WG_GO_LIB_PATH }}"
          echo " ✓ ARTIFACT_DIR: $artifact_dir"
          echo " ✓ ARTIFACT_ARCHIVE: $artifact_archive"
          # set github env
          echo "PLATFORM_ARCH=$platform_arch" >> $GITHUB_ENV
          echo "WG_GO_LIB_NAME=$wg_go_lib_name" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$artifact_dir" >> $GITHUB_ENV
          echo "ARTIFACT_ARCHIVE=$artifact_archive" >> $GITHUB_ENV
          echo "ARTIFACT_CHECKSUM=$artifact_checksum" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Download wireguard-go artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WG_GO_LIB_NAME }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare desktop build
        run: mkdir nym-vpn-desktop/dist

      - name: Install node dependencies
        working-directory: nym-vpn-desktop
        run: npm i

      - name: Build desktop client
        working-directory: nym-vpn-desktop/src-tauri
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ env.TAURI_PRIVATE_PASSWORD }}
        shell: bash
        run: |
          npm run tauri build
          ls -la target/release/
          ls -la target/release/bundle
          ls -la target/release/bundle/*
          # tar -cvf bundle.tar target/release/bundle
        # TODO ignore `Error invalid utf-8 sequence of 1 bytes from index X` error
        continue-on-error: true

      - name: Create archive
        shell: bash
        run: |
          mkdir ${{ env.ARTIFACT_DIR }}
          cp -vpr nym-vpn-desktop/src-tauri/target/release/bundle/* ${{ env.ARTIFACT_DIR }}
          tar -cvzf ${{ env.ARTIFACT_ARCHIVE }} ${{ env.ARTIFACT_DIR }}

      - name: Upload artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_ARCHIVE }}
          path: ${{ env.ARTIFACT_ARCHIVE }}
          retention-days: 10
