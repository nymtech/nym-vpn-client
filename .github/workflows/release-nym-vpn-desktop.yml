name: release-nym-vpn-desktop
on:
  schedule:
    - cron: "4 4 * * *"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: nightly-desktop
      publish:
        type: boolean
        description: Publish Release
        required: true
        default: false
  push:
    tags:
      - nym-vpn-desktop-v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        os: [ubuntu-22.04-16-core, macos-14]
    uses: ./.github/workflows/build-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build:
    needs: build-wireguard-go
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-16-core, macos-14]
    runs-on: ${{ matrix.os }}
    env:
      WG_GO_LIB_PATH: ${{ github.workspace }}/lib
      UPDATER_BUNDLE_DIR: updater_bundle

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'macos')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-desktop
            nym-vpn-lib

      - name: Install system dependencies (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev make libfuse2

      - name: Get package version
        id: package-version
        uses: nicolaiunrein/cargo-get@master
        with:
          subcommand: package.version --entry nym-vpn-desktop/src-tauri

      - name: Check tag name consistency
        if: github.event_name == 'push'
        run: |
          if [[ nym-vpn-desktop-v${{ steps.package-version.outputs.metadata }} != ${{ github.ref_name }} ]]; then
            exit 1
          fi

      - name: Check name consistency
        if: inputs.tag_name == 'nightly'
        run: exit 1

      - name: Set env
        id: set_env
        run: |
          if ${{ contains(matrix.os, 'ubuntu-22.04') }}; then
            platform_arch=ubuntu-22.04_x86_64
          elif ${{ contains(matrix.os, 'ubuntu-20.04') }}; then
            platform_arch=ubuntu-20.04_x86_64
          elif ${{ matrix.os == 'macos-14' }}; then
            platform_arch=macos_universal
          else
            echo " ✗ unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          version=${{ steps.package-version.outputs.metadata }}
          wg_go_lib_name="wireguard-go_$platform_arch"
          artifact_dir="nym-vpn-desktop_${version}_$platform_arch"
          artifact_archive="$artifact_dir.tar.gz"
          artifact_checksum="$artifact_archive.sha256sum"
          updater_bundle_name="updater-bundle_${version}_$platform_arch"
          # debug
          echo " ✓ PLATFORM_ARCH: $platform_arch"
          echo " ✓ WG_GO_LIB_NAME: $wg_go_lib_name"
          echo " ✓ WG_GO_LIB_PATH: ${{ env.WG_GO_LIB_PATH }}"
          echo " ✓ ARTIFACT_DIR: $artifact_dir"
          echo " ✓ ARTIFACT_ARCHIVE: $artifact_archive"
          echo " ✓ UPDATER_BUNDLE_NAME: $updater_bundle_name"
          echo " ✓ UPDATER_BUNDLE_DIR: ${{ env.UPDATER_BUNDLE_DIR }}"
          # set github env
          echo "PLATFORM_ARCH=$platform_arch" >> $GITHUB_ENV
          echo "WG_GO_LIB_NAME=$wg_go_lib_name" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$artifact_dir" >> $GITHUB_ENV
          echo "ARTIFACT_ARCHIVE=$artifact_archive" >> $GITHUB_ENV
          echo "ARTIFACT_CHECKSUM=$artifact_checksum" >> $GITHUB_ENV
          echo "UPDATER_BUNDLE_NAME=$updater_bundle_name" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install cargo-about
        run: cargo install --locked cargo-about

      - name: Install extra arch macos
        if: env.PLATFORM_ARCH == 'macos_universal'
        run: |
          rustup target add x86_64-apple-darwin
          echo "CARGO_TARGET=--target universal-apple-darwin" >> $GITHUB_ENV
          echo "ARCH_TARGET=universal-apple-darwin" >> $GITHUB_ENV

      - name: Download wireguard-go artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WG_GO_LIB_NAME }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare desktop build
        run: mkdir nym-vpn-desktop/dist

      - name: Generate licenses file (Rust)
        run: |
          rm nym-vpn-desktop/public/licenses-rust.html || true
          make generate-licenses-desktop

      - name: Generate licenses file (Js)
        working-directory: nym-vpn-desktop
        run: |
          rm public/licenses-js.json || true
          npm run gen:licenses

      - name: Install JS dependencies
        working-directory: nym-vpn-desktop
        run: npm ci

      - name: Build desktop client
        working-directory: nym-vpn-desktop/src-tauri
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT_PASS }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_SENTRY_DSN: ${{ secrets.DESKTOP_JS_SENTRY_DSN }}
          # TODO try fixing `error running bundle_dmg.sh` (macos build)
          NO_STRIP: ${{ contains(matrix.os, 'mac') && 'true' }}
        shell: bash
        run: |
          npm run tauri build -- ${{ env.CARGO_TARGET }}
          ls -la target/release/ || true
          ls -la target/release/bundle || true
          ls -la target/release/bundle/* || true
          ls -la target/${{ env.ARCH_TARGET }}/release/ || true
          ls -la target/${{ env.ARCH_TARGET }}/release/bundle || true
          ls -la target/${{ env.ARCH_TARGET }}/release/bundle/* || true

      - name: Move updater bundle artifacts (Linux)
        if: contains(matrix.os, 'ubuntu')
        shell: bash
        env:
          SRC_BUNDLE: nym-vpn-desktop/src-tauri/target/release/bundle/appimage/nym-vpn*.AppImage.tar.gz
          TARGET_BUNDLE: updater_amd64.AppImage.tar.gz
        run: |
          echo "moving updater bundle and signature into ${{ env.UPDATER_BUNDLE_DIR }}"
          rm -rf $UPDATER_BUNDLE_DIR || true
          mkdir $UPDATER_BUNDLE_DIR
          mv ${{ env.SRC_BUNDLE }}     $UPDATER_BUNDLE_DIR/${TARGET_BUNDLE} || true
          mv ${{ env.SRC_BUNDLE }}.sig $UPDATER_BUNDLE_DIR/${TARGET_BUNDLE}.sig || true
          ls -la $UPDATER_BUNDLE_DIR

      - name: Move updater bundle artifacts (Macos)
        if: contains(matrix.os, 'mac')
        shell: bash
        env:
          SRC_BUNDLE: nym-vpn-desktop/src-tauri/target/universal-apple-darwin/release/bundle/macos/nym-vpn.app.tar.gz
          TARGET_BUNDLE: updater_universal.app.tar.gz
        run: |
          echo "moving updater bundle and signature into ${{ env.UPDATER_BUNDLE_DIR }}"
          rm -rf $UPDATER_BUNDLE_DIR || true
          mkdir $UPDATER_BUNDLE_DIR
          mv ${{ env.SRC_BUNDLE }}     $UPDATER_BUNDLE_DIR/${TARGET_BUNDLE} || true
          mv ${{ env.SRC_BUNDLE }}.sig $UPDATER_BUNDLE_DIR/${TARGET_BUNDLE}.sig || true
          ls -la $UPDATER_BUNDLE_DIR

      - name: Upload updater bundle (${{ env.PLATFORM_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPDATER_BUNDLE_NAME }}
          # upload both the updater bundle and its signature
          # - updater_*.tar.gz
          # - updater_*.tar.gz.sig
          path: ${{ env.UPDATER_BUNDLE_DIR }}
          retention-days: 2

      - name: Create archive
        shell: bash
        run: |
          mkdir ${{ env.ARTIFACT_DIR }}
          cp -vpr nym-vpn-desktop/src-tauri/target/${{ env.ARCH_TARGET }}/release/bundle/appimage/nym-vpn*.AppImage ${{ env.ARTIFACT_DIR }} || true
          cp -vpr nym-vpn-desktop/src-tauri/target/${{ env.ARCH_TARGET }}/release/bundle/deb/nym-vpn*.deb ${{ env.ARTIFACT_DIR }} || true
          cp -vpr nym-vpn-desktop/src-tauri/target/${{ env.ARCH_TARGET }}/release/bundle/dmg/nym-vpn*.dmg ${{ env.ARTIFACT_DIR }} || true
          tar -cvzf ${{ env.ARTIFACT_ARCHIVE }} ${{ env.ARTIFACT_DIR }}

      - name: Upload artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_ARCHIVE }}
          path: ${{ env.ARTIFACT_ARCHIVE }}
          retention-days: 2

      # Build info, but for now it's just the version
      - name: Generate build info (${{ env.PLATFORM_ARCH }})
        if: contains(matrix.os, 'ubuntu-22.04')
        run: |
          ./nym-vpn-desktop/src-tauri/target/release/bundle/appimage/nym-vpn_*_amd64.AppImage --build-info > build-info.txt
          cat build-info.txt

      - name: Upload build-info (${{ env.PLATFORM_ARCH }})
        if: contains(matrix.os, 'ubuntu-22.04')
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt
          retention-days: 2

  publish:
    # We can't use always() since that creates an uncancellable
    # job
    #if: always() && (github.event_name != 'workflow_dispatch' || inputs.publish == true)
    #if: ${{ !cancelled() && (success() || failure() || needs.build.result == 'skipped') && (github.event_name != 'workflow_dispatch' || inputs.publish == true) }}
    if: github.event_name != 'workflow_dispatch' || inputs.publish == true
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Downloads *all* artifacts produced by the `build` job
      # Each individual artifact will be located in a directory
      # named with the same name of the artifact (upload)
      - name: Download artifacts
        uses: actions/download-artifact@v4

      # Setup TAG_NAME, which is used as a general "name"
      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly-desktop' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Set tag
        id: set_tag
        run: echo "tag=${{ env.TAG_NAME }}" >> "$GITHUB_OUTPUT"

      # We don't bother publishing if not the build info is available
      - name: Check if build-info present
        run: test -f build-info/build-info.txt

      - name: Build info
        run: |
          BUILD_VERSION=$(grep "package version" build-info/build-info.txt | cut -d ':' -f 2 | tr -d ' ')
          echo BUILD_VERSION=$BUILD_VERSION
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo 'BUILD_INFO<<EOF' >> $GITHUB_ENV
          cat build-info/build-info.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - if: env.TAG_NAME == 'nightly-desktop'
        run: |
          (echo "SUBJECT=nym-vpn-desktop-v$BUILD_VERSION nightly prerelease build";
           echo 'PRERELEASE=--prerelease';
           echo 'NOTES_FILE=release-notes-desktop-nightly.md') >> $GITHUB_ENV
          gh release delete nightly-desktop --yes || true
          git push origin :nightly-desktop || true
      # Once we consider these actually release builds, remove --prerelease
      # from PRERELEASE here
      - if: env.TAG_NAME != 'nightly-desktop'
        run: |
          (echo "SUBJECT=$TAG_NAME"
           echo 'PRERELEASE='
           echo 'NOTES_FILE=release-notes-desktop.md') >> $GITHUB_ENV

      # Recall that download-artifact will extract into a directory that
      # includes the tar.gz suffix.
      # We rm all the empty directories first so since that signifies a failed
      # build where we continue-on-error and should not have their artifacts
      # published, which would just be an empty archive.
      - name: Generate checksums
        run: |
          rmdir nym-vpn-desktop_*tar.gz || true
          for file in nym-vpn-desktop_*tar.gz; do pushd $file; for f in nym-vpn-desktop_*; do sha256sum ${f} > "${f}.sha256sum"; done; popd; done
          echo 'SHA256_CHECKSUMS<<EOF' >> $GITHUB_ENV
          cat nym-vpn-desktop_*.tar.gz/*.sha256sum >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Publish release
        run: |
          echo "build info"
          echo "$BUILD_INFO"
          echo "checksums"
          echo "$SHA256_CHECKSUMS"
          echo "Creating release notes"
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/$NOTES_FILE" > "$RUNNER_TEMP/release-notes.md"
          echo "Creating release nodes: output"
          cat $RUNNER_TEMP/release-notes.md
          echo "Creating release"
          echo gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/release-notes.md" --title "$SUBJECT" --target $GITHUB_SHA nym-vpn-desktop_*.tar.gz/* updater-bundle_*/*
          gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/release-notes.md" --title "$SUBJECT" --target $GITHUB_SHA nym-vpn-desktop_*.tar.gz/* updater-bundle_*/*

  gen-hashes:
    uses: ./.github/workflows/gen-hashes-json.yml
    needs: publish
    with:
      release_tag: ${{ needs.publish.outputs.tag }}
    secrets: inherit

