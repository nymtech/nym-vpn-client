name: release-desktop

on:
  workflow_dispatch:
concurrency:
  group: "release-desktop"
env:
  CARGO_TERM_COLOR: always

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        os:
          [
#            ubuntu-22.04-16-core,
#            ubuntu-20.04-16-core,
#            custom-runner-mac-m1
            macos-latest
          ]
    uses: ./.github/workflows/build-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build:
    needs: build-wireguard-go
    strategy:
      fail-fast: false
      matrix:
        os:
          [
#            ubuntu-22.04-16-core,
#            ubuntu-20.04-16-core,
#            custom-runner-mac-m1
            macos-latest
          ]
    runs-on: ${{ matrix.os }}
    env:
      # TODO use repo secrets instead
      TAURI_PRIVATE_KEY: "1234"
      TAURI_KEY_PASSWORD: "1234"
      WG_GO_LIB_PATH: ${{ github.workspace }}/lib

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-desktop
            nym-vpn-lib

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev

      - name: Set env
        run: |
          if ${{ contains(matrix.os, 'ubuntu-22.04') }}; then
            platform_arch=ubuntu-22.04_x86_64
          elif ${{ contains(matrix.os, 'ubuntu-20.04') }}; then
            platform_arch=ubuntu-20.04_x86_64
          elif ${{ contains(matrix.os, 'mac-m1') }}; then
            platform_arch=macos_aarch64
            platform_arch_x86=macos_x86_64
            platform_arch_universal=macos_universal
            wg_go_lib_name_x86="wireguard-go_$platform_arch_x86"
            wg_go_lib_name_universal="wireguard-go_$platform_arch_universal"
            
            echo "platform_arch_x86=$platform_arch_x86" >> $GITHUB_ENV
            echo "platform_arch_universal=$platform_arch_universal" >> $GITHUB_ENV
            echo "wg_go_lib_name_x86=$wg_go_lib_name_x86" >> $GITHUB_ENV
            echo "wg_go_lib_name_universal=$wg_go_lib_name_universal" >> $GITHUB_ENV
           elif ${{ contains(matrix.os, 'macos') }}; then
            platform_arch=macos_x86_64
          else
            echo " ✗ unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          wg_go_lib_name="wireguard-go_$platform_arch"
          # debug
          echo " ✓ PLATFORM_ARCH: $platform_arch"
          echo " ✓ WG_GO_LIB_NAME: $wg_go_lib_name"
          echo " ✓ WG_GO_LIB_PATH: ${{ env.WG_GO_LIB_PATH }}"
          # set github env
          echo "PLATFORM_ARCH=$platform_arch" >> $GITHUB_ENV
          echo "WG_GO_LIB_NAME=$wg_go_lib_name" >> $GITHUB_ENV

      - name: Download wireguard-go artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WG_GO_LIB_NAME }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Download wireguard-go artifacts for macOS x86
        uses: actions/download-artifact@v4
        if: contains(matrix.os, 'mac-m1')
        with:
          name: ${{ env.wg_go_lib_name_x86 }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Download wireguard-go artifacts for macOS universal
        uses: actions/download-artifact@v4
        if: contains(matrix.os, 'mac-m1')
        with:
          name: ${{ env.wg_go_lib_name_universal }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Get version
        working-directory: nym-vpn-desktop/src-tauri
        shell: bash
        run: |
          version=$(jq '.package.version' --raw-output tauri.conf.json)
          echo " ✓ App version: $version"
          echo "APP_VERSION=$version" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install extra architectures macOS
        if: contains(matrix.os, 'mac-m1')
        run: |
          rustup target add x86_64-apple-darwin

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
#        if: contains(matrix.os, 'mac-m1')
        if: contains(matrix.os, 'macos-latest')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare desktop build
        run: mkdir nym-vpn-desktop/dist

      - name: Install node dependencies
        working-directory: nym-vpn-desktop
        run: npm i

#      - name: Install the Apple developer certificate for code signing
#        if: contains(matrix.os, 'mac-m1')
#        env:
#          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
#          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
#          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo $APPLE_CERTIFICATE | base64 --decode > $CERTIFICATE_PATH
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build desktop client
        working-directory: nym-vpn-desktop/src-tauri
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ env.TAURI_PRIVATE_PASSWORD }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
#          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
#          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
#          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_IDENTITY_ID }}
#          APPLE_ID: ${{ secrets.APPLE_ID }}
#          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        shell: bash
        run: |
          npm run tauri build
        # TODO ignore `Error invalid utf-8 sequence of 1 bytes from index X` error
        continue-on-error: true

#      - name: tar artifacts (${{ env.PLATFORM_ARCH }})
#        working-directory: nym-vpn-desktop/src-tauri
#        shell: bash
#        run: |
#          ls -la target/release/bundle
#          tar -cvf bundle.tar target/release/bundle

      - name: Upload artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: nym-vpn-desktop_${{ env.APP_VERSION }}_${{ env.PLATFORM_ARCH }}
#          path: nym-vpn-desktop/src-tauri/target/release/bundle/dmg/nym-vpn_${{ env.APP_VERSION }}_aarch64.dmg
          path: nym-vpn-desktop/src-tauri/target/release/bundle/dmg/nym-vpn_${{ env.APP_VERSION }}_x64.dmg
          retention-days: 10

#      - name: Clean up keychain
#        if: contains(matrix.os, 'mac-m1')
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

#      - name: Build desktop client macOS x64_86
#        if: contains(matrix.os, 'mac-m1')
#        working-directory: nym-vpn-desktop/src-tauri
#        env:
#          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
#          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
#          TAURI_KEY_PASSWORD: ${{ env.TAURI_PRIVATE_PASSWORD }}
#        shell: bash
#        run: |
#          npm run tauri build -- --target x86_64-apple-darwin
#        # TODO ignore `Error invalid utf-8 sequence of 1 bytes from index X` error
#        continue-on-error: true

#      - name: tar artifacts macOS x64_86
#        if: contains(matrix.os, 'mac-m1')
#        working-directory: nym-vpn-desktop/src-tauri
#        shell: bash
#        run: |
#          ls -la target/release/bundle
#          tar -cvf bundle.tar target/release/bundle
#
#      - name: Upload artifacts (${{ env.platform_arch_x86 }})
#        if: contains(matrix.os, 'mac-m1')
#        uses: actions/upload-artifact@v4
#        with:
#          name: nym-vpn-desktop_${{ env.APP_VERSION }}_${{ env.platform_arch_x86 }}
#          path: nym-vpn-desktop/src-tauri/bundle.tar
#          retention-days: 10
#
#      - name: Build desktop client macOS universal
#        if: contains(matrix.os, 'mac-m1')
#        working-directory: nym-vpn-desktop/src-tauri
#        env:
#          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
#          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
#          TAURI_KEY_PASSWORD: ${{ env.TAURI_PRIVATE_PASSWORD }}
#        shell: bash
#        run: |
#          npm run tauri build -- --target universal-apple-darwin
#        # TODO ignore `Error invalid utf-8 sequence of 1 bytes from index X` error
#        continue-on-error: true
#
#      - name: tar artifacts macOS universal
#        if: contains(matrix.os, 'mac-m1')
#        working-directory: nym-vpn-desktop/src-tauri
#        shell: bash
#        run: |
#          ls -la target/release/bundle
#          tar -cvf bundle.tar target/release/bundle
#
#      - name: Upload artifacts (${{ env.platform_arch_universal }})
#        uses: actions/upload-artifact@v4
#        if: contains(matrix.os, 'mac-m1')
#        with:
#          name: nym-vpn-desktop_${{ env.APP_VERSION }}_${{ env.platform_arch_universal }}
#          path: nym-vpn-desktop/src-tauri/bundle.tar
#          retention-days: 10