name: release-desktop

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-20.04, macos-latest]
        # os: [ubuntu-20.04-16-core, macos-latest-large, windows-latest-8-core]
        os: [macos-latest-large, windows-latest-8-core]
    runs-on: ${{ matrix.os }}
    env:
      # TODO use repo secrets instead
      TAURI_PRIVATE_KEY: "1234"
      TAURI_KEY_PASSWORD: "1234"

    steps:
      - name: Checkout nym-vpn-client
        uses: actions/checkout@v4
        with:
          path: nym-vpn-client

      - name: Checkout nym-vpn-ui
        uses: actions/checkout@v4
        with:
          repository: nymtech/nym
          path: nym
          ref: develop
          # fetch only nym-vpn/ui directory
          sparse-checkout: |
            nym-vpn/ui
          sparse-checkout-cone-mode: false

      - name: Get version
        working-directory: nym/nym-vpn/ui/src-tauri
        shell: bash
        run: |
          version=$(jq '.package.version' --raw-output tauri.conf.json)
          echo "âœ“ App version: $version"
          echo "APP_VERSION=$version" >> $GITHUB_ENV

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Yarn
        run: npm install -g yarn

      - name: Set LIBRARY_PATH
        working-directory: nym-vpn-client
        shell: bash
        run: |
          if ${{ contains(matrix.os, 'ubuntu') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'macos') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'windows') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-windows" >> $GITHUB_ENV
          fi

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'windows')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Build wireguard
        working-directory: nym-vpn-client
        shell: bash
        run: |
          ./wireguard/build-wireguard-go.sh
          ls -la ${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/

      - name: Build nym-vpn-lib
        working-directory: nym-vpn-client/nym-vpn-lib
        shell: bash
        run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo build --release --verbose

      - name: Prepare desktop build
        working-directory: nym
        run: mkdir nym-vpn/ui/dist

      - name: Install node dependencies
        working-directory: nym/nym-vpn/ui
        run: yarn

      - name: Build desktop client
        working-directory: nym/nym-vpn/ui/src-tauri
        env:
          RUSTFLAGS: "-L ${{ env.LIBRARY_PATH }}"
          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ env.TAURI_PRIVATE_PASSWORD }}
        shell: bash
        run: |
          yarn tauri build
          ls -la target/release/bundle
        # TODO ignore `Error invalid utf-8 sequence of 1 bytes from index X` error
        continue-on-error: true

      - name: Upload artifacts (Linux build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'ubuntu')
        with:
          name: nym-vpn-desktop-ubuntu-20.04
          path: |
            nym/nym-vpn/ui/src-tauri/target/release/bundle/deb/nym-vpn_${{ env.APP_VERSION }}_amd64.deb
            nym/nym-vpn/ui/src-tauri/target/release/bundle/appimage/nym-vpn_${{ env.APP_VERSION }}_amd64.AppImage

      - name: Upload artifacts (macos build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'macos')
        with:
          name: nym-vpn-desktop-macos-latest
          # TODO fix artifact paths
          path: |
            nym/nym-vpn/ui/src-tauri/target/release/bundle/dmg/nym-vpn_${{ env.APP_VERSION }}_x64.dmg
            nym/nym-vpn/ui/src-tauri/target/release/bundle/macos/nym-vpn.app

      # - name: Upload artifacts (Windows build)
      #   uses: actions/upload-artifact@v4
      #   if: contains(matrix.os, 'windows')
      #   with:
      #     name: nym-vpn-desktop-windows
      #     path: |
      #       nym/nym-vpn/ui/src-tauri/target/release/bundle/deb/nym-vpn_${{ env.APP_VERSION }}_amd64.deb
      #       nym/nym-vpn/ui/src-tauri/target/release/bundle/appimage/nym-vpn_${{ env.APP_VERSION }}_amd64.AppImage
