name: release-desktop

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # TODO lets try to build only for linux first
        # os: [ubuntu-22.04, macos-latest]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    env:
      # TODO use repo secrets instead
      TAURI_PRIVATE_KEY: "1234"
      TAURI_KEY_PASSWORD: "1234"

    steps:
      - name: Checkout nym-vpn-client
        uses: actions/checkout@v4
        with:
          path: nym-vpn-client

      - name: Checkout nym monorepo
        uses: actions/checkout@v4
        with:
          repository: nymtech/nym
          path: nym
          ref: develop
          # fetch only nym-vpn/ui directory
          sparse-checkout: |
            nym-vpn/ui
          sparse-checkout-cone-mode: false

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev
        if: matrix.os == 'ubuntu-22.04'

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Yarn
        run: npm install -g yarn

      - name: Set LIBRARY_PATH
        working-directory: nym-vpn-client
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/nym-vpn-client/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
          fi

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wireguard
        working-directory: nym-vpn-client
        run: ./wireguard/build-wireguard-go.sh

      - name: Build nym-vpn-lib
        working-directory: nym-vpn-client/nym-vpn-lib
        run: RUSTFLAGS="-L ${LIBRARY_PATH}" cargo build --release --verbose

      - name: Prepare desktop build
        working-directory: nym
        run: mkdir nym-vpn/ui/dist

      - name: Install node dependencies
        working-directory: nym/nym-vpn/ui
        run: yarn

      - name: Build desktop client
        working-directory: nym/nym-vpn/ui/src-tauri
        run: TAURI_PRIVATE_KEY=${{ env.TAURI_PRIVATE_KEY }} TAURI_KEY_PASSWORD=${{ env.TAURI_PRIVATE_PASSWORD }} yarn tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        working-directory: nym/nym-vpn/ui
        with:
          name: nym-vpn-ui-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/deb/nym-vpn-ui_0.0.0_amd64.deb
            src-tauri/target/release/bundle/deb/nym-vpn-ui_0.0.0_amd64.AppImage
