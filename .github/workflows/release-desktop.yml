name: release-desktop

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        os: [ubuntu-22.04-16-core, macos-latest-large, custom-runner-mac-m1]
    uses: ./.github/workflows/build-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            ubuntu-20.04-16-core,
            ubuntu-22.04-16-core,
            macos-latest-large,
            custom-runner-mac-m1,
          ]
    runs-on: ${{ matrix.os }}
    env:
      # TODO use repo secrets instead
      TAURI_PRIVATE_KEY: "1234"
      TAURI_KEY_PASSWORD: "1234"

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-desktop
            nym-vpn-lib

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev

      # TODO add a step for windows runner
      - name: Download wireguard-go artifacts (linux x86_64)
        uses: actions/download-artifact@v3
        if: contains(matrix.os, 'ubuntu')
        with:
          name: wireguard-go_linux-x86_64
          path: lib

      - name: Download wireguard-go artifacts (macos aarch64)
        uses: actions/download-artifact@v3
        if: contains(matrix.os, 'mac-m1')
        with:
          name: wireguard-go_macos-aarch64
          path: lib

      - name: Download wireguard-go artifacts (macos x86_64)
        uses: actions/download-artifact@v3
        if: contains(matrix.os, 'macos')
        with:
          name: wireguard-go_macos-x86_64
          path: lib

      - name: Set LIBRARY_PATH
        working-directory: nym-vpn-client
        shell: bash
        run: |
          if ${{ contains(matrix.os, 'ubuntu') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'mac-m1') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/aarch64-apple-darwin" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'macos') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/x86_64-apple-darwin" >> $GITHUB_ENV
          elif ${{ contains(matrix.os, 'windows') }}; then
            echo "LIBRARY_PATH=${GITHUB_WORKSPACE}/lib/build/lib/x86_64-windows" >> $GITHUB_ENV
          fi

      - name: Get version
        working-directory: nym-vpn-client/nym-vpn-desktop/src-tauri
        shell: bash
        run: |
          version=$(jq '.package.version' --raw-output tauri.conf.json)
          echo "âœ“ App version: $version"
          echo "APP_VERSION=$version" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1') || contains(matrix.os, 'windows')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare desktop build
        working-directory: nym
        run: mkdir nym-vpn-client/nym-vpn-desktop/dist

      - name: Install node dependencies
        working-directory: nym-vpn-client/nym-vpn-desktop
        run: npm i

      - name: Build desktop client
        working-directory: nym-vpn-client/nym-vpn-desktop/src-tauri
        env:
          RUSTFLAGS: "-L ${{ env.LIBRARY_PATH }}"
          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ env.TAURI_PRIVATE_PASSWORD }}
        shell: bash
        run: |
          npm run tauri build
          ls -la target/release/bundle
        # TODO ignore `Error invalid utf-8 sequence of 1 bytes from index X` error
        continue-on-error: true

      - name: Upload artifacts (ubuntu-20.04 build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'ubuntu-20.04')
        with:
          name: nym-vpn-desktop_ubuntu-20.04
          path: |
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/deb/nym-vpn_${{ env.APP_VERSION }}_amd64.deb
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/appimage/nym-vpn_${{ env.APP_VERSION }}_amd64.AppImage

      - name: Upload artifacts (ubuntu-22.04 build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'ubuntu-22.04')
        with:
          name: nym-vpn-desktop_ubuntu-22.04
          path: |
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/deb/nym-vpn_${{ env.APP_VERSION }}_amd64.deb
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/appimage/nym-vpn_${{ env.APP_VERSION }}_amd64.AppImage

      - name: Upload artifacts (macos aarch64 build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'mac-m1')
        with:
          name: nym-vpn-desktop_macos-aarch64
          # TODO fix artifact paths
          path: |
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/dmg/nym-vpn_${{ env.APP_VERSION }}_aarch64.dmg
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/macos/nym-vpn.app

      - name: Upload artifacts (macos x86_64 build)
        uses: actions/upload-artifact@v4
        if: contains(matrix.os, 'macos')
        with:
          name: nym-vpn-desktop_macos-x86_64
          # TODO fix artifact paths
          path: |
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/dmg/nym-vpn_${{ env.APP_VERSION }}_x64.dmg
            nym-vpn-client/nym-vpn-desktop/src-tauri/target/release/bundle/macos/nym-vpn.app

