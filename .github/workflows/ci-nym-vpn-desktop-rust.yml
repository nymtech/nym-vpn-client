name: ci-nym-vpn-desktop-rust

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "nym-vpn-desktop/src-tauri/**"
      # also trigger the jobs on upstream dependencies changes
      - "wireguard/**"
      - "nym-vpn-lib/**"
      - ".github/workflows/ci-nym-vpn-desktop-rust.yml"

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, custom-runner-mac-m1]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Cleanup working directory'
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu') || matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev \
            protobuf-compiler libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev \
            libgtk-3-dev squashfs-tools libayatana-appindicator3-dev git curl gcc g++ make

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env
        run: |
          if ${{ contains(matrix.os, 'ubuntu-20.04') }}; then
            platform_arch=ubuntu-20.04_x86_64
            triplet=x86_64-unknown-linux-gnu
          elif ${{ contains(matrix.os, 'ubuntu-22.04') || matrix.os == 'ubuntu-22.04' }}; then
            platform_arch=ubuntu-22.04_x86_64
            triplet=x86_64-unknown-linux-gnu
          elif ${{ matrix.os == 'macos-12' || matrix.os == 'macos-13' }}; then
            platform_arch=macos_x86_64
            triplet=x86_64-apple-darwin
          elif ${{ contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1') }}; then
            # platform_arch=macos_aarch64
            platform_arch=macos_universal
            triplet=universal-apple-darwin
          else
            echo " ✗ unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          echo " ✓ PLATFORM_ARCH: $platform_arch"
          echo " ✓ TRIPLET: $triplet"
          echo "PLATFORM_ARCH=$platform_arch" >> $GITHUB_ENV
          echo "TRIPLET=$triplet" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L ${GITHUB_WORKSPACE}/build/lib/${triplet}" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wireguard
        run: ./wireguard/build-wireguard-go.sh

      - name: rustfmt check
        working-directory: nym-vpn-desktop/src-tauri
        run: cargo fmt --check

      - name: clippy check
        working-directory: nym-vpn-desktop/src-tauri
        run: cargo clippy -- -Dwarnings

