name: release-nym-vpn-cli
on:
  schedule:
    - cron: '4 3 * * *'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
      publish:
        type: boolean
        description: Publish Release
        required: true
        default: false
  push:
    tags:
      - nym-vpn-cli-v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        # os: [ ubuntu-22.04, custom-runner-mac-m1 ]
        os: [ ubuntu-22.04, macos-14 ]
    uses: ./.github/workflows/build-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build-wireguard-go-android:
    uses: ./.github/workflows/build-wireguard-go-android.yml

  build:
    needs: [ build-wireguard-go, build-wireguard-go-android ]
    strategy:
      fail-fast: false
      matrix:
        # os: [ ubuntu-22.04, custom-runner-mac-m1 ]
        os: [ ubuntu-22.04, macos-14 ]
        target: [ native ]
    #        include:
    #          - os: ubuntu-20.04
    #            target: android
    runs-on: ${{ matrix.os }}
    env:
      WG_GO_LIB_PATH: ${{ github.workspace }}/lib

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-cli
            nym-vpn-lib
            nym-vpnd

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler

      - name: Get package version
        id: package-version
        uses: nicolaiunrein/cargo-get@master
        with:
          subcommand: package.version --entry="nym-vpn-cli"

      - name: Check tag name consistency
        if: github.event_name == 'push'
        run: |
          if [[ nym-vpn-cli-v${{ steps.package-version.outputs.metadata }} != ${{ github.ref_name }} ]]; then
            exit 1
          fi

      - name: Check name consistency
        if: inputs.tag_name == 'nightly-desktop'
        run: exit 1

      - name: Set env
        run: |
          if ${{ contains(matrix.os, 'ubuntu-22.04') && contains(matrix.target, 'native') }}; then
            platform_arch=ubuntu-22.04_x86_64
          elif ${{ contains(matrix.target, 'android') }}; then
            platform_arch=aarch64-linux-android
          elif ${{ matrix.os == 'custom-runner-mac-m1' }}; then
            platform_arch=macos_universal
          elif ${{ matrix.os == 'macos-14' }}; then
            platform_arch=macos_universal
          else
            echo " ✗ unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          wg_go_lib_name="wireguard-go_$platform_arch"
          if ${{ contains(matrix.target, 'android') }}; then
            artifact_dir="nym-vpn-lib_${{ steps.package-version.outputs.metadata }}_$platform_arch"
          else
            artifact_dir="nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_$platform_arch"
          fi
          artifact_archive="$artifact_dir.tar.gz"
          artifact_checksum="$artifact_archive.sha256sum"
          # debug
          echo " ✓ PLATFORM_ARCH: $platform_arch"
          echo " ✓ WG_GO_LIB_NAME: $wg_go_lib_name"
          echo " ✓ WG_GO_LIB_PATH: ${{ env.WG_GO_LIB_PATH }}"
          echo " ✓ ARTIFACT_DIR: $artifact_dir"
          echo " ✓ ARTIFACT_ARCHIVE: $artifact_archive"
          # set github env
          echo "PLATFORM_ARCH=$platform_arch" >> $GITHUB_ENV
          echo "WG_GO_LIB_NAME=$wg_go_lib_name" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$artifact_dir" >> $GITHUB_ENV
          echo "ARTIFACT_ARCHIVE=$artifact_archive" >> $GITHUB_ENV
          echo "ARTIFACT_CHECKSUM=$artifact_checksum" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ contains(matrix.target, 'native') }}
        with:
          components: rustfmt, clippy

      - name: Install extra arch macos
        if: env.PLATFORM_ARCH == 'macos_universal'
        run: |
          rustup target add x86_64-apple-darwin

      - name: Install cross
        uses: actions-rs/cargo@v1
        if: contains(matrix.target, 'android')
        with:
          command: install
          args: cross --git https://github.com/cross-rs/cross

      - name: Download wireguard-go artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WG_GO_LIB_NAME }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native
        if: ${{ contains(matrix.target, 'native') }}
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
        run: cargo build --release --verbose

      - name: Build universal (macos)
        if: ${{ contains(matrix.os, 'custom-runner-mac-m1') || matrix.os == 'macos-14' }}
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
        run: cargo build --release --verbose --target x86_64-apple-darwin

      - name: Build Android
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
        uses: actions-rs/cargo@v1
        if: contains(matrix.target, 'android')
        with:
          use-cross: true
          command: build
          args: --target aarch64-linux-android --release -p nym-vpn-lib

      - name: Run tests
        if: ${{ contains(matrix.os, 'native') }}
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
        run: cargo test --release --verbose

      - name: Create archive
        run: |
          mkdir ${{ env.ARTIFACT_DIR }}
          if ${{ contains(matrix.target, 'android') }}; then
            cp target/aarch64-linux-android/release/libnym_vpn_lib.so ${{ env.ARTIFACT_DIR }}
          elif ${{ contains(matrix.os, 'custom-runner-mac-m1') }}; then
            lipo -create -output ${{ env.ARTIFACT_DIR }}/nym-vpn-cli target/release/nym-vpn-cli target/x86_64-apple-darwin/release/nym-vpn-cli
          elif ${{ matrix.os == 'macos-14'}}; then
            lipo -create -output ${{ env.ARTIFACT_DIR }}/nym-vpn-cli target/release/nym-vpn-cli target/x86_64-apple-darwin/release/nym-vpn-cli
          else
            cp target/release/nym-vpn-cli ${{ env.ARTIFACT_DIR }}
          fi
          tar -cvzf ${{ env.ARTIFACT_ARCHIVE }} ${{ env.ARTIFACT_DIR }}

      - name: Upload artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_ARCHIVE }}
          path: ${{ env.ARTIFACT_ARCHIVE }}
          retention-days: 2

      - name: Generate build info (${{ env.PLATFORM_ARCH }})
        if: ${{ contains(matrix.os, 'ubuntu-22.04') && contains(matrix.target, 'native') }}
        run: |
          ./target/release/nym-vpn-cli --version > build-info.txt
          cat build-info.txt

      - name: Upload build-info (${{ env.PLATFORM_ARCH }})
        if: ${{ contains(matrix.os, 'ubuntu-22.04') && contains(matrix.target, 'native') }}
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt
          retention-days: 2

  publish:
    if: github.event_name != 'workflow_dispatch' || inputs.publish == true
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      # Setup TAG_NAME, which is used as a general "name"
      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Build info
        run: |
          BUILD_VERSION=$(grep "Build Version" build-info/build-info.txt | cut -d ':' -f 2 | tr -d ' ')
          echo BUILD_VERSION=$BUILD_VERSION
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo 'BUILD_INFO<<EOF' >> $GITHUB_ENV
          cat build-info/build-info.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - if: env.TAG_NAME == 'nightly'
        run: |
          (echo "SUBJECT=nym-vpn-cli-v$BUILD_VERSION nightly prerelease build";
           echo 'PRERELEASE=--prerelease';
           echo 'NOTES_FILE=release-notes-nightly.md') >> $GITHUB_ENV
          gh release delete nightly --yes || true
          git push origin :nightly || true
      # Once we consider these actually release builds, remove --prerelease
      # from PRERELEASE here
      - if: env.TAG_NAME != 'nightly'
        run: |
          (echo "SUBJECT=$TAG_NAME"
           echo 'PRERELEASE='
           echo 'NOTES_FILE=release-notes.md') >> $GITHUB_ENV

      # Recall that download-artifact will extract into a directory that
      # includes the tar.gz suffix.
      # Remove any empty artifact directories.
      - name: Generate checksums
        run: |
          rmdir nym-vpn-cli_*tar.gz || true
          for file in nym-vpn-cli_*tar.gz; do pushd $file; for f in nym-vpn-cli_*; do sha256sum ${f} > "${f}.sha256sum"; done; popd; done
          echo 'SHA256_CHECKSUMS<<EOF' >> $GITHUB_ENV
          cat nym-vpn-cli_*.tar.gz/*.sha256sum >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Publish release
        run: |
          echo "build info"
          echo "$BUILD_INFO"
          echo "checksums"
          echo "$SHA256_CHECKSUMS"
          echo "Creating release notes"
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/$NOTES_FILE" > "$RUNNER_TEMP/release-notes.md"
          echo "Creating release nodes: output"
          cat $RUNNER_TEMP/release-notes.md
          echo "Creating release"
          echo gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/release-notes.md" --title "$SUBJECT" --target $GITHUB_SHA nym-vpn-*.tar.gz/*
          gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/release-notes.md" --title "$SUBJECT" --target $GITHUB_SHA nym-vpn-*.tar.gz/*
