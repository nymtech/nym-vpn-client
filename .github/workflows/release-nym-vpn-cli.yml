name: release-nym-vpn-cli
on:
  # schedule:
  #   - cron: '5 5 * * *'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
      publish:
        type: boolean
        description: Publish Release
        required: true
        default: false
  # push:
  #   tags:
  #     - nym-vpn-cli-v[0-9]+.[0-9]+.[0-9]+

jobs:
  build-wireguard-go:
    strategy:
      matrix:
        # os: [ubuntu-22.04-16-core, macos-latest, custom-runner-mac-m1]
        # os: [custom-runner-mac-m1]
        os: [ubuntu-22.04-16-core, custom-runner-mac-m1]
    uses: ./.github/workflows/build-wireguard-go.yml
    with:
      os: ${{ matrix.os }}

  build:
    needs: build-wireguard-go
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-22.04-16-core, macos-latest, custom-runner-mac-m1]
        # os: [custom-runner-mac-m1]
        os: [ubuntu-22.04-16-core, custom-runner-mac-m1]
    runs-on: ${{ matrix.os }}
    env:
      WG_GO_LIB_PATH: ${{ github.workspace }}/lib

    steps:
      - name: "Cleanup working directory"
        if: contains(matrix.os, 'custom')
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            nym-vpn-cli
            nym-vpn-lib

      - name: Install system dependencies
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev libmnl-dev libnftnl-dev protobuf-compiler

      - name: Get package version
        id: package-version
        uses: nicolaiunrein/cargo-get@master
        with:
          subcommand: package.version --entry="nym-vpn-cli"

      - name: Set env
        run: |
          if ${{ contains(matrix.os, 'ubuntu-22.04') }}; then
            platform_arch=ubuntu-22.04_x86_64
          elif ${{ contains(matrix.os, 'ubuntu-20.04') }}; then
            platform_arch=ubuntu-20.04_x86_64
          elif ${{ contains(matrix.os, 'mac-m1') }}; then
            platform_arch=macos_aarch64
          elif ${{ contains(matrix.os, 'macos') }}; then
            platform_arch=macos_x86_64
          else
            echo " ✗ unknown platform/arch [${{ matrix.os }}]"
            exit 1
          fi
          wg_go_lib_name="wireguard-go_$platform_arch"
          artifact_dir="nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_$platform_arch"
          artifact_archive="$artifact_dir.tar.gz"
          artifact_checksum="$artifact_archive.sha256sum"
          # debug
          echo " ✓ PLATFORM_ARCH: $platform_arch"
          echo " ✓ WG_GO_LIB_NAME: $wg_go_lib_name"
          echo " ✓ WG_GO_LIB_PATH: ${{ env.WG_GO_LIB_PATH }}"
          echo " ✓ ARTIFACT_DIR: $artifact_dir"
          echo " ✓ ARTIFACT_ARCHIVE: $artifact_archive"
          # set github env
          echo "PLATFORM_ARCH=$platform_arch" >> $GITHUB_ENV
          echo "WG_GO_LIB_NAME=$wg_go_lib_name" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$artifact_dir" >> $GITHUB_ENV
          echo "ARTIFACT_ARCHIVE=$artifact_archive" >> $GITHUB_ENV
          echo "ARTIFACT_CHECKSUM=$artifact_checksum" >> $GITHUB_ENV

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Download wireguard-go artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WG_GO_LIB_NAME }}
          path: ${{ env.WG_GO_LIB_PATH }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'mac-m1')
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        env:
          RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
        # run: cargo build --release --verbose
        run: cargo build --verbose

      # - name: Run tests
      #   env:
      #     RUSTFLAGS: "-L ${{ env.WG_GO_LIB_PATH }}"
      #   run: cargo test --release --verbose

      - name: Create archive
        run: |
          mkdir ${{ env.ARTIFACT_DIR }}
          cp target/debug/nym-vpn-cli ${{ env.ARTIFACT_DIR }}
          tar -cvzf ${{ env.ARTIFACT_ARCHIVE }} ${{ env.ARTIFACT_DIR }}

      - name: Generate checksums
        if: contains(matrix.os, 'ubuntu-22.04')
        run: |
          sha256sum ${{ env.ARTIFACT_ARCHIVE }} > ${{ env.ARTIFACT_CHECKSUM }}
          echo "SHA_256_${{ env.PLATFORM_ARCH }}=$(cat ${{ env.ARTIFACT_CHECKSUM }}) >> $GITHUB_ENV

      - name: Upload artifacts (${{ env.PLATFORM_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          # name: nym-vpn-cli_${{ steps.package-version.outputs.metadata }}_${{ env.PLATFORM_ARCH }}
          name: ${{ env.ARTIFACT_ARCHIVE }}
          # path: target/release/nym-vpn-cli
          # path: target/debug/nym-vpn-cli
          path: ${{ env.ARTIFACT_ARCHIVE }}
          retention-days: 2

      - name: Export version
        if: contains(matrix.os, 'ubuntu-22.04')
        id: build-info
        run: |
          printf 'version<<END\n' >> $GITHUB_OUTPUT
          ./target/debug/nym-vpn-cli --version >> $GITHUB_OUTPUT
          printf 'END\n' >> $GITHUB_OUTPUT

      - name: Generate build info
        if: contains(matrix.os, 'ubuntu-22.04')
        run: |
          ./target/debug/nym-vpn-cli --version > build-info.txt
          cat build-info.txt

      - name: Upload build-info (${{ env.PLATFORM_ARCH }})
        if: contains(matrix.os, 'ubuntu-22.04')
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt
          retention-days: 2

  publish:
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'nightly'
        run: |
          (echo 'SUBJECT=nym-vpn-cli nightly dev build';
           echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
          gh release delete nightly --yes || true
          git push origin :nightly || true
      # - if: env.TAG_NAME != 'nightly'
      #   run: |
      #     (echo 'SUBJECT=nym-vpn-cli release build';
      #      echo 'PRERELEASE=') >> $GITHUB_ENV
      #     gh release delete stable --yes || true
      #     git push origin :stable || true

      - name: Generate checksums
        run: |
          for file in nym-vpn-cli_*; do sha256sum "$file" > "${file}.sha256sum"; done

      - name: Publish release
        if: env.TAG_NAME == 'nightly' && inputs.publish == true
        env:
          # DEBUG: api
          BIN_VERSION: ${{ needs.build.steps.build-info.outputs.version }}
        run: |
          ls -al
          ls -al nym-vpn-cli_*
          ls -al build-info
          echo "BUILD_INFO=$(cat build-info/build-info.txt)" >> $GITHUB_ENV
          echo $BUILD_INFO
          echo "SHA256_CHECKSUMS=$(cat nym-vpn-cli_*.sha256sum)" >> $GITHUB_ENV
          echo $SHA256_CHECKSUMS
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/release-notes.md" > "$RUNNER_TEMP/release-notes.md"
          # if [ "$TAG_NAME" != "nightly" ]; then
          #   gh release create stable $PRERELEASE --notes-file "$RUNNER_TEMP/release-notes.md" --title "$SUBJECT" --target $GITHUB_SHA nvim-macos/* nvim-linux64/* appimage/* nvim-win64/*
          # fi
          echo gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/release-notes.md" --title "$SUBJECT" --target $GITHUB_SHA nym-vpn-cli_*.tar.gz
